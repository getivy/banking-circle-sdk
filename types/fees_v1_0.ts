/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/fees/{fee-id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get details of a specific fee */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of the fee. The ID can be found using the Api/v1/fees endpoint
                     * @example 85d7ffef-c99c-4b57-b18e-323e6b0e8199
                     */
                    "fee-id": string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Fee"];
                    };
                };
                /** @description Bad request.<br />Request is not correctly formulated. Goes for both Header, Query and Body. Verify the error description and properties. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetFeeTransactionByIdError400Dto"];
                    };
                };
                /** @description Unauthorized.<br />The request requires user authentication. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["NoResponse"];
                    };
                };
                /** @description Not found. There is no resource behind the URL, i.e. requesting data on an account that does not exist. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error404Dto"];
                    };
                };
                /** @description Internal Server Error. Something unexpected happened on BC Connect side. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error500Dto"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/fees": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get details of all fees */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Number of pages returned.<br />
                     *     Condition: Valid page number(1 to n)
                     * @example 1
                     */
                    PageNumber?: number;
                    /**
                     * @description No. of items returned per page.<br />
                     *     Condition: Valid page number(1 to 5000)
                     * @example 50
                     */
                    PageSize?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FeePagedResponse"];
                    };
                };
                /** @description Bad request.<br />Request is not correctly formulated. Goes for both Header, Query and Body. Verify the error description and properties. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetFeeTransactionsError400Dto"];
                    };
                };
                /** @description Unauthorized.<br />The request requires user authentication. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["NoResponse"];
                    };
                };
                /** @description Not found. There is no resource behind the URL, i.e. requesting data on an account that does not exist. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error404Dto"];
                    };
                };
                /** @description Internal Server Error. Something unexpected happened on BC Connect side. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error500Dto"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/fees/{fee-id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get details of a specific fee */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of the fee. The ID can be found using the api/v2/fees endpoint
                     * @example 85d7ffef-c99c-4b57-b18e-323e6b0e8199
                     */
                    "fee-id": string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FeeV2"];
                    };
                };
                /** @description Bad request.<br />Request is not correctly formulated. Goes for both Header, Query and Body. Verify the error description and properties. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetFeeTransactionByIdError400Dto"];
                    };
                };
                /** @description Unauthorized.<br />The request requires user authentication. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["NoResponse"];
                    };
                };
                /** @description Not found. There is no resource behind the URL, i.e. requesting data on an account that does not exist. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error404Dto"];
                    };
                };
                /** @description Internal Server Error. Something unexpected happened on BC Connect side. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error500Dto"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/fees": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get details of all fees */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Number of pages returned.<br />
                     *     Condition: Valid page number(1 to n)
                     * @example 1
                     */
                    PageNumber?: number;
                    /**
                     * @description No. of items returned per page.<br />
                     *     Condition: Valid page number(1 to 5000)
                     * @example 50
                     */
                    PageSize?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FeeV2PagedResponse"];
                    };
                };
                /** @description Bad request.<br />Request is not correctly formulated. Goes for both Header, Query and Body. Verify the error description and properties. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetFeeTransactionsError400Dto"];
                    };
                };
                /** @description Unauthorized.<br />The request requires user authentication. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["NoResponse"];
                    };
                };
                /** @description Not found. There is no resource behind the URL, i.e. requesting data on an account that does not exist. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error404Dto"];
                    };
                };
                /** @description Internal Server Error. Something unexpected happened on BC Connect side. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error500Dto"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/interests/{interest-id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get details of a specific interest */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description ID of the Interest. The ID can be found using the api/v1/interests endpoint
                     * @example 85d7ffef-c99c-4b57-b18e-323e6b0e8199
                     */
                    "interest-id": string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Interest"];
                    };
                };
                /** @description Bad request.<br />Request is not correctly formulated. Goes for both Header, Query and Body. Verify the error description and properties. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetInterestTransactionByIdError400Dto"];
                    };
                };
                /** @description Unauthorized.<br />The request requires user authentication. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["NoResponse"];
                    };
                };
                /** @description Not found. There is no resource behind the URL, i.e. requesting data on an account that does not exist. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error404Dto"];
                    };
                };
                /** @description Internal Server Error. Something unexpected happened on BC Connect side. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error500Dto"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/interests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get details of all interests */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Number of pages returned.<br />
                     *     Condition: Valid page number(1 to n)
                     * @example 1
                     */
                    PageNumber?: number;
                    /**
                     * @description No. of items returned per page.<br />
                     *     Condition: Valid page number(1 to 5000)
                     * @example 50
                     */
                    PageSize?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["InterestPagedResponse"];
                    };
                };
                /** @description Bad request.<br />Request is not correctly formulated. Goes for both Header, Query and Body. Verify the error description and properties. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetInterestTransactionsError400Dto"];
                    };
                };
                /** @description Unauthorized.<br />The request requires user authentication. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["NoResponse"];
                    };
                };
                /** @description Not found. There is no resource behind the URL, i.e. requesting data on an account that does not exist. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error404Dto"];
                    };
                };
                /** @description Internal Server Error. Something unexpected happened on BC Connect side. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error500Dto"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AccountIdentifier: {
            /** @description Account can be either an account number or an IBAN<br />
             *     Condition: Mandatory<br />
             *     Example:
             *      * IBAN: DK9389000000012345
             *      * Account number: 0000012345 */
            account: string;
            /** @description Financial institution is either a Bank Identifier Code (BIC) or a National Clearing Code (NCC)<br />
             *     Condition: Conditional
             *      * Optional: If Account is an IBAN
             *      * Mandatory: If Account is an account number<br />
             *     Example:
             *      * BIC (UK BIC): SAPYGB2LXXX
             *      * NCC (UK Sort Code): 083002 */
            financialInstitution?: string | null;
            /** @description Condition: Conditional
             *      * Optional: If Account is an IBAN
             *      * Mandatory: If Account is an account number<br /> */
            country?: string | null;
        };
        /** @description An amount */
        Amount: {
            /** @description Amount currency */
            currency?: string | null;
            /**
             * Format: double
             * @description Amount value
             */
            amount?: number | null;
        };
        /** @description Creates swagger example for 404 error */
        Error404Dto: {
            readonly errors?: components["schemas"]["ErrorDto"][] | null;
        };
        /** @description Creates swagger example for 500 error */
        Error500Dto: {
            readonly errors?: components["schemas"]["ErrorDto"][] | null;
        };
        /** @description Base error dto for Swagger generation */
        ErrorDto: {
            /** Format: int32 */
            httpStatus?: number;
            errorCode?: string | null;
            keyOrMessage?: string | null;
            interpolations?: unknown[] | null;
            details?: string | null;
        };
        Fee: {
            status?: components["schemas"]["FeeStatus"];
            /** Format: uuid */
            feeId?: string;
            /** Format: uuid */
            accountId?: string;
            account?: components["schemas"]["AccountIdentifier"];
            description?: string | null;
            amount?: components["schemas"]["Amount"];
            /**
             * Format: date
             * @description Date representation<br />
             *     Format: ISO 8601 | YYYY-MM-DD<br />
             *     Example: 2001-01-28
             */
            instructedDate?: string | null;
            /**
             * Format: date
             * @description Date representation<br />
             *     Format: ISO 8601 | YYYY-MM-DD<br />
             *     Example: 2001-01-28
             */
            dueDate?: string | null;
            /**
             * Format: date
             * @description Date representation<br />
             *     Format: ISO 8601 | YYYY-MM-DD<br />
             *     Example: 2001-01-28
             */
            valueDate?: string | null;
        };
        FeePagedResponse: {
            /** @description Contains elements resulting from your query */
            result?: components["schemas"]["Fee"][] | null;
            pageInfo?: components["schemas"]["PageInfo"];
        };
        /** @enum {string} */
        FeeStatus: "Unknown" | "MissingFunding" | "PendingProcessing" | "Cancelled" | "Processed";
        /** @enum {string} */
        FeeTransactionStatus: "Unknown" | "Paid" | "Due" | "Upcoming";
        FeeV2: {
            status?: components["schemas"]["FeeTransactionStatus"];
            /** Format: uuid */
            feeId?: string;
            /** Format: uuid */
            accountId?: string;
            account?: components["schemas"]["AccountIdentifier"];
            description?: string | null;
            amount?: components["schemas"]["Amount"];
            /**
             * Format: date
             * @description Date representation<br />
             *     Format: ISO 8601 | YYYY-MM-DD<br />
             *     Example: 2001-01-28
             */
            instructedDate?: string | null;
            /**
             * Format: date
             * @description Date representation<br />
             *     Format: ISO 8601 | YYYY-MM-DD<br />
             *     Example: 2001-01-28
             */
            dueDate?: string | null;
            /**
             * Format: date
             * @description Date representation<br />
             *     Format: ISO 8601 | YYYY-MM-DD<br />
             *     Example: 2001-01-28
             */
            valueDate?: string | null;
        };
        FeeV2PagedResponse: {
            /** @description Contains elements resulting from your query */
            result?: components["schemas"]["FeeV2"][] | null;
            pageInfo?: components["schemas"]["PageInfo"];
        };
        /** @description Creates swagger example for 400 error<br />Is typeof(ValidationProblemDetails) */
        GetFeeTransactionByIdError400Dto: {
            readonly type?: string | null;
            readonly title?: string | null;
            /** Format: int32 */
            readonly status?: number | null;
            readonly traceId?: string | null;
            readonly errors?: {
                [key: string]: string[];
            } | null;
        };
        /** @description Creates swagger example for 400 error<br />Is typeof(ValidationProblemDetails) */
        GetFeeTransactionsError400Dto: {
            readonly type?: string | null;
            readonly title?: string | null;
            /** Format: int32 */
            readonly status?: number | null;
            readonly traceId?: string | null;
            readonly errors?: {
                [key: string]: string[];
            } | null;
        };
        /** @description Creates swagger example for 400 error<br />Is typeof(ValidationProblemDetails) */
        GetInterestTransactionByIdError400Dto: {
            readonly type?: string | null;
            readonly title?: string | null;
            /** Format: int32 */
            readonly status?: number | null;
            readonly traceId?: string | null;
            readonly errors?: {
                [key: string]: string[];
            } | null;
        };
        /** @description Creates swagger example for 400 error<br />Is typeof(ValidationProblemDetails) */
        GetInterestTransactionsError400Dto: {
            readonly type?: string | null;
            readonly title?: string | null;
            /** Format: int32 */
            readonly status?: number | null;
            readonly traceId?: string | null;
            readonly errors?: {
                [key: string]: string[];
            } | null;
        };
        Interest: {
            /** Format: uuid */
            interestId?: string;
            /** Format: uuid */
            accountId?: string;
            account?: components["schemas"]["AccountIdentifier"];
            status?: components["schemas"]["InterestStatus"];
            description?: string | null;
            amount?: components["schemas"]["Amount"];
            /**
             * Format: date
             * @description Date representation<br />
             *     Format: ISO 8601 | YYYY-MM-DD<br />
             *     Example: 2001-01-28
             */
            instructedDate?: string | null;
            /**
             * Format: date
             * @description Date representation<br />
             *     Format: ISO 8601 | YYYY-MM-DD<br />
             *     Example: 2001-01-28
             */
            dueDate?: string | null;
            /**
             * Format: date
             * @description Date representation<br />
             *     Format: ISO 8601 | YYYY-MM-DD<br />
             *     Example: 2001-01-28
             */
            valueDate?: string | null;
        };
        InterestPagedResponse: {
            /** @description Contains elements resulting from your query */
            result?: components["schemas"]["Interest"][] | null;
            pageInfo?: components["schemas"]["PageInfo"];
        };
        /** @enum {string} */
        InterestStatus: "Unknown" | "Paid" | "Due";
        /** @description No data dto for Swagger generation */
        NoResponse: Record<string, never>;
        /** @description Page information of the responded Result Set */
        PageInfo: {
            /**
             * Format: int32
             * @description What page has been retuned
             */
            currentPage?: number;
            /**
             * Format: int32
             * @description The Result Set and CurrentPage was generated based on a number of allowed elements per page (PageSize)
             */
            pageSize?: number;
            /**
             * Format: int32
             * @description Total of records
             */
            rowCount?: number | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
