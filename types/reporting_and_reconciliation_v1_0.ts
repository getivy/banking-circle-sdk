/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/reports/account-activity-report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get account activity report
         * @description <p>This endpoint returns an account activity report. The report contains account statements detailing all payments booked on your account, and their impact on the balance, within a selected date range. There is a limitation of 50,000 payments per report for this endpoint. If you need a report for more than 50,000 payments on your account, a paginated endpoint is available.</p><p>Only data from current and previous year is available online. Contact Client Services to access older data.</p>
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description Id of the account on which activities have been booked
                     *
                     *     Criteria: Exact match on the Id of the account
                     *
                     * @example d2404f75-e011-4683-9d2d-efd30943c6b8
                     */
                    AccountId: string;
                    /**
                     * @description Minimum activity transaction date
                     *
                     *     FromTransactionDate and ToTransactionDate form a date range
                     *
                     *     Criteria: AccountActivity.TransactionDate must be equal or later
                     *
                     *     Format: ISO 8601 | YYYY-MM-DD
                     *
                     * @example 2022-10-01
                     */
                    FromTransactionDate: string;
                    /**
                     * @description Maximum activity transaction date
                     *
                     *     FromTransactionDate and ToTransactionDate form a date range
                     *
                     *     Criteria: AccountActivity.TransactionDate must be equal or earlier
                     *
                     *     Format: ISO 8601 | YYYY-MM-DD
                     *
                     * @example 2022-10-01
                     */
                    ToTransactionDate: string;
                    /** @description This Parameter has been deprecated. Please use <i>PropertiesIncluded</i>  instead. */
                    IncludeProperties?: string[];
                    /**
                     * @description Properties of AccountActivity object to include in result
                     *
                     *     Please note: the use of IncludeProperties and PropertiesIncluded are mutual exclusive. - When both are used all IncludeProperties are ignored.
                     *
                     *     If PropertiesIncluded is set, PropertiesExcluded need not be set
                     *
                     *     If neither PropertiesIncluded nor PropertiesExcluded are specified, default value will be PropertiesIncluded
                     *     <ul><li>TransactionDate</li><li>ValueDate</li><li>Credit</li><li>Debit</li><li>Balance</li><li>ReferenceNumber</li><li>Description</li><li>PaymentDetails</li><li>BeneficiaryRemitter1</li><li>BeneficiaryRemitter2</li></ul><p>Extra parameters that can be added to the array, but are not part of the default array:</p><ul><li>StatusReasonCode</li><li>StatusReasonDescription</li><li>Viban (Note: 'Viban' property is available only while requesting this report in CSV format)</li></ul>
                     *     Format: comma (,) separated string
                     *
                     * @example Credit,Debit
                     */
                    PropertiesIncluded?: string;
                    /** @description This Parameter has been deprecated. Please use <i>PropertiesExcluded</i> instead. */
                    ExcludeProperties?: string[];
                    /**
                     * @description Properties of AccountActivity object to exclude from result
                     *
                     *     Please note: the use of ExcludeProperties and PropertiesExcluded are mutual exclusive. - When both are used all ExcludeProperties are ignored.
                     *
                     *     To get all available properties send an empty PropertiesExcluded
                     *
                     *     If PropertiesExcluded is set, PropertiesIncluded need not be set
                     *
                     *     Format: comma (,) separated string
                     *
                     * @example Credit,Debit
                     */
                    PropertiesExcluded?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AccountActivityReport"];
                        "application/pdf": components["schemas"]["AccountActivityReport"];
                        "application/csv": string;
                        "application/mt940": string;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AccountActivityReportError400Details"];
                        "application/pdf": components["schemas"]["AccountActivityReportError400Details"];
                        "application/csv": components["schemas"]["AccountActivityReportError400Details"];
                        "application/mt940": components["schemas"]["AccountActivityReportError400Details"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reports/account-activity-paged-report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get paged account activity report
         * @description <p>This endpoint returns an account activity report. The report contains account statements with details regarding all payments booked on your account, and their impact on the balance, within a selected date rage. The report is paginated.</p><p>Only data from current and previous year is available online. Contact Client Services to access older data.</p>
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description Id of the account on which activities have been booked
                     *
                     *     Criteria: Exact match on the Id of the account
                     *
                     * @example d2404f75-e011-4683-9d2d-efd30943c6b8
                     */
                    AccountId: string;
                    /**
                     * @description Minimum activity transaction date
                     *
                     *     FromTransactionDate and ToTransactionDate form a date range
                     *
                     *     Criteria: AccountActivity.TransactionDate must be equal or later
                     *
                     *     Format: ISO 8601 | YYYY-MM-DD
                     *
                     * @example 2022-10-01
                     */
                    FromTransactionDate: string;
                    /**
                     * @description Maximum activity transaction date
                     *
                     *     FromTransactionDate and ToTransactionDate form a date range
                     *
                     *     Criteria: AccountActivity.TransactionDate must be equal or earlier
                     *
                     *     Format: ISO 8601 | YYYY-MM-DD
                     *
                     * @example 2022-10-01
                     */
                    ToTransactionDate: string;
                    /**
                     * @description Number of pages returned.
                     *
                     *     Condition: Valid page number (1 to n)
                     * @example 1
                     */
                    PageNumber: number;
                    /**
                     * @description No. of items returned per page
                     *
                     *     Condition: Valid page number (1 to 5000)
                     * @example 500
                     */
                    PageSize: number;
                    /** @description This Parameter has been deprecated. Please use <i>PropertiesIncluded</i>  instead. */
                    IncludeProperties?: string[];
                    /**
                     * @description Properties of AccountActivity object to include in result
                     *
                     *     Please note: the use of IncludeProperties and PropertiesIncluded are mutual exclusive. - When both are used all IncludeProperties are ignored.
                     *
                     *     If PropertiesIncluded is set, PropertiesExcluded need not be set
                     *
                     *     If neither PropertiesIncluded nor PropertiesExcluded are specified, default value will be PropertiesIncluded
                     *     <ul><li>TransactionDate</li><li>ValueDate</li><li>Credit</li><li>Debit</li><li>Balance</li><li>ReferenceNumber</li><li>Description</li><li>PaymentDetails</li><li>BeneficiaryRemitter1</li><li>BeneficiaryRemitter2</li></ul><p>Extra parameters that can be added to the array, but are not part of the default array:</p><ul><li>StatusReasonCode</li><li>StatusReasonDescription</li><li>Viban (Note: 'Viban' property is available only while requesting this report in CSV format)</li></ul>
                     *     Format: comma (,) separated string
                     *
                     * @example Credit,Debit
                     */
                    PropertiesIncluded?: string;
                    /** @description This Parameter has been deprecated. Please use <i>PropertiesExcluded</i> instead. */
                    ExcludeProperties?: string[];
                    /**
                     * @description Properties of AccountActivity object to exclude from result
                     *
                     *     Please note: the use of ExcludeProperties and PropertiesExcluded are mutual exclusive. - When both are used all ExcludeProperties are ignored.
                     *
                     *     To get all available properties send an empty PropertiesExcluded
                     *
                     *     If PropertiesExcluded is set, PropertiesIncluded need not be set
                     *
                     *     Format: comma (,) separated string
                     *
                     * @example Credit,Debit
                     */
                    PropertiesExcluded?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AccountActivityReport"];
                        "application/csv": string;
                        "application/mt940": string;
                        "application/pdf": components["schemas"]["AccountActivityReport"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AccountActivityReporPagedError00Details"];
                        "application/csv": components["schemas"]["AccountActivityReporPagedError00Details"];
                        "application/mt940": components["schemas"]["AccountActivityReporPagedError00Details"];
                        "application/pdf": components["schemas"]["AccountActivityReporPagedError00Details"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reports/account-balance-report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get account balance report
         * @description <p>This endpoint returns an account balance report. This report contains the latest available balance of all accounts associated with your company.</p>
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AccountBalanceReport"];
                        "application/csv": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reports/reconciliation-report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get reconciliation report
         * @description <p>This endpoint returns a reconciliation report.This report contains relevant information of payments on all of your accounts at the given transaction date, or within a transaction date range. The report can be used to perform financial reconciliation of bookings during the day, or at end-of-day. There is a limitation of 50,000 payments per report for this endpoint. If you need a report for more than 50,000 payments on your account, a paginated endpoint is available.</p><p>Only data from current and previous year is available online. Contact Client Services to access older data.</p>
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description Minimum transaction date
                     *
                     *     FromTransactionDate and ToTransactionDate form a date range
                     *
                     *     Criteria: Reconciliation.ReportDate must be equal or later
                     *
                     *     Format: ISO 8601 | YYYY-MM-DD
                     *
                     * @example 2022-10-01
                     */
                    FromTransactionDate: string;
                    /**
                     * @description Maximum transaction date
                     *
                     *     FromTransactionDate and ToTransactionDate form a date range
                     *
                     *     Criteria: Reconciliation.ReportDate must be equal or earlier
                     *
                     *     Format: ISO 8601 | YYYY-MM-DD
                     *
                     * @example 2022-10-01
                     */
                    ToTransactionDate: string;
                    /** @description This Parameter has been deprecated. Please use <i>PropertiesIncluded</i>  instead. */
                    IncludeProperties?: string[];
                    /**
                     * @description  Properties of Reconciliation object to include in result
                     *
                     *      Please note: the use of IncludeProperties and PropertiesIncluded are mutual exclusive. - When both are used all IncludeProperties are ignored.
                     *
                     *      If PropertiesIncluded is set, PropertiesExcluded need not be set
                     *
                     *     <strong>If neither PropertiesIncluded nor PropertiesExcluded are specified, default value will be PropertiesIncluded =</strong>
                     *
                     *     		PIdChannelUser
                     *
                     *     		PTxnDate
                     *
                     *     		ReportDate
                     *
                     *     		CustomerId
                     *
                     *     		Account
                     *
                     *     		AccountCurrency
                     *
                     *     		DebitAmount
                     *
                     *     		CreditAmount
                     *
                     *     		ValueDate
                     *
                     *     		InstructedAmount
                     *
                     *     		InstructedAmountCurrency
                     *
                     *     		TransactionAmount
                     *
                     *     		TransactionAmountCurrency
                     *
                     *     		ExchangeRate
                     *
                     *     		DebtorBankCode
                     *
                     *     		DebtorAccount
                     *
                     *     		DebtorLine1
                     *
                     *     		DebtorLine2
                     *
                     *     		DebtorLine3
                     *
                     *     		DebtorLine4
                     *
                     *     		BeneficiaryBankCode
                     *
                     *     		BeneficiaryAccount
                     *
                     *     		BeneficiaryLine1
                     *
                     *     		BeneficiaryLine2
                     *
                     *     		BeneficiaryLine3
                     *
                     *     		BeneficiaryLine4
                     *
                     *     		PaymentReferenceNumber
                     *
                     *     		FileReferenceNumber
                     *
                     *     		UserReferenceNumber
                     *
                     *     		PaymentDetails1
                     *
                     *     		PaymentDetails2
                     *
                     *     		PaymentDetails3
                     *
                     *     		PaymentDetails4
                     *
                     *     		CreditDebitIndicator
                     *
                     *     		BankTrnsCodeDomain
                     *
                     *     		BankTrnsCodeFamily
                     *
                     *     <strong>Extra parameters that can be added to the array, but are not part of the default array</strong>
                     *
                     *     		PaymentId
                     *
                     *     		LastChangedTimestamp
                     *
                     *     		BankTrnsCodeSubFamily
                     *
                     *     		CreatedAt
                     *
                     *     		DebtorAgentBankCode
                     *
                     *     		UltimateDebtorLine1
                     *
                     *     		UltimateDebtorLine2
                     *
                     *     		UltimateDebtorLine3
                     *
                     *     		UltimateDebtorLine4
                     *
                     *     		UltimateDebtorAccount
                     *
                     *     		UltimateBeneficiaryAccount
                     *
                     *     		StatusReasonCode
                     *
                     *     		StatusReasonDescription
                     *
                     *     	    AdditionalRemittanceInformation1
                     *
                     *     	    AdditionalRemittanceInformation2
                     *
                     *     	    AdditionalRemittanceInformation3
                     *
                     *     	    AdditionalRemittanceInformation4
                     *
                     *     	    AdditionalRemittanceInformation5
                     *
                     *     	    InstructedChargeBearer
                     *
                     *     	    ChargeBearer
                     *
                     *     	    PaymentRail
                     *
                     *     	    Return
                     *
                     *     	    DirectDebitMandateId
                     *
                     *     	    LatestStatusChangedTimestamp
                     *
                     *     	    ProcessedTimestamp
                     *
                     *     	    ClientOrderId
                     *
                     *     Format: comma (,) separated string
                     *
                     * @example Account,AccountCurrency
                     */
                    PropertiesIncluded?: string;
                    /** @description This Parameter has been deprecated. Please use <i>PropertiesExcluded</i>  instead. */
                    ExcludeProperties?: string[];
                    /**
                     * @description Properties of Reconciliation object to exclude from result
                     *
                     *     Please note: the use of ExcludeProperties and PropertiesExcluded are mutual exclusive. - When both are used all ExcludeProperties are ignored.
                     *
                     *     To get all available properties send an empty PropertiesExcluded list
                     *
                     *     If PropertiesExcluded is set, PropertiesIncluded need not be set
                     *
                     *     Format: comma (,) separated string
                     *
                     * @example Account,AccountCurrency
                     */
                    PropertiesExcluded?: string;
                    /**
                     * @description Id of the account on which activities have been booked
                     *
                     *     Criteria: Exact match on the Id of the account.
                     *
                     *     It is possible to send comma separated list of GUIDs
                     *
                     *     Format: comma (,) separated string
                     *
                     * @example d2404f75-e011-4683-9d2d-efd30943c6b8,B2404f75-F012-4667-9d5g-wsd48743c6j4
                     */
                    AccountId?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ReconciliationReport"];
                        "application/csv": string;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ReconciliationReportError400Details"];
                        "application/csv": components["schemas"]["ReconciliationReportError400Details"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reports/reconciliation-paged-report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get paged reconciliation report
         * @description <p>This endpoint returns a reconciliation report. This report contains relevant information of payments on all of your accounts at the given transaction date. The report can be used to perform financial reconciliation of bookings during the day, or at end-of-day. This is the paginated version of the reconciliation report, and it does not have the limitation of 50,000 payments per report.</p><p>Only data from current and previous year is available online. Contact Client Services to access older data.</p>
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description Transaction date
                     *
                     *     Format: ISO 8601 | YYYY-MM-DD
                     *
                     * @example 2019-11-01
                     */
                    TransactionDate: string;
                    /**
                     * @description Number of pages returned
                     *
                     *     Condition: Valid page number (1 to n)
                     * @example 1
                     */
                    PageNumber: number;
                    /**
                     * @description No. of items returned per page
                     *
                     *     Condition: Valid page number (1 to 5000)
                     * @example 500
                     */
                    PageSize: number;
                    /** @description This Parameter has been deprecated. Please use <i>PropertiesIncluded</i>  instead. */
                    IncludeProperties?: string[];
                    /**
                     * @description  Properties of Reconciliation object to include in result
                     *
                     *      Please note: the use of IncludeProperties and PropertiesIncluded are mutual exclusive. - When both are used all IncludeProperties are ignored.
                     *
                     *      If PropertiesIncluded is set, PropertiesExcluded need not be set
                     *
                     *     <strong>If neither PropertiesIncluded nor PropertiesExcluded are specified, default value will be PropertiesIncluded =</strong>
                     *
                     *     		PIdChannelUser
                     *
                     *     		PTxnDate
                     *
                     *     		ReportDate
                     *
                     *     		CustomerId
                     *
                     *     		Account
                     *
                     *     		AccountCurrency
                     *
                     *     		DebitAmount
                     *
                     *     		CreditAmount
                     *
                     *     		ValueDate
                     *
                     *     		InstructedAmount
                     *
                     *     		InstructedAmountCurrency
                     *
                     *     		TransactionAmount
                     *
                     *     		TransactionAmountCurrency
                     *
                     *     		ExchangeRate
                     *
                     *     		DebtorBankCode
                     *
                     *     		DebtorAccount
                     *
                     *     		DebtorLine1
                     *
                     *     		DebtorLine2
                     *
                     *     		DebtorLine3
                     *
                     *     		DebtorLine4
                     *
                     *     		BeneficiaryBankCode
                     *
                     *     		BeneficiaryAccount
                     *
                     *     		BeneficiaryLine1
                     *
                     *     		BeneficiaryLine2
                     *
                     *     		BeneficiaryLine3
                     *
                     *     		BeneficiaryLine4
                     *
                     *     		PaymentReferenceNumber
                     *
                     *     		FileReferenceNumber
                     *
                     *     		UserReferenceNumber
                     *
                     *     		PaymentDetails1
                     *
                     *     		PaymentDetails2
                     *
                     *     		PaymentDetails3
                     *
                     *     		PaymentDetails4
                     *
                     *     		CreditDebitIndicator
                     *
                     *     		BankTrnsCodeDomain
                     *
                     *     		BankTrnsCodeFamily
                     *
                     *     <strong>Extra parameters that can be added to the array, but are not part of the default array</strong>
                     *
                     *     		PaymentId
                     *
                     *     		LastChangedTimestamp
                     *
                     *     		BankTrnsCodeSubFamily
                     *
                     *     		CreatedAt
                     *
                     *     		DebtorAgentBankCode
                     *
                     *     		UltimateDebtorLine1
                     *
                     *     		UltimateDebtorLine2
                     *
                     *     		UltimateDebtorLine3
                     *
                     *     		UltimateDebtorLine4
                     *
                     *     		UltimateDebtorAccount
                     *
                     *     		UltimateBeneficiaryAccount
                     *
                     *     		StatusReasonCode
                     *
                     *     		StatusReasonDescription
                     *
                     *     	    AdditionalRemittanceInformation1
                     *
                     *     	    AdditionalRemittanceInformation2
                     *
                     *     	    AdditionalRemittanceInformation3
                     *
                     *     	    AdditionalRemittanceInformation4
                     *
                     *     	    AdditionalRemittanceInformation5
                     *
                     *     	    InstructedChargeBearer
                     *
                     *     	    ChargeBearer
                     *
                     *     	    PaymentRail
                     *
                     *     	    Return
                     *
                     *     	    DirectDebitMandateId
                     *
                     *     	    LatestStatusChangedTimestamp
                     *
                     *     	    ProcessedTimestamp
                     *
                     *     	    ClientOrderId
                     *
                     *     Format: comma (,) separated string
                     *
                     * @example Account,AccountCurrency
                     */
                    PropertiesIncluded?: string;
                    /** @description This Parameter has been deprecated. Please use <i>PropertiesExcluded</i>  instead. */
                    ExcludeProperties?: string[];
                    /**
                     * @description Properties of Reconciliation object to exclude from result
                     *
                     *     Please note: the use of ExcludeProperties and PropertiesExcluded are mutual exclusive. - When both are used all ExcludeProperties are ignored.
                     *
                     *     To get all available properties send an empty PropertiesExcluded list
                     *
                     *     If PropertiesExcluded is set, PropertiesIncluded need not be set
                     *
                     *     Format: comma (,) separated string
                     *
                     * @example Account,AccountCurrency
                     */
                    PropertiesExcluded?: string;
                    /**
                     * @description Id of the account on which activities have been booked
                     *
                     *     Criteria: Exact match on the Id of the account.
                     *
                     *     It is possible to send comma separated list of GUIDs
                     *
                     *     Format: comma (,) separated string
                     *
                     * @example d2404f75-e011-4683-9d2d-efd30943c6b8,B2404f75-F012-4667-9d5g-wsd48743c6j4
                     */
                    AccountId?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ReconciliationReport"];
                        "application/csv": string;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ReconciliationReportPagedError400Details"];
                        "application/csv": components["schemas"]["ReconciliationReportPagedError400Details"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reports/intraday-reconciliation-paged-report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get intraday paged reconciliation report
         * @description <p>This endpoint returns a reconciliation report. This report contains relevant information on all your payments at the given transaction date, within a specific time range indicating the time the transactions were created in our system. The report can contain one or all your accounts.</p>The report can be used to perform financial reconciliation of bookings during the day. The report is paginated.</p><p>Only data from current and previous year is available online. Contact Client Services to access older data.</p><blockquote class="callout callout_info" theme="📘"><p class="callout-heading"><span class="callout-icon">📘</span><p>Last available report for transaction date</p></p></blockquote><p>The last available report for transaction date = current calendar date will be at 19.00, following our EOD cycle. Please set the ToTransactionDate parameter to next business day, to obtain payments received or executed after 19.00 CET.</p>
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description Minimum transaction date
                     *
                     *     FromTransactionDate and ToTransactionDate form a date range
                     *
                     *     Criteria: Reconciliation.ReportDate must be equal or later
                     *
                     *     Format: ISO 8601 | YYYY-MM-DD
                     *
                     * @example 2022-10-01
                     */
                    FromTransactionDate: string;
                    /**
                     * @description Maximum transaction date
                     *
                     *     FromTransactionDate and ToTransactionDate form a date range
                     *
                     *     Criteria: Reconciliation.ReportDate must be equal or earlier
                     *
                     *     Format: ISO 8601 | YYYY-MM-DD
                     *
                     * @example 2022-10-01
                     */
                    ToTransactionDate: string;
                    /**
                     * @description Minimum created at date and time
                     *
                     *     FromCreatedAt and ToCreatedAt form a date range
                     *
                     *     Criteria: Reconciliation.ReportDate must be equal or later
                     *
                     *     Format: ISO 8601 | YYYY-MM-DDTHH:MM:SS.0000000Z
                     *
                     * @example 2001-11-01T12:34:00.0000000
                     */
                    FromCreatedAt: string;
                    /**
                     * @description Maximum created at date and time
                     *
                     *     FromCreatedAt and ToCreatedAt form a date range
                     *
                     *     Criteria: Reconciliation.ReportDate must be equal or earlier
                     *
                     *     Format: ISO 8601 | YYYY-MM-DDTHH:MM:SS.0000000Z
                     *
                     * @example 2001-11-01T12:34:00.0000000
                     */
                    ToCreatedAt: string;
                    /**
                     * @description Page number
                     *
                     *     Valid page number (1 to n)
                     * @example 1
                     */
                    PageNumber: number;
                    /**
                     * @description Page size
                     *
                     *     Any positive value may be specified however values above an internal maximum value will be reset to
                     *     the max allowed value (e.g. 5000)
                     * @example 500
                     */
                    PageSize: number;
                    /** @description This Parameter has been deprecated. Please use <i>PropertiesIncluded</i>  instead. */
                    IncludeProperties?: string[];
                    /**
                     * @description  Properties of Reconciliation object to include in result
                     *
                     *      Please note: the use of IncludeProperties and PropertiesIncluded are mutual exclusive. - When both are used all IncludeProperties are ignored.
                     *
                     *      If PropertiesIncluded is set, PropertiesExcluded need not be set
                     *
                     *     <strong>If neither PropertiesIncluded nor PropertiesExcluded are specified, default value will be PropertiesIncluded =</strong>
                     *
                     *     		PIdChannelUser
                     *
                     *     		PTxnDate
                     *
                     *     		ReportDate
                     *
                     *     		CustomerId
                     *
                     *     		Account
                     *
                     *     		AccountCurrency
                     *
                     *     		DebitAmount
                     *
                     *     		CreditAmount
                     *
                     *     		ValueDate
                     *
                     *     		InstructedAmount
                     *
                     *     		InstructedAmountCurrency
                     *
                     *     		TransactionAmount
                     *
                     *     		TransactionAmountCurrency
                     *
                     *     		ExchangeRate
                     *
                     *     		DebtorBankCode
                     *
                     *     		DebtorAccount
                     *
                     *     		DebtorLine1
                     *
                     *     		DebtorLine2
                     *
                     *     		DebtorLine3
                     *
                     *     		DebtorLine4
                     *
                     *     		BeneficiaryBankCode
                     *
                     *     		BeneficiaryAccount
                     *
                     *     		BeneficiaryLine1
                     *
                     *     		BeneficiaryLine2
                     *
                     *     		BeneficiaryLine3
                     *
                     *     		BeneficiaryLine4
                     *
                     *     		PaymentReferenceNumber
                     *
                     *     		FileReferenceNumber
                     *
                     *     		UserReferenceNumber
                     *
                     *     		PaymentDetails1
                     *
                     *     		PaymentDetails2
                     *
                     *     		PaymentDetails3
                     *
                     *     		PaymentDetails4
                     *
                     *     		CreditDebitIndicator
                     *
                     *     		BankTrnsCodeDomain
                     *
                     *     		BankTrnsCodeFamily
                     *
                     *     		CreatedAt
                     *
                     *     <strong>Extra parameters that can be added to the array, but are not part of the default array</strong>
                     *
                     *     		PaymentId
                     *
                     *     		LastChangedTimestamp
                     *
                     *     		BankTrnsCodeSubFamily
                     *
                     *     		DebtorAgentBankCode
                     *
                     *     		UltimateDebtorLine1
                     *
                     *     		UltimateDebtorLine2
                     *
                     *     		UltimateDebtorLine3
                     *
                     *     		UltimateDebtorLine4
                     *
                     *     		UltimateDebtorAccount
                     *
                     *     		UltimateBeneficiaryAccount
                     *
                     *     		StatusReasonCode
                     *
                     *     		StatusReasonDescription
                     *
                     *     	    AdditionalRemittanceInformation1
                     *
                     *     	    AdditionalRemittanceInformation2
                     *
                     *     	    AdditionalRemittanceInformation3
                     *
                     *     	    AdditionalRemittanceInformation4
                     *
                     *     	    AdditionalRemittanceInformation5
                     *
                     *     	    PaymentRail
                     *
                     *     	    Return
                     *
                     *     	    DirectDebitMandateId
                     *
                     *     	    LatestStatusChangedTimestamp
                     *
                     *     	    ProcessedTimestamp
                     *
                     *     	    ClientOrderId
                     *
                     *     Format: comma (,) separated string
                     *
                     * @example Account,AccountCurrency
                     */
                    PropertiesIncluded?: string;
                    /** @description This Parameter has been deprecated. Please use <i>PropertiesExcluded</i>  instead. */
                    ExcludeProperties?: string[];
                    /**
                     * @description Properties of Reconciliation object to exclude from result
                     *
                     *     Please note: the use of ExcludeProperties and PropertiesExcluded are mutual exclusive. - When both are used all ExcludeProperties are ignored.
                     *
                     *     To get all available properties send an empty PropertiesExcluded list
                     *
                     *     If PropertiesExcluded is set, PropertiesIncluded need not be set
                     *
                     *     Format: comma (,) separated string
                     *
                     * @example Account,AccountCurrency
                     */
                    PropertiesExcluded?: string;
                    /**
                     * @description Id of the account on which activities have been booked
                     *
                     *     Criteria: Exact match on the Id of the account.
                     *
                     *     It is possible to send comma separated list of GUIDs
                     *
                     *     Format: comma (,) separated string
                     *
                     * @example d2404f75-e011-4683-9d2d-efd30943c6b8,B2404f75-F012-4667-9d5g-wsd48743c6j4
                     */
                    AccountId?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ReconciliationReport"];
                        "application/csv": string;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                        "application/csv": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["NoResponse"];
                        "application/csv": components["schemas"]["NoResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reports/rejection-report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get rejection report
         * @description <p>This endpoint returns a rejection report. The report provides details of any payment that could not be processed on the selected transaction date. By default, the report contains payments in the following statuses: Missing funding, Pending processing and Rejected.</p><p>If all payments have been correctly processed, this report will be empty.</p><p>Payments in the status Missing funding will be included in the report for 2 days. If the balance of the account is not funded for the amount required to process the payment within this time, the payment(s) will end up in rejections.</p><p>Only data from current and previous year is available online. Contact Client Services to access older data</p>
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description TransactionDate
                     *
                     *     Format: ISO 8601 | YYYY-MM-DD
                     *
                     * @example 2001-11-01
                     */
                    TransactionDate: string;
                    /**
                     * @description Include payments in pending processing
                     * @example true
                     */
                    IncludeReceived?: boolean;
                    /**
                     * @description Include payments with insufficient funds
                     * @example true
                     */
                    IncludeMissingFunds?: boolean;
                    /**
                     * @description Exclude booked payments
                     *     <i>Default value: false</i>
                     * @example true
                     */
                    ExcludeBooked?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RejectionReport"];
                        "application/csv": string;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RejectionReportError400Details"];
                        "application/csv": components["schemas"]["RejectionReportError400Details"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reports/requests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Request report
         * @description <p>Only data from current and previous year is available online. Please contact Client Services to access older data.</p>
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Contains parameters for the requested report */
            requestBody?: {
                content: {
                    "application/json-patch+json": components["schemas"]["RequestForReport"];
                    "application/json": components["schemas"]["RequestForReport"];
                    "text/json": components["schemas"]["RequestForReport"];
                    "application/*+json": components["schemas"]["RequestForReport"];
                };
            };
            responses: {
                /** @description Accepted
                 *     Returned when the request is found and report generation is in progress. See details in headers */
                202: {
                    headers: {
                        /** @description Indicates where to request status (path) */
                        Location?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad request
                 *     Invalid request parameter or header */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ReportRequestError400Details"];
                        "application/json": components["schemas"]["ReportRequestError400Details"];
                        "text/json": components["schemas"]["ReportRequestError400Details"];
                    };
                };
                /** @description Forbidden
                 *     Authorization error */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NoResponse"];
                        "application/json": components["schemas"]["NoResponse"];
                        "text/json": components["schemas"]["NoResponse"];
                    };
                };
                /** @description Not Found
                 *     ReportRequest id not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NoResponse"];
                        "application/json": components["schemas"]["NoResponse"];
                        "text/json": components["schemas"]["NoResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reports/requests/account-activity-report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Account activity report */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Contains parameters for the requested report */
            requestBody: {
                content: {
                    "application/json-patch+json": components["schemas"]["AccountActivityReportRequestInput"];
                    "application/json": components["schemas"]["AccountActivityReportRequestInput"];
                    "text/json": components["schemas"]["AccountActivityReportRequestInput"];
                    "application/*+json": components["schemas"]["AccountActivityReportRequestInput"];
                };
            };
            responses: {
                /** @description Accepted
                 *     Returned when the request is found and report generation is in progress. See details in headers */
                202: {
                    headers: {
                        /** @description Indicates where to request status (path) */
                        Location?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad request
                 *     Invalid request parameter or header */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ReportRequestError400Details"];
                        "application/json": components["schemas"]["ReportRequestError400Details"];
                        "text/json": components["schemas"]["ReportRequestError400Details"];
                    };
                };
                /** @description Forbidden
                 *     Authorization error */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NoResponse"];
                        "application/json": components["schemas"]["NoResponse"];
                        "text/json": components["schemas"]["NoResponse"];
                    };
                };
                /** @description Not Found
                 *     ReportRequest id not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NoResponse"];
                        "application/json": components["schemas"]["NoResponse"];
                        "text/json": components["schemas"]["NoResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reports/requests/account-balance-report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Account balance report */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Contains parameters for the requested report */
            requestBody: {
                content: {
                    "application/json-patch+json": components["schemas"]["AccountBalanceReportRequestInput"];
                    "application/json": components["schemas"]["AccountBalanceReportRequestInput"];
                    "text/json": components["schemas"]["AccountBalanceReportRequestInput"];
                    "application/*+json": components["schemas"]["AccountBalanceReportRequestInput"];
                };
            };
            responses: {
                /** @description Accepted
                 *     Returned when the request is found and report generation is in progress. See details in headers */
                202: {
                    headers: {
                        /** @description Indicates where to request status (path) */
                        Location?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad request
                 *     Invalid request parameter or header */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ReportRequestError400Details"];
                        "application/json": components["schemas"]["ReportRequestError400Details"];
                        "text/json": components["schemas"]["ReportRequestError400Details"];
                    };
                };
                /** @description Forbidden
                 *     Authorization error */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NoResponse"];
                        "application/json": components["schemas"]["NoResponse"];
                        "text/json": components["schemas"]["NoResponse"];
                    };
                };
                /** @description Not Found
                 *     ReportRequest id not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NoResponse"];
                        "application/json": components["schemas"]["NoResponse"];
                        "text/json": components["schemas"]["NoResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reports/requests/bank-statement-report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Bank statement report */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Contains parameters for the requested report */
            requestBody: {
                content: {
                    "application/json-patch+json": components["schemas"]["BankStatementReportRequestInput"];
                    "application/json": components["schemas"]["BankStatementReportRequestInput"];
                    "text/json": components["schemas"]["BankStatementReportRequestInput"];
                    "application/*+json": components["schemas"]["BankStatementReportRequestInput"];
                };
            };
            responses: {
                /** @description Accepted
                 *     Returned when the request is found and report generation is in progress. See details in headers */
                202: {
                    headers: {
                        /** @description Indicates where to request status (path) */
                        Location?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad request
                 *     Invalid request parameter or header */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ReportRequestError400Details"];
                        "application/json": components["schemas"]["ReportRequestError400Details"];
                        "text/json": components["schemas"]["ReportRequestError400Details"];
                    };
                };
                /** @description Forbidden
                 *     Authorization error */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NoResponse"];
                        "application/json": components["schemas"]["NoResponse"];
                        "text/json": components["schemas"]["NoResponse"];
                    };
                };
                /** @description Not Found
                 *     ReportRequest id not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NoResponse"];
                        "application/json": components["schemas"]["NoResponse"];
                        "text/json": components["schemas"]["NoResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reports/requests/bank-to-customer-report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Bank to customer report */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Contains parameters for the requested report */
            requestBody: {
                content: {
                    "application/json-patch+json": components["schemas"]["BankToCustomerReportRequestInput"];
                    "application/json": components["schemas"]["BankToCustomerReportRequestInput"];
                    "text/json": components["schemas"]["BankToCustomerReportRequestInput"];
                    "application/*+json": components["schemas"]["BankToCustomerReportRequestInput"];
                };
            };
            responses: {
                /** @description Accepted
                 *     Returned when the request is found and report generation is in progress. See details in headers */
                202: {
                    headers: {
                        /** @description Indicates where to request status (path) */
                        Location?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad request
                 *     Invalid request parameter or header */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ReportRequestError400Details"];
                        "application/json": components["schemas"]["ReportRequestError400Details"];
                        "text/json": components["schemas"]["ReportRequestError400Details"];
                    };
                };
                /** @description Forbidden
                 *     Authorization error */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NoResponse"];
                        "application/json": components["schemas"]["NoResponse"];
                        "text/json": components["schemas"]["NoResponse"];
                    };
                };
                /** @description Not Found
                 *     ReportRequest id not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NoResponse"];
                        "application/json": components["schemas"]["NoResponse"];
                        "text/json": components["schemas"]["NoResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reports/requests/company-account-balance-report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Company account balance report */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Contains parameters for the requested report */
            requestBody: {
                content: {
                    "application/json-patch+json": components["schemas"]["CompanyAccountBalanceReportRequestInput"];
                    "application/json": components["schemas"]["CompanyAccountBalanceReportRequestInput"];
                    "text/json": components["schemas"]["CompanyAccountBalanceReportRequestInput"];
                    "application/*+json": components["schemas"]["CompanyAccountBalanceReportRequestInput"];
                };
            };
            responses: {
                /** @description Accepted
                 *     Returned when the request is found and report generation is in progress. See details in headers */
                202: {
                    headers: {
                        /** @description Indicates where to request status (path) */
                        Location?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad request
                 *     Invalid request parameter or header */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ReportRequestError400Details"];
                        "application/json": components["schemas"]["ReportRequestError400Details"];
                        "text/json": components["schemas"]["ReportRequestError400Details"];
                    };
                };
                /** @description Forbidden
                 *     Authorization error */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NoResponse"];
                        "application/json": components["schemas"]["NoResponse"];
                        "text/json": components["schemas"]["NoResponse"];
                    };
                };
                /** @description Not Found
                 *     ReportRequest id not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NoResponse"];
                        "application/json": components["schemas"]["NoResponse"];
                        "text/json": components["schemas"]["NoResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reports/requests/reconciliation-report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reconciliation report */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Contains parameters for the requested report */
            requestBody: {
                content: {
                    "application/json-patch+json": components["schemas"]["ReconciliationReportRequestInput"];
                    "application/json": components["schemas"]["ReconciliationReportRequestInput"];
                    "text/json": components["schemas"]["ReconciliationReportRequestInput"];
                    "application/*+json": components["schemas"]["ReconciliationReportRequestInput"];
                };
            };
            responses: {
                /** @description Accepted
                 *     Returned when the request is found and report generation is in progress. See details in headers */
                202: {
                    headers: {
                        /** @description Indicates where to request status (path) */
                        Location?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad request
                 *     Invalid request parameter or header */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ReportRequestError400Details"];
                        "application/json": components["schemas"]["ReportRequestError400Details"];
                        "text/json": components["schemas"]["ReportRequestError400Details"];
                    };
                };
                /** @description Forbidden
                 *     Authorization error */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NoResponse"];
                        "application/json": components["schemas"]["NoResponse"];
                        "text/json": components["schemas"]["NoResponse"];
                    };
                };
                /** @description Not Found
                 *     ReportRequest id not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NoResponse"];
                        "application/json": components["schemas"]["NoResponse"];
                        "text/json": components["schemas"]["NoResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reports/requests/rejection-report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Rejection report */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Contains parameters for the requested report */
            requestBody: {
                content: {
                    "application/json-patch+json": components["schemas"]["RejectionReportRequestInput"];
                    "application/json": components["schemas"]["RejectionReportRequestInput"];
                    "text/json": components["schemas"]["RejectionReportRequestInput"];
                    "application/*+json": components["schemas"]["RejectionReportRequestInput"];
                };
            };
            responses: {
                /** @description Accepted
                 *     Returned when the request is found and report generation is in progress. See details in headers */
                202: {
                    headers: {
                        /** @description Indicates where to request status (path) */
                        Location?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad request
                 *     Invalid request parameter or header */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ReportRequestError400Details"];
                        "application/json": components["schemas"]["ReportRequestError400Details"];
                        "text/json": components["schemas"]["ReportRequestError400Details"];
                    };
                };
                /** @description Forbidden
                 *     Authorization error */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NoResponse"];
                        "application/json": components["schemas"]["NoResponse"];
                        "text/json": components["schemas"]["NoResponse"];
                    };
                };
                /** @description Not Found
                 *     ReportRequest id not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NoResponse"];
                        "application/json": components["schemas"]["NoResponse"];
                        "text/json": components["schemas"]["NoResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reports/requests/{request-id}/get-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get status of requested report */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description request-id returned from method initiating the report generation
                     * @example 38d898f3-baa0-4793-89ba-890086db6477
                     */
                    "request-id": string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Accepted
                 *     Returned when the request is found and report generation is in progress. See details in headers */
                202: {
                    headers: {
                        /** @description Indicates where to request status (path) */
                        Location?: string;
                        /** @description Indicates how long to wait before making a new request to this method. Value is in seconds */
                        "Retry-After"?: number;
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NoResponse"];
                        "application/json": components["schemas"]["NoResponse"];
                        "text/json": components["schemas"]["NoResponse"];
                    };
                };
                /** @description Found
                 *     Returned when the report generation request has been completed. See details in header */
                302: {
                    headers: {
                        /** @description Indicates where to download report (path) */
                        Location?: string;
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NoResponse"];
                        "application/json": components["schemas"]["NoResponse"];
                        "text/json": components["schemas"]["NoResponse"];
                    };
                };
                /** @description Bad request
                 *     Invalid request parameter or header */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NoResponse"];
                        "application/json": components["schemas"]["NoResponse"];
                        "text/json": components["schemas"]["NoResponse"];
                    };
                };
                /** @description Forbidden
                 *     Authorization error */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NoResponse"];
                        "application/json": components["schemas"]["NoResponse"];
                        "text/json": components["schemas"]["NoResponse"];
                    };
                };
                /** @description Not Found
                 *     Request-id not found or an error occured during report generation */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NoResponse"];
                        "application/json": components["schemas"]["NoResponse"];
                        "text/json": components["schemas"]["NoResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reports/requests/requested-reports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of requested reports */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description No. of items returned per page.
                     *
                     *     Condition: Valid page number(1 to 5000)
                     *
                     * @example 25
                     */
                    PageSize?: number;
                    /**
                     * @description Number of pages returned.
                     *
                     *     Condition: Valid page number(1 to n)
                     * @example 1
                     */
                    PageNumber?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["RequestedReportPagedResponse"];
                        "application/json": components["schemas"]["RequestedReportPagedResponse"];
                        "text/json": components["schemas"]["RequestedReportPagedResponse"];
                    };
                };
                /** @description Bad request
                 *     Invalid request parameter or header */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["PagedRequestedReportsError400Details"];
                        "application/json": components["schemas"]["PagedRequestedReportsError400Details"];
                        "text/json": components["schemas"]["PagedRequestedReportsError400Details"];
                    };
                };
                /** @description Forbidden
                 *     Authorization error */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NoResponse"];
                        "application/json": components["schemas"]["NoResponse"];
                        "text/json": components["schemas"]["NoResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/reports/requests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Request report */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Contains parameters for the requested report */
            requestBody?: {
                content: {
                    "application/json-patch+json": components["schemas"]["RequestForReport"];
                    "application/json": components["schemas"]["RequestForReport"];
                    "text/json": components["schemas"]["RequestForReport"];
                    "application/*+json": components["schemas"]["RequestForReport"];
                };
            };
            responses: {
                /** @description Accepted
                 *     Returned when the request is found and report generation is in progress. See details in headers */
                202: {
                    headers: {
                        /** @description Indicates where to request status (path) */
                        Location?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad request
                 *     Invalid request parameter or header */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ReportOnRequestCombinedBadRequestResponse"];
                    };
                };
                /** @description Forbidden
                 *     Authorization error */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found
                 *     ReportRequest id not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": string;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/reports/requests/account-activity-report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Account activity report */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Contains parameters for the requested report */
            requestBody: {
                content: {
                    "application/json-patch+json": components["schemas"]["AccountActivityReportRequestInput"];
                    "application/json": components["schemas"]["AccountActivityReportRequestInput"];
                    "text/json": components["schemas"]["AccountActivityReportRequestInput"];
                    "application/*+json": components["schemas"]["AccountActivityReportRequestInput"];
                };
            };
            responses: {
                /** @description Accepted
                 *     Returned when the request is found and report generation is in progress. See details in headers */
                202: {
                    headers: {
                        /** @description Indicates where to request status (path) */
                        Location?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad request
                 *     Invalid request parameter or header */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AccountActivityBadRequestResponse"];
                    };
                };
                /** @description Forbidden
                 *     Authorization error */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found
                 *     ReportRequest id not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": string;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/reports/requests/account-balance-report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Account balance report */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Contains parameters for the requested report */
            requestBody: {
                content: {
                    "application/json-patch+json": components["schemas"]["AccountBalanceReportRequestInput"];
                    "application/json": components["schemas"]["AccountBalanceReportRequestInput"];
                    "text/json": components["schemas"]["AccountBalanceReportRequestInput"];
                    "application/*+json": components["schemas"]["AccountBalanceReportRequestInput"];
                };
            };
            responses: {
                /** @description Accepted
                 *     Returned when the request is found and report generation is in progress. See details in headers */
                202: {
                    headers: {
                        /** @description Indicates where to request status (path) */
                        Location?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad request
                 *     Invalid request parameter or header */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AccountBalanceBadRequestResponse"];
                    };
                };
                /** @description Forbidden
                 *     Authorization error */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found
                 *     ReportRequest id not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": string;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/reports/requests/bank-statement-report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Bank statement report */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Contains parameters for the requested report */
            requestBody: {
                content: {
                    "application/json-patch+json": components["schemas"]["BankStatementReportRequestInput"];
                    "application/json": components["schemas"]["BankStatementReportRequestInput"];
                    "text/json": components["schemas"]["BankStatementReportRequestInput"];
                    "application/*+json": components["schemas"]["BankStatementReportRequestInput"];
                };
            };
            responses: {
                /** @description Accepted
                 *     Returned when the request is found and report generation is in progress. See details in headers */
                202: {
                    headers: {
                        /** @description Indicates where to request status (path) */
                        Location?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad request
                 *     Invalid request parameter or header */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankStatementBadRequestResponse"];
                    };
                };
                /** @description Forbidden
                 *     Authorization error */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found
                 *     ReportRequest id not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": string;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/reports/requests/bank-to-customer-report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Bank to customer report */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Contains parameters for the requested report */
            requestBody: {
                content: {
                    "application/json-patch+json": components["schemas"]["BankToCustomerReportRequestInput"];
                    "application/json": components["schemas"]["BankToCustomerReportRequestInput"];
                    "text/json": components["schemas"]["BankToCustomerReportRequestInput"];
                    "application/*+json": components["schemas"]["BankToCustomerReportRequestInput"];
                };
            };
            responses: {
                /** @description Accepted
                 *     Returned when the request is found and report generation is in progress. See details in headers */
                202: {
                    headers: {
                        /** @description Indicates where to request status (path) */
                        Location?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad request
                 *     Invalid request parameter or header */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankToCustomerBadRequestResponse"];
                    };
                };
                /** @description Forbidden
                 *     Authorization error */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found
                 *     ReportRequest id not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": string;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/reports/requests/company-account-balance-report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Company account balance report */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Contains parameters for the requested report */
            requestBody: {
                content: {
                    "application/json-patch+json": components["schemas"]["CompanyAccountBalanceReportRequestInput"];
                    "application/json": components["schemas"]["CompanyAccountBalanceReportRequestInput"];
                    "text/json": components["schemas"]["CompanyAccountBalanceReportRequestInput"];
                    "application/*+json": components["schemas"]["CompanyAccountBalanceReportRequestInput"];
                };
            };
            responses: {
                /** @description Accepted
                 *     Returned when the request is found and report generation is in progress. See details in headers */
                202: {
                    headers: {
                        /** @description Indicates where to request status (path) */
                        Location?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad request
                 *     Invalid request parameter or header */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CompanyAccountBalanceBadRequestResponse"];
                    };
                };
                /** @description Forbidden
                 *     Authorization error */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found
                 *     ReportRequest id not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": string;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/reports/requests/reconciliation-report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reconciliation report */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Contains parameters for the requested report */
            requestBody: {
                content: {
                    "application/json-patch+json": components["schemas"]["ReconciliationReportRequestInput"];
                    "application/json": components["schemas"]["ReconciliationReportRequestInput"];
                    "text/json": components["schemas"]["ReconciliationReportRequestInput"];
                    "application/*+json": components["schemas"]["ReconciliationReportRequestInput"];
                };
            };
            responses: {
                /** @description Accepted
                 *     Returned when the request is found and report generation is in progress. See details in headers */
                202: {
                    headers: {
                        /** @description Indicates where to request status (path) */
                        Location?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad request
                 *     Invalid request parameter or header */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ReconciliationBadRequestResponse"];
                    };
                };
                /** @description Forbidden
                 *     Authorization error */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found
                 *     ReportRequest id not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": string;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/reports/requests/rejection-report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Rejection report */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Contains parameters for the requested report */
            requestBody: {
                content: {
                    "application/json-patch+json": components["schemas"]["RejectionReportRequestInput"];
                    "application/json": components["schemas"]["RejectionReportRequestInput"];
                    "text/json": components["schemas"]["RejectionReportRequestInput"];
                    "application/*+json": components["schemas"]["RejectionReportRequestInput"];
                };
            };
            responses: {
                /** @description Accepted
                 *     Returned when the request is found and report generation is in progress. See details in headers */
                202: {
                    headers: {
                        /** @description Indicates where to request status (path) */
                        Location?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad request
                 *     Invalid request parameter or header */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RejectionBadRequestResponse"];
                    };
                };
                /** @description Forbidden
                 *     Authorization error */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found
                 *     ReportRequest id not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": string;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/reports/requests/{request-id}/get-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get status of requested report */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description request-id returned from method initiating the report generation
                     * @example 38d898f3-baa0-4793-89ba-890086db6477
                     */
                    "request-id": string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Accepted
                 *     Returned when the request is found and report generation is in progress. See details in headers */
                202: {
                    headers: {
                        /** @description Indicates where to request status (path) */
                        Location?: string;
                        /** @description Indicates how long to wait before making a new request to this method. Value is in seconds */
                        "Retry-After"?: number;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Found
                 *     Returned when the report generation request has been completed. See details in header */
                302: {
                    headers: {
                        /** @description Indicates where to download report (path) */
                        Location?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad request
                 *     Invalid request parameter or header */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GenericBadRequestResponse"];
                    };
                };
                /** @description Forbidden
                 *     Authorization error */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found
                 *     Request-id not found or an error occured during report generation */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/reports/requests/requested-reports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of requested reports */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description No. of items returned per page.
                     *
                     *     Condition: Valid page number(1 to 5000)
                     *
                     * @example 25
                     */
                    PageSize?: number;
                    /**
                     * @description Number of pages returned.
                     *
                     *     Condition: Valid page number(1 to n)
                     * @example 1
                     */
                    PageNumber?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["RequestedReportPagedResponse"];
                        "application/json": components["schemas"]["RequestedReportPagedResponse"];
                        "text/json": components["schemas"]["RequestedReportPagedResponse"];
                    };
                };
                /** @description Bad request
                 *     Invalid request parameter or header */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GenericBadRequestResponse"];
                    };
                };
                /** @description Forbidden
                 *     Authorization error */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/reports/requests/bank-to-customer-report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Bank to customer report */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Contains parameters for the requested report */
            requestBody: {
                content: {
                    "application/json-patch+json": components["schemas"]["BankToCustomerReportRequestInput"];
                    "application/json": components["schemas"]["BankToCustomerReportRequestInput"];
                    "text/json": components["schemas"]["BankToCustomerReportRequestInput"];
                    "application/*+json": components["schemas"]["BankToCustomerReportRequestInput"];
                };
            };
            responses: {
                /** @description Accepted
                 *     Returned when the request is found and report generation is in progress. See details in headers */
                202: {
                    headers: {
                        /** @description Indicates where to request status (path) */
                        Location?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad request
                 *     Invalid request parameter or header */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankToCustomerBadRequestResponse"];
                    };
                };
                /** @description Forbidden
                 *     Authorization error */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found
                 *     ReportRequest id not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": string;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reports/iso20022/bank-to-customer-end-of-day": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get bank to customer statement
         * @description <p>The bank to customer statement is structured as a camt.053, and is used for end of day reconciliation. It adheres to the ISO20022 standard and will give an overview of all transactions for a given time period in an XML format.</p>
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description The date for which the report will be generated.
                     *
                     *     Format : ISO 8601 | YYYY-MM-DD
                     *
                     * @example 2020-11-01
                     */
                    TransactionDate: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/xml": components["schemas"]["Document"];
                        "text/plain": components["schemas"]["Document"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/xml": components["schemas"]["BankToCustomerEndOfDayReportError400Details"];
                        "text/plain": components["schemas"]["BankToCustomerEndOfDayReportError400Details"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/xml": components["schemas"]["NoResponse"];
                        "text/plain": components["schemas"]["NoResponse"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/xml": components["schemas"]["Error404Root"];
                        "text/plain": components["schemas"]["Error404Root"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/reports/iso20022/bank-to-customer-end-of-day": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get bank to customer statement
         * @description <p>The bank to customer statement is structured as a camt.053, and is used for end of day reconciliation. It adheres to the ISO20022 standard and will give an overview of all transactions for a given time period in an XML format.</p>
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description The date for which the report will be generated.
                     *
                     *     Format : ISO 8601 | YYYY-MM-DD
                     *
                     * @example 2020-11-01
                     */
                    TransactionDate: string;
                    /**
                     * @description Optional comma seperated listof account ids. If any is specified the report will exclusively include data
                     *     for only those accounts.
                     *
                     *     Format : comma separated list of GUID
                     * @example 0a0ed7aa-c87b-4ea5-844b-9714c1cf8952,cf2f1c1d-7df1-451d-b771-4daf288abeb0
                     */
                    AccountIds?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/xml": components["schemas"]["Document"];
                        "text/plain": components["schemas"]["Document"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/xml": components["schemas"]["BankToCustomerEndOfDayReportError400Details"];
                        "text/plain": components["schemas"]["BankToCustomerEndOfDayReportError400Details"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/xml": components["schemas"]["NoResponse"];
                        "text/plain": components["schemas"]["NoResponse"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/xml": components["schemas"]["Error404Root"];
                        "text/plain": components["schemas"]["Error404Root"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reports/download-report/{reportId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download generated report
         * @description <p>With this endpoint the requested report can be downloaded. This is done by specifying the request-id received from the endpoint: GET /api/v1/reports/requests/{request-id}/get-status.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Id of the report the user would like to download.
                     * @example 38d898f3-baa0-4793-89ba-890086db6477
                     */
                    reportId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success
                 *     Report is downloaded */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad request
                 *     Invalid request, please try again */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden
                 *     Authorization error */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found
                 *     Report ID not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Account: {
            /**
             * Format: uuid
             * @description Account (technical) identifier
             */
            id?: string;
            /** @description Account number */
            accountNumber?: string | null;
            /** @description Account IBAN */
            accountIban?: string | null;
            /** @description Account Currency */
            currency?: string | null;
            /** @description Account Description */
            accountDescription?: string | null;
            /**
             * Format: date
             * @description Date representation
             *
             *     Format: ISO 8601 | YYYY-MM-DD
             *
             *     Example: 2001-01-28
             */
            openingDate?: string | null;
            /** @description Account BranchCode */
            branchCode?: string | null;
            /**
             * Format: uuid
             * @description Identifier (technical) of the Company owning the Account
             */
            companyId?: string;
            /** @description Company Number of the Company owning the Account */
            companyNumber?: string | null;
            /** @description Name of the Company owning the Account */
            companyName?: string | null;
        };
        AccountActivityBadRequestResponse: {
            errors?: components["schemas"]["ISwaggerUseError"][] | null;
        };
        AccountActivityReporPagedError00Details: {
            readonly type?: string | null;
            title?: string | null;
            /** Format: int32 */
            status?: number | null;
            readonly extensions?: {
                [key: string]: unknown;
            } | null;
            readonly errors?: {
                [key: string]: string[];
            } | null;
        };
        AccountActivityReport: {
            activities?: components["schemas"]["Transaction"][] | null;
            auxiliaryInformation?: components["schemas"]["AuxiliaryInformation"];
        };
        AccountActivityReportError400Details: {
            readonly type?: string | null;
            title?: string | null;
            /** Format: int32 */
            status?: number | null;
            readonly extensions?: {
                [key: string]: unknown;
            } | null;
            readonly errors?: {
                [key: string]: string[];
            } | null;
        };
        /** @description Account activity will return information on all processed payments in one or more of your bank accounts and their impact on the balance for a given transaction date. */
        AccountActivityReportRequest: {
            /**
             * Format: uuid
             * @description Id of the account on which activities have been booked
             *
             *     Criteria: Exact match on the Id of the account
             *
             * @example 78343563-F427-4F4F-09E1-2863145BE9AD
             */
            accountId?: string;
            /**
             * Format: date-time
             * @description Minimum transaction date
             *
             *     FromTransactionDate and ToTransactionDate form a date range
             *
             *     Format: ISO 8601 | YYYY-MM-DD
             *
             * @example 2021-11-01
             */
            fromTransactionDate?: string;
            /**
             * Format: date-time
             * @description Maximum transaction date
             *
             *     FromTransactionDate and ToTransactionDate form a date range
             *
             *     Format: ISO 8601 | YYYY-MM-DD
             *
             * @example 2021-11-02
             */
            toTransactionDate?: string;
            /** @description Properties of AccountActivity object to include in result
             *
             *     If IncludeProperties is set, ExcludeProperties need not be set
             *
             *     If neither PropertiesIncluded nor PropertiesExcluded are specified, default value will be PropertiesIncluded
             *     <ul><li>TransactionDate</li><li>ValueDate</li><li>Credit</li><li>Debit</li><li>Balance</li><li>ReferenceNumber</li><li>Description</li><li>PaymentDetails</li><li>BeneficiaryRemitter1</li><li>BeneficiaryRemitter2</li></ul><p>Extra parameters that can be added to the array, but are not part of the default array:</p><ul><li>StatusReasonCode</li><li>StatusReasonDescription</li><li>Viban (Note: 'Viban' property is available only while requesting this report in CSV format)</li></ul> */
            includeProperties?: string[] | null;
            /** @description Properties of AccountActivity object to exclude from result
             *
             *     To get all available properties send an empty ExcludeProperties list
             *     If ExcludeProperties is set, IncludeProperties need not be set
             *      */
            excludeProperties?: string[] | null;
        };
        /** @description Account activity will return information on all processed payments in one or more of your bank accounts and
         *     their impact on the balance for a given transaction date. */
        AccountActivityReportRequestInput: {
            /**
             * @description Format type the report should be generated as
             *
             *     Available options:
             *     * json
             *     * csv
             *     * mt940
             * @example json
             */
            reportFormatType: string;
            /**
             * Format: uuid
             * @description Id of the account on which activities have been booked
             *
             *     Criteria: Exact match on the Id of the account
             *
             * @example 78343563-F427-4F4F-09E1-2863145BE9AD
             */
            accountId: string;
            /**
             * Format: date-time
             * @description Minimum transaction date
             *
             *     FromTransactionDate and ToTransactionDate form a date range
             *
             *     Format: ISO 8601 | YYYY-MM-DD
             *
             * @example 2021-11-01
             */
            fromTransactionDate: string;
            /**
             * Format: date-time
             * @description Maximum transaction date
             *
             *     FromTransactionDate and ToTransactionDate form a date range
             *
             *     Format: ISO 8601 | YYYY-MM-DD
             *
             * @example 2021-11-02
             */
            toTransactionDate: string;
            /** @description Properties of AccountActivity object to include in result
             *
             *     If IncludeProperties is set, ExcludeProperties need not be set
             *
             *     If neither PropertiesIncluded nor PropertiesExcluded are specified, default value will be PropertiesIncluded
             *     <ul><li>TransactionDate</li><li>ValueDate</li><li>Credit</li><li>Debit</li><li>Balance</li><li>ReferenceNumber</li><li>Description</li><li>PaymentDetails</li><li>BeneficiaryRemitter1</li><li>BeneficiaryRemitter2</li></ul><p>Extra parameters that can be added to the array, but are not part of the default array:</p><ul><li>StatusReasonCode</li><li>StatusReasonDescription</li><li>Viban (Note: 'Viban' property is available only while requesting this report in CSV format)</li></ul> */
            includeProperties?: string[] | null;
            /** @description Properties of AccountActivity object to exclude from result
             *
             *     To get all available properties send an empty ExcludeProperties list
             *     If ExcludeProperties is set, IncludeProperties need not be set
             *      */
            excludeProperties?: string[] | null;
            /**
             * @description Optional field for custom information
             * @example My custom report name
             */
            name?: string | null;
            reportVersion?: components["schemas"]["ReportVersion"];
        };
        AccountBalance: {
            account?: string | null;
            /** Format: double */
            balance?: number;
            /** @description Currency representation
             *
             *     Format: Alpha 3-5 character ISO 20022
             *
             *     Example: EUR */
            currency?: string | null;
            channelUserId?: string | null;
            /** Format: date-time */
            transactionDate?: string;
            /**
             * Format: date
             * @description Date representation
             *
             *     Format: ISO 8601 | YYYY-MM-DD
             *
             *     Example: 2001-01-28
             */
            reportDate?: string | null;
            customerId?: string | null;
            /** Format: double */
            availableBalance?: number | null;
        };
        AccountBalanceBadRequestResponse: {
            errors?: components["schemas"]["ISwaggerUseError"][] | null;
        };
        AccountBalanceReport: {
            accountBalances?: components["schemas"]["AccountBalance"][] | null;
        };
        /** @description Account Balance report returns the balances of all your bank accounts at the exact time report is requested. */
        AccountBalanceReportRequest: Record<string, never>;
        /** @description Account Balance report returns the balances of all your bank accounts at the exact time report is requested. */
        AccountBalanceReportRequestInput: {
            /**
             * @description Format type the report should be generated as
             *
             *     Available options:
             *     * json
             *     * csv
             * @example json
             */
            reportFormatType: string;
            /**
             * @description Optional field for custom information
             * @example My custom report name
             */
            name?: string | null;
            reportVersion?: components["schemas"]["ReportVersion"];
        };
        AccountIdentification4Choice: {
            item?: unknown;
        };
        AccountInterest2: {
            tp?: components["schemas"]["InterestType1Choice"];
            rate?: components["schemas"]["Rate3"][] | null;
            frToDt?: components["schemas"]["DateTimePeriodDetails"];
            rsn?: string | null;
        };
        AccountStatement2: {
            id?: string | null;
            /** Format: double */
            elctrncSeqNb?: number;
            elctrncSeqNbSpecified?: boolean;
            /** Format: double */
            lglSeqNb?: number;
            lglSeqNbSpecified?: boolean;
            /** Format: date-time */
            creDtTm?: string;
            frToDt?: components["schemas"]["DateTimePeriodDetails"];
            cpyDplctInd?: components["schemas"]["CopyDuplicate1Code"];
            cpyDplctIndSpecified?: boolean;
            rptgSrc?: components["schemas"]["ReportingSource1Choice"];
            acct?: components["schemas"]["CashAccount20"];
            rltdAcct?: components["schemas"]["CashAccount16"];
            intrst?: components["schemas"]["AccountInterest2"][] | null;
            bal?: components["schemas"]["CashBalance3"][] | null;
            txsSummry?: components["schemas"]["TotalTransactions2"];
            ntry?: components["schemas"]["ReportEntry2"][] | null;
            addtlStmtInf?: string | null;
        };
        ActiveOrHistoricCurrencyAndAmount: {
            ccy?: string | null;
            /** Format: double */
            value?: number;
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        AddressType2Code: 0 | 1 | 2 | 3 | 4 | 5;
        AmountAndCurrencyExchange3: {
            instdAmt?: components["schemas"]["AmountAndCurrencyExchangeDetails3"];
            txAmt?: components["schemas"]["AmountAndCurrencyExchangeDetails3"];
            cntrValAmt?: components["schemas"]["AmountAndCurrencyExchangeDetails3"];
            anncdPstngAmt?: components["schemas"]["AmountAndCurrencyExchangeDetails3"];
            prtryAmt?: components["schemas"]["AmountAndCurrencyExchangeDetails4"][] | null;
        };
        AmountAndCurrencyExchangeDetails3: {
            amt?: components["schemas"]["ActiveOrHistoricCurrencyAndAmount"];
            ccyXchg?: components["schemas"]["CurrencyExchange5"];
        };
        AmountAndCurrencyExchangeDetails4: {
            tp?: string | null;
            amt?: components["schemas"]["ActiveOrHistoricCurrencyAndAmount"];
            ccyXchg?: components["schemas"]["CurrencyExchange5"];
        };
        AuxiliaryInformation: {
            readonly customerName?: string | null;
            readonly accountNumber?: string | null;
            readonly accountCurrency?: string | null;
            readonly reportDate?: string | null;
            readonly accountType?: string | null;
        };
        BalanceSubType1Choice: {
            item?: string | null;
            itemElementName?: components["schemas"]["ItemChoiceType7"];
        };
        BalanceType12: {
            cdOrPrtry?: components["schemas"]["BalanceType5Choice"];
            subTp?: components["schemas"]["BalanceSubType1Choice"];
        };
        BalanceType5Choice: {
            item?: unknown;
        };
        BankStatementBadRequestResponse: {
            errors?: components["schemas"]["ISwaggerUseError"][] | null;
        };
        /** @description Bank Statement will return information on all processed payments in one of your bank accounts and their impact on the balance for a given value date. */
        BankStatementReportRequest: {
            /**
             * Format: uuid
             * @description Id of the account on which activities have been booked
             *
             *     Criteria: Exact match on the Id of the account
             *
             * @example 78343563-F427-4F4F-09E1-2863145BE9AD
             */
            accountId?: string;
            /**
             * Format: date-time
             * @description Minimum value date
             *
             *     FromValueDate and ToValueDate form a date range
             *
             *     Format: ISO 8601 | YYYY-MM-DD
             *
             * @example 2021-11-01
             */
            fromValueDate?: string;
            /**
             * Format: date-time
             * @description Maximum value date
             *
             *     FromValueDate and ToValueDate form a date range
             *
             *     Format: ISO 8601 | YYYY-MM-DD
             *
             * @example 2021-11-02
             */
            toValueDate?: string;
        };
        /** @description Bank Statement will return information on all processed payments in one of your bank accounts and their impact
         *     on the balance for a given value date. */
        BankStatementReportRequestInput: {
            /**
             * @description Format type the report should be generated as
             *
             *     Available options:
             *     * pdf
             * @example pdf
             */
            reportFormatType: string;
            /**
             * Format: uuid
             * @description Id of the account on which activities have been booked
             *
             *     Criteria: Exact match on the Id of the account
             *
             * @example 78343563-F427-4F4F-09E1-2863145BE9AD
             */
            accountId: string;
            /**
             * Format: date-time
             * @description Minimum value date
             *
             *     FromValueDate and ToValueDate form a date range
             *
             *     Format: ISO 8601 | YYYY-MM-DD
             *
             * @example 2021-11-01
             */
            fromValueDate: string;
            /**
             * Format: date-time
             * @description Maximum value date
             *
             *     FromValueDate and ToValueDate form a date range
             *
             *     Format: ISO 8601 | YYYY-MM-DD
             *
             * @example 2021-11-02
             */
            toValueDate: string;
            /**
             * @description Optional field for custom information
             * @example My custom report name
             */
            name?: string | null;
            reportVersion?: components["schemas"]["ReportVersion"];
        };
        BankToCustomerBadRequestResponse: {
            errors?: components["schemas"]["ISwaggerUseError"][] | null;
        };
        BankToCustomerEndOfDayReportError400Details: {
            readonly type?: string | null;
            title?: string | null;
            /** Format: int32 */
            status?: number | null;
            readonly extensions?: {
                [key: string]: unknown;
            } | null;
            readonly errors?: {
                [key: string]: string[];
            } | null;
        };
        /** @description Bank to customer report is an EOD report in CAMT053 format. It returns all processed payments on all your bank accounts at a given EOD */
        BankToCustomerReportRequest: {
            /**
             * Format: date-time
             * @description The date for which the report will be generated.
             *
             *     Format : ISO 8601 | YYYY-MM-DD
             *
             * @example 2020-11-01
             */
            transactionDate?: string;
            /**
             * @description If any account ids is specified the report will exclusively include data only for those accounts.
             *
             *     Format : GUID
             * @example [
             *       "0a0ed7aa-c87b-4ea5-844b-9714c1cf8952",
             *       "cf2f1c1d-7df1-451d-b771-4daf288abeb0"
             *     ]
             */
            accountIds?: string[] | null;
        };
        /** @description Bank to customer report is an EOD report in CAMT053 format. It returns all processed payments on all your
         *     bank accounts at a given EOD */
        BankToCustomerReportRequestInput: {
            /**
             * @description Format type the report should be generated as
             *
             *     Available options:
             *     * xml
             * @example xml
             */
            reportFormatType: string;
            /**
             * Format: date-time
             * @description The date for which the report will be generated.
             *
             *     Format : ISO 8601 | YYYY-MM-DD
             *
             * @example 2020-11-01
             */
            transactionDate: string;
            /**
             * @description If any account ids is specified the report will exclusively include data only for those accounts.
             *
             *     Format : GUID
             * @example [
             *       "0a0ed7aa-c87b-4ea5-844b-9714c1cf8952",
             *       "cf2f1c1d-7df1-451d-b771-4daf288abeb0"
             *     ]
             */
            accountIds?: string[] | null;
            /**
             * @description Optional field for custom information
             * @example My custom report name
             */
            name?: string | null;
            reportVersion?: components["schemas"]["ReportVersion"];
        };
        BankToCustomerStatementV02: {
            grpHdr?: components["schemas"]["GroupHeader42"];
            stmt?: components["schemas"]["AccountStatement2"][] | null;
        };
        BankTransactionCodeStructure4: {
            domn?: components["schemas"]["BankTransactionCodeStructure5"];
            prtry?: components["schemas"]["ProprietaryBankTransactionCodeStructure1"];
        };
        BankTransactionCodeStructure5: {
            cd?: string | null;
            fmly?: components["schemas"]["BankTransactionCodeStructure6"];
        };
        BankTransactionCodeStructure6: {
            cd?: string | null;
            subFmlyCd?: string | null;
        };
        BatchInformation2: {
            msgId?: string | null;
            pmtInfId?: string | null;
            nbOfTxs?: string | null;
            ttlAmt?: components["schemas"]["ActiveOrHistoricCurrencyAndAmount"];
            cdtDbtInd?: components["schemas"]["CreditDebitCode"];
            cdtDbtIndSpecified?: boolean;
        };
        BranchAndFinancialInstitutionIdentification4: {
            finInstnId?: components["schemas"]["FinancialInstitutionIdentification7"];
            brnchId?: components["schemas"]["BranchData2"];
        };
        BranchData2: {
            id?: string | null;
            nm?: string | null;
            pstlAdr?: components["schemas"]["PostalAddress6"];
        };
        CashAccount16: {
            id?: components["schemas"]["AccountIdentification4Choice"];
            tp?: components["schemas"]["CashAccountType2"];
            ccy?: string | null;
            nm?: string | null;
        };
        CashAccount20: {
            id?: components["schemas"]["AccountIdentification4Choice"];
            tp?: components["schemas"]["CashAccountType2"];
            ccy?: string | null;
            nm?: string | null;
            ownr?: components["schemas"]["PartyIdentification32"];
            svcr?: components["schemas"]["BranchAndFinancialInstitutionIdentification4"];
        };
        CashAccountType2: {
            item?: unknown;
        };
        CashBalance3: {
            tp?: components["schemas"]["BalanceType12"];
            cdtLine?: components["schemas"]["CreditLine2"];
            amt?: components["schemas"]["ActiveOrHistoricCurrencyAndAmount"];
            cdtDbtInd?: components["schemas"]["CreditDebitCode"];
            dt?: components["schemas"]["DateAndDateTimeChoice"];
            avlbty?: components["schemas"]["CashBalanceAvailability2"][] | null;
        };
        CashBalanceAvailability2: {
            dt?: components["schemas"]["CashBalanceAvailabilityDate1"];
            amt?: components["schemas"]["ActiveOrHistoricCurrencyAndAmount"];
            cdtDbtInd?: components["schemas"]["CreditDebitCode"];
        };
        CashBalanceAvailabilityDate1: {
            item?: unknown;
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        ChargeBearerType1Code: 0 | 1 | 2 | 3;
        ChargeType2Choice: {
            item?: unknown;
        };
        ChargesInformation6: {
            ttlChrgsAndTaxAmt?: components["schemas"]["ActiveOrHistoricCurrencyAndAmount"];
            amt?: components["schemas"]["ActiveOrHistoricCurrencyAndAmount"];
            cdtDbtInd?: components["schemas"]["CreditDebitCode"];
            cdtDbtIndSpecified?: boolean;
            tp?: components["schemas"]["ChargeType2Choice"];
            /** Format: double */
            rate?: number;
            rateSpecified?: boolean;
            br?: components["schemas"]["ChargeBearerType1Code"];
            brSpecified?: boolean;
            pty?: components["schemas"]["BranchAndFinancialInstitutionIdentification4"];
            tax?: components["schemas"]["TaxCharges2"];
        };
        ClearingSystemIdentification2Choice: {
            item?: string | null;
            itemElementName?: components["schemas"]["ItemChoiceType4"];
        };
        ClearingSystemMemberIdentification2: {
            clrSysId?: components["schemas"]["ClearingSystemIdentification2Choice"];
            mmbId?: string | null;
        };
        CompanyAccountBalanceBadRequestResponse: {
            errors?: components["schemas"]["ISwaggerUseError"][] | null;
        };
        CompanyAccountBalanceReportRequest: {
            /**
             * Format: uuid
             * @description Id of the company on which the account are related to
             *
             *     Criteria: Exact match on the Id of the company
             *
             * @example 78343563-F427-4F4F-09E1-2863145BE9AD
             */
            companyId?: string;
            /**
             * Format: date-time
             * @description Value date
             *
             *     Format: ISO 8601 | YYYY-MM-DD
             *
             * @example 2021-11-01
             */
            valueDate?: string;
            /** @description Specific accountsIds of the accounts to retrieve balances for
             *
             *     Criteria: Exact match on the Id of the accounts for the specified company
             *      */
            accountIds?: string[] | null;
        };
        /** @description Company Account Balance Report contains the end-of-day balances of the company's accounts at the given value date. */
        CompanyAccountBalanceReportRequestInput: {
            /**
             * @description Format type the report should be generated as
             *
             *     Available options:
             *     * pdf
             *     * csv
             *     * json
             * @example json
             */
            reportFormatType: string;
            /**
             * Format: uuid
             * @description Id of the company on which the account are related to
             *
             *     Criteria: Exact match on the Id of the company
             *
             * @example 78343563-F427-4F4F-09E1-2863145BE9AD
             */
            companyId: string;
            /**
             * Format: date-time
             * @description Value date
             *
             *     Format: ISO 8601 | YYYY-MM-DD
             *
             * @example 2021-11-01
             */
            valueDate: string;
            /** @description Specific accountsIds of the accounts to retrieve balances for
             *
             *     Criteria: Exact match on the Id of the accounts for the specified company
             *      */
            accountIds?: string[] | null;
            /**
             * @description Optional field for custom information
             * @example My custom report name
             */
            name?: string | null;
            reportVersion?: components["schemas"]["ReportVersion"];
        };
        ContactDetails2: {
            nmPrfx?: components["schemas"]["NamePrefix1Code"];
            nmPrfxSpecified?: boolean;
            nm?: string | null;
            phneNb?: string | null;
            mobNb?: string | null;
            faxNb?: string | null;
            emailAdr?: string | null;
            othr?: string | null;
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        CopyDuplicate1Code: 0 | 1 | 2;
        CorporateAction1: {
            cd?: string | null;
            nb?: string | null;
            prtry?: string | null;
        };
        CreateScheduleInput: {
            /**
             * Format: uuid
             * @description Provide the account ID if the ReportName is "account-activity-report"
             *     -otherwise- leave empty.
             */
            accountId?: string | null;
            /** Format: date-time */
            beginDate?: string;
            /** Format: date-time */
            endDate?: string;
            scheduleName?: string | null;
            reportName?: string | null;
            reportVersion?: components["schemas"]["ReportVersion"];
            notificationEmail?: string | null;
            /** Format: int32 */
            from?: number;
            /** Format: int32 */
            to?: number;
            reportFormat?: components["schemas"]["FormattingFileType"];
            rangeUnit?: components["schemas"]["RangeUnitType"];
            triggerType?: components["schemas"]["TriggerType"];
            eventOfDay?: components["schemas"]["EventOfDayType"];
            /** @description Properties of report object to include in result
             *
             *     IncludeProperties contains additional properties to include in report. Non existing properties will be ignored. Default value will be default properties for the specific report
             *      */
            includeProperties?: string[] | null;
            /** @description ExcludeProperties contains properties to remove from report.
             *      */
            excludeProperties?: string[] | null;
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        CreditDebitCode: 0 | 1;
        CreditLine2: {
            incl?: boolean;
            amt?: components["schemas"]["ActiveOrHistoricCurrencyAndAmount"];
        };
        CreditorReferenceInformation2: {
            tp?: components["schemas"]["CreditorReferenceType2"];
            ref?: string | null;
        };
        CreditorReferenceType1Choice: {
            item?: unknown;
        };
        CreditorReferenceType2: {
            cdOrPrtry?: components["schemas"]["CreditorReferenceType1Choice"];
            issr?: string | null;
        };
        CurrencyAndAmountRange2: {
            amt?: components["schemas"]["ImpliedCurrencyAmountRangeChoice"];
            cdtDbtInd?: components["schemas"]["CreditDebitCode"];
            cdtDbtIndSpecified?: boolean;
            ccy?: string | null;
        };
        CurrencyExchange5: {
            srcCcy?: string | null;
            trgtCcy?: string | null;
            unitCcy?: string | null;
            /** Format: double */
            xchgRate?: number;
            ctrctId?: string | null;
            /** Format: date-time */
            qtnDt?: string;
            qtnDtSpecified?: boolean;
        };
        DateAndDateTimeChoice: {
            /** Format: date-time */
            item?: string;
            itemElementName?: components["schemas"]["ItemChoiceType8"];
        };
        DatePeriodDetails: {
            /** Format: date-time */
            frDt?: string;
            /** Format: date-time */
            toDt?: string;
        };
        DateTimePeriodDetails: {
            /** Format: date-time */
            frDtTm?: string;
            /** Format: date-time */
            toDtTm?: string;
        };
        Document: {
            bkToCstmrStmt?: components["schemas"]["BankToCustomerStatementV02"];
        };
        DocumentAdjustment1: {
            amt?: components["schemas"]["ActiveOrHistoricCurrencyAndAmount"];
            cdtDbtInd?: components["schemas"]["CreditDebitCode"];
            cdtDbtIndSpecified?: boolean;
            rsn?: string | null;
            addtlInf?: string | null;
        };
        EntryDetails1: {
            btch?: components["schemas"]["BatchInformation2"];
            txDtls?: components["schemas"]["EntryTransaction2"][] | null;
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        EntryStatus2Code: 0 | 1 | 2;
        EntryTransaction2: {
            refs?: components["schemas"]["TransactionReferences2"];
            amtDtls?: components["schemas"]["AmountAndCurrencyExchange3"];
            avlbty?: components["schemas"]["CashBalanceAvailability2"][] | null;
            bkTxCd?: components["schemas"]["BankTransactionCodeStructure4"];
            chrgs?: components["schemas"]["ChargesInformation6"][] | null;
            intrst?: components["schemas"]["TransactionInterest2"][] | null;
            rltdPties?: components["schemas"]["TransactionParty2"];
            rltdAgts?: components["schemas"]["TransactionAgents2"];
            purp?: components["schemas"]["Purpose2Choice"];
            rltdRmtInf?: components["schemas"]["RemittanceLocation2"][] | null;
            rmtInf?: components["schemas"]["RemittanceInformation5"];
            rltdDts?: components["schemas"]["TransactionDates2"];
            rltdPric?: components["schemas"]["TransactionPrice2Choice"];
            rltdQties?: components["schemas"]["TransactionQuantities1Choice"][] | null;
            finInstrmId?: components["schemas"]["SecurityIdentification4Choice"];
            tax?: components["schemas"]["TaxInformation3"];
            rtrInf?: components["schemas"]["ReturnReasonInformation10"];
            corpActn?: components["schemas"]["CorporateAction1"];
            sfkpgAcct?: components["schemas"]["CashAccount16"];
            addtlTxInf?: string | null;
        };
        /** @description Used to display examples in swagger documentation */
        Error404Root: {
            errors?: components["schemas"]["ErrorObject"][] | null;
        };
        /** @description ErrorObject */
        ErrorObject: {
            /**
             * @description ErrorCode
             * @example InvalidBusinessDay
             */
            readonly errorCode?: string | null;
            /**
             * @description ErrorDescription
             * @example Requested date is not a valid business day or EOD has not yet occured.
             */
            readonly errorDescription?: string | null;
        };
        /** @enum {string} */
        EventOfDayType: "FinancialDayEnd";
        /** @description Meta data associated with the representation of a property in a report. */
        FieldInfoAttribute: {
            /** @description This is the column title in a CSV or table. */
            headerText?: string | null;
            /**
             * Format: int32
             * @description The position the decorated property should have.
             */
            index?: number;
            readonly typeId?: unknown;
        };
        FinancialIdentificationSchemeName1Choice: {
            item?: string | null;
            itemElementName?: components["schemas"]["ItemChoiceType5"];
        };
        FinancialInstitutionIdentification7: {
            bic?: string | null;
            clrSysMmbId?: components["schemas"]["ClearingSystemMemberIdentification2"];
            nm?: string | null;
            pstlAdr?: components["schemas"]["PostalAddress6"];
            othr?: components["schemas"]["GenericFinancialIdentification1"];
        };
        /** @description Formatter details */
        FormatterDetails: {
            /** @description The name of the Formatter */
            name?: string | null;
            /** @description The description */
            description?: string | null;
            /** @description Short name of the formatter - to be used in Url when selecting report format. Avoid special characters and space */
            shortName?: string | null;
            /** @description The file extension for the report */
            fileExtension?: string | null;
        };
        /** @enum {string} */
        FormattingFileType: "json" | "csv" | "pdf" | "mt940" | "xml";
        GenericBadRequestResponse: {
            errors?: components["schemas"]["ISwaggerUseError"][] | null;
        };
        GenericFinancialIdentification1: {
            id?: string | null;
            schmeNm?: components["schemas"]["FinancialIdentificationSchemeName1Choice"];
            issr?: string | null;
        };
        GroupHeader42: {
            msgId?: string | null;
            /** Format: date-time */
            creDtTm?: string;
            msgRcpt?: components["schemas"]["PartyIdentification32"];
            msgPgntn?: components["schemas"]["Pagination"];
            addtlInf?: string | null;
        };
        GuidCreatedEntity: {
            /** Format: uuid */
            id?: string;
        };
        GuidDeletedEntity: {
            /** Format: uuid */
            id?: string;
        };
        ISwaggerUseError: Record<string, never>;
        ImpliedCurrencyAmountRangeChoice: {
            item?: unknown;
            itemElementName?: components["schemas"]["ItemChoiceType6"];
        };
        InterestType1Choice: {
            item?: unknown;
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        ItemChoiceType10: 0 | 1;
        /**
         * Format: int32
         * @enum {integer}
         */
        ItemChoiceType12: 0 | 1;
        /**
         * Format: int32
         * @enum {integer}
         */
        ItemChoiceType2: 0 | 1;
        /**
         * Format: int32
         * @enum {integer}
         */
        ItemChoiceType4: 0 | 1;
        /**
         * Format: int32
         * @enum {integer}
         */
        ItemChoiceType5: 0 | 1;
        /**
         * Format: int32
         * @enum {integer}
         */
        ItemChoiceType6: 0 | 1 | 2 | 3 | 4;
        /**
         * Format: int32
         * @enum {integer}
         */
        ItemChoiceType7: 0 | 1;
        /**
         * Format: int32
         * @enum {integer}
         */
        ItemChoiceType8: 0 | 1;
        /**
         * Format: int32
         * @enum {integer}
         */
        ItemChoiceType9: 0 | 1;
        MessageIdentification2: {
            msgNmId?: string | null;
            msgId?: string | null;
        };
        NameAndAddress10: {
            nm?: string | null;
            adr?: components["schemas"]["PostalAddress6"];
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        NamePrefix1Code: 0 | 1 | 2 | 3;
        /** @description No data dto for Swagger generation */
        NoResponse: Record<string, never>;
        NumberAndSumOfTransactions1: {
            nbOfNtries?: string | null;
            /** Format: double */
            sum?: number;
            sumSpecified?: boolean;
        };
        NumberAndSumOfTransactions2: {
            nbOfNtries?: string | null;
            /** Format: double */
            sum?: number;
            sumSpecified?: boolean;
            /** Format: double */
            ttlNetNtryAmt?: number;
            ttlNetNtryAmtSpecified?: boolean;
            cdtDbtInd?: components["schemas"]["CreditDebitCode"];
            cdtDbtIndSpecified?: boolean;
        };
        /** @description Page information of the responded Result Set */
        PageInfo: {
            /**
             * Format: int32
             * @description What page has been retuned
             */
            currentPage?: number;
            /**
             * Format: int32
             * @description The Result Set and CurrentPage was generated based on a number of allowed elements per page (PageSize)
             */
            pageSize?: number;
            /**
             * Format: int32
             * @description Total of records
             */
            rowCount?: number | null;
        };
        PagedRequestedReportsError400Details: {
            readonly type?: string | null;
            title?: string | null;
            /** Format: int32 */
            status?: number | null;
            readonly extensions?: {
                [key: string]: unknown;
            } | null;
            readonly errors?: {
                [key: string]: string[];
            } | null;
        };
        Pagination: {
            pgNb?: string | null;
            lastPgInd?: boolean;
        };
        Party6Choice: {
            item?: unknown;
        };
        PartyIdentification32: {
            nm?: string | null;
            pstlAdr?: components["schemas"]["PostalAddress6"];
            id?: components["schemas"]["Party6Choice"];
            ctryOfRes?: string | null;
            ctctDtls?: components["schemas"]["ContactDetails2"];
        };
        PostalAddress6: {
            adrTp?: components["schemas"]["AddressType2Code"];
            adrTpSpecified?: boolean;
            dept?: string | null;
            subDept?: string | null;
            strtNm?: string | null;
            bldgNb?: string | null;
            pstCd?: string | null;
            twnNm?: string | null;
            ctrySubDvsn?: string | null;
            ctry?: string | null;
            adrLine?: string[] | null;
        };
        ProblemDetails: {
            type?: string | null;
            title?: string | null;
            /** Format: int32 */
            status?: number | null;
            detail?: string | null;
            instance?: string | null;
        } & {
            [key: string]: unknown;
        };
        ProprietaryAgent2: {
            tp?: string | null;
            agt?: components["schemas"]["BranchAndFinancialInstitutionIdentification4"];
        };
        ProprietaryBankTransactionCodeStructure1: {
            cd?: string | null;
            issr?: string | null;
        };
        ProprietaryDate2: {
            tp?: string | null;
            dt?: components["schemas"]["DateAndDateTimeChoice"];
        };
        ProprietaryParty2: {
            tp?: string | null;
            pty?: components["schemas"]["PartyIdentification32"];
        };
        ProprietaryReference1: {
            tp?: string | null;
            ref?: string | null;
        };
        Purpose2Choice: {
            item?: string | null;
            itemElementName?: components["schemas"]["ItemChoiceType10"];
        };
        /** @enum {string} */
        RangeUnitType: "Days" | "Weeks" | "Months";
        Rate3: {
            tp?: components["schemas"]["RateType4Choice"];
            vldtyRg?: components["schemas"]["CurrencyAndAmountRange2"];
        };
        RateType4Choice: {
            item?: unknown;
        };
        Reconciliation: {
            pIdChannelUser?: string | null;
            /**
             * Format: date
             * @description Date representation
             *
             *     Format: ISO 8601 | YYYY-MM-DD
             *
             *     Example: 2001-01-28
             */
            pTxnDate?: string | null;
            /**
             * Format: date
             * @description Date representation
             *
             *     Format: ISO 8601 | YYYY-MM-DD
             *
             *     Example: 2001-01-28
             */
            reportDate?: string | null;
            customerId?: string | null;
            account?: string | null;
            accountCurrency?: string | null;
            /** Format: double */
            debitAmount?: number | null;
            /** Format: double */
            creditAmount?: number | null;
            /**
             * Format: date
             * @description Date representation
             *
             *     Format: ISO 8601 | YYYY-MM-DD
             *
             *     Example: 2001-01-28
             */
            valueDate?: string | null;
            /** Format: double */
            instructedAmount?: number | null;
            instructedAmountCurrency?: string | null;
            /** Format: double */
            transactionAmount?: number;
            transactionAmountCurrency?: string | null;
            /** Format: double */
            exchangeRate?: number;
            debtorBankCode?: string | null;
            debtorAccount?: string | null;
            debtorLine1?: string | null;
            debtorLine2?: string | null;
            debtorLine3?: string | null;
            debtorLine4?: string | null;
            beneficiaryBankCode?: string | null;
            beneficiaryAccount?: string | null;
            beneficiaryLine1?: string | null;
            beneficiaryLine2?: string | null;
            beneficiaryLine3?: string | null;
            beneficiaryLine4?: string | null;
            paymentReferenceNumber?: string | null;
            fileReferenceNumber?: string | null;
            userReferenceNumber?: string | null;
            paymentDetails1?: string | null;
            paymentDetails2?: string | null;
            paymentDetails3?: string | null;
            paymentDetails4?: string | null;
            creditDebitIndicator?: string | null;
            bankTrnsCodeDomain?: string | null;
            bankTrnsCodeFamily?: string | null;
            /** Format: uuid */
            paymentId?: string | null;
            /** Format: date-time */
            lastChangedTimestamp?: string | null;
            /** Format: date-time */
            createdAt?: string | null;
            debtorAgentBankCode?: string | null;
            ultimateDebtorLine1?: string | null;
            ultimateDebtorLine2?: string | null;
            ultimateDebtorLine3?: string | null;
            ultimateDebtorLine4?: string | null;
            ultimateDebtorAccount?: string | null;
            statusReasonCode?: string | null;
            statusReasonDescription?: string | null;
            bankTrnsCodeSubFamily?: string | null;
            ultimateBeneficiaryAccount?: string | null;
            additionalRemittanceInformation1?: string | null;
            additionalRemittanceInformation2?: string | null;
            additionalRemittanceInformation3?: string | null;
            additionalRemittanceInformation4?: string | null;
            additionalRemittanceInformation5?: string | null;
            instructedChargeBearer?: string | null;
            chargeBearer?: string | null;
            directDebitMandateId?: string | null;
            paymentRail?: string | null;
            return?: boolean | null;
            /** Format: date-time */
            latestStatusChangedTimestamp?: string | null;
            /** Format: date-time */
            processedTimestamp?: string | null;
            clientOrderId?: string | null;
        };
        ReconciliationBadRequestResponse: {
            errors?: components["schemas"]["ISwaggerUseError"][] | null;
        };
        ReconciliationReport: {
            reconciliations?: components["schemas"]["Reconciliation"][] | null;
            readonly requiredFieldProperties?: {
                [key: string]: components["schemas"]["FieldInfoAttribute"];
            } | null;
        };
        ReconciliationReportError400Details: {
            readonly type?: string | null;
            title?: string | null;
            /** Format: int32 */
            status?: number | null;
            readonly extensions?: {
                [key: string]: unknown;
            } | null;
            readonly errors?: {
                [key: string]: string[];
            } | null;
        };
        ReconciliationReportPagedError400Details: {
            readonly type?: string | null;
            title?: string | null;
            /** Format: int32 */
            status?: number | null;
            readonly extensions?: {
                [key: string]: unknown;
            } | null;
            readonly errors?: {
                [key: string]: string[];
            } | null;
        };
        /** @description Reconciliation report contains extensive details on all your processed payments, on all your bank accounts, at a given date range */
        ReconciliationReportRequest: {
            /**
             * Format: date-time
             * @description Minimum transaction date
             *
             *     FromTransactionDate and ToTransactionDate form a date range
             *
             *     Criteria: Reconciliation.ReportDate must be equal or later
             *
             *     Format: ISO 8601 | YYYY-MM-DD
             *
             * @example 2001-11-01
             */
            fromTransactionDate?: string;
            /**
             * Format: date-time
             * @description Maximum transaction date
             *
             *     FromTransactionDate and ToTransactionDate form a date range
             *
             *     Criteria: Reconciliation.ReportDate must be equal or earlier
             *
             *     Format: ISO 8601 | YYYY-MM-DD
             *
             * @example 2001-11-01
             */
            toTransactionDate?: string;
            /** @description  Properties of Reconciliation object to include in result
             *
             *      Please note: the use of IncludeProperties and PropertiesIncluded are mutual exclusive. - When both are used all IncludeProperties are ignored.
             *
             *      If PropertiesIncluded is set, PropertiesExcluded need not be set
             *
             *     <strong>If neither PropertiesIncluded nor PropertiesExcluded are specified, default value will be PropertiesIncluded =</strong>
             *
             *     		PIdChannelUser
             *
             *     		PTxnDate
             *
             *     		ReportDate
             *
             *     		CustomerId
             *
             *     		Account
             *
             *     		AccountCurrency
             *
             *     		DebitAmount
             *
             *     		CreditAmount
             *
             *     		ValueDate
             *
             *     		InstructedAmount
             *
             *     		InstructedAmountCurrency
             *
             *     		TransactionAmount
             *
             *     		TransactionAmountCurrency
             *
             *     		ExchangeRate
             *
             *     		DebtorBankCode
             *
             *     		DebtorAccount
             *
             *     		DebtorLine1
             *
             *     		DebtorLine2
             *
             *     		DebtorLine3
             *
             *     		DebtorLine4
             *
             *     		BeneficiaryBankCode
             *
             *     		BeneficiaryAccount
             *
             *     		BeneficiaryLine1
             *
             *     		BeneficiaryLine2
             *
             *     		BeneficiaryLine3
             *
             *     		BeneficiaryLine4
             *
             *     		PaymentReferenceNumber
             *
             *     		FileReferenceNumber
             *
             *     		UserReferenceNumber
             *
             *     		PaymentDetails1
             *
             *     		PaymentDetails2
             *
             *     		PaymentDetails3
             *
             *     		PaymentDetails4
             *
             *     		CreditDebitIndicator
             *
             *     		BankTrnsCodeDomain
             *
             *     		BankTrnsCodeFamily
             *
             *     		CreatedAt
             *
             *     <strong>Extra parameters that can be added to the array, but are not part of the default array</strong>
             *
             *          PaymentId
             *
             *          LastChangedTimestamp
             *
             *          BankTrnsCodeSubFamily
             *
             *          DebtorAgentBankCode
             *
             *     		UltimateDebtorLine1
             *
             *     		UltimateDebtorLine2
             *
             *     		UltimateDebtorLine3
             *
             *     		UltimateDebtorLine4
             *
             *     		UltimateDebtorAccount
             *
             *     		UltimateBeneficiaryAccount
             *
             *     		StatusReasonCode
             *
             *     		StatusReasonDescription
             *
             *     	    AdditionalRemittanceInformation1
             *
             *     	    AdditionalRemittanceInformation2
             *
             *     	    AdditionalRemittanceInformation3
             *
             *     	    AdditionalRemittanceInformation4
             *
             *     	    AdditionalRemittanceInformation5
             *
             *     	    PaymentRail
             *
             *     	    Return
             *
             *     	    DirectDebitMandateId
             *
             *     	    LatestStatusChangedTimestamp
             *
             *     	    ProcessedTimestamp
             *
             *     	    ClientOrderId
             *
             *     Format: comma (,) separated string
             *      */
            includeProperties?: string[] | null;
            /** @description Properties of Reconciliation object to exclude from result
             *
             *     To get all available properties send an empty ExcludeProperties list
             *     If ExcludeProperties is set, IncludeProperties need not be set
             *      */
            excludeProperties?: string[] | null;
            /**
             * @description List of account Ids
             *
             *     Criteria: Exact match on the Id of the account
             *
             * @example [
             *       "402AF997-14ED-26B7-6269-E50D4C865958",
             *       "AB89F333-908A-DC79-4BE9-E368A0908C26"
             *     ]
             */
            accountId?: string[] | null;
        };
        /** @description Reconciliation report contains extensive details on all your processed payments, on all your bank accounts,
         *     at a given date range */
        ReconciliationReportRequestInput: {
            /**
             * @description Format type the report should be generated as
             *
             *     Available options:
             *     * csv
             *     * json
             * @example json
             */
            reportFormatType: string;
            /**
             * Format: date-time
             * @description Minimum transaction date
             *
             *     FromTransactionDate and ToTransactionDate form a date range
             *
             *     Criteria: Reconciliation.ReportDate must be equal or later
             *
             *     Format: ISO 8601 | YYYY-MM-DD
             *
             * @example 2001-11-01
             */
            fromTransactionDate: string;
            /**
             * Format: date-time
             * @description Maximum transaction date
             *
             *     FromTransactionDate and ToTransactionDate form a date range
             *
             *     Criteria: Reconciliation.ReportDate must be equal or earlier
             *
             *     Format: ISO 8601 | YYYY-MM-DD
             *
             * @example 2001-11-01
             */
            toTransactionDate: string;
            /** @description  Properties of Reconciliation object to include in result
             *
             *      If IncludeProperties is set, ExcludeProperties need not be set
             *
             *     <strong>If neither IncludeProperties nor ExcludeProperties are specified, default value will be IncludeProperties =</strong>
             *
             *     		PIdChannelUser
             *
             *     		PTxnDate
             *
             *     		ReportDate
             *
             *     		CustomerId
             *
             *     		Account
             *
             *     		AccountCurrency
             *
             *     		DebitAmount
             *
             *     		CreditAmount
             *
             *     		ValueDate
             *
             *     		InstructedAmount
             *
             *     		InstructedAmountCurrency
             *
             *     		TransactionAmount
             *
             *     		TransactionAmountCurrency
             *
             *     		ExchangeRate
             *
             *     		DebtorBankCode
             *
             *     		DebtorAccount
             *
             *     		DebtorLine1
             *
             *     		DebtorLine2
             *
             *     		DebtorLine3
             *
             *     		DebtorLine4
             *
             *     		BeneficiaryBankCode
             *
             *     		BeneficiaryAccount
             *
             *     		BeneficiaryLine1
             *
             *     		BeneficiaryLine2
             *
             *     		BeneficiaryLine3
             *
             *     		BeneficiaryLine4
             *
             *     		PaymentReferenceNumber
             *
             *     		FileReferenceNumber
             *
             *     		UserReferenceNumber
             *
             *     		PaymentDetails1
             *
             *     		PaymentDetails2
             *
             *     		PaymentDetails3
             *
             *     		PaymentDetails4
             *
             *     		CreditDebitIndicator
             *
             *     		BankTrnsCodeDomain
             *
             *     		BankTrnsCodeFamily
             *
             *     <strong>Extra parameters that can be added to the array, but are not part of the default array</strong>
             *
             *          PaymentId
             *
             *          LastChangedTimestamp
             *
             *          BankTrnsCodeSubFamily
             *
             *     		CreatedAt
             *
             *          DebtorAgentBankCode
             *
             *     		UltimateDebtorLine1
             *
             *     		UltimateDebtorLine2
             *
             *     		UltimateDebtorLine3
             *
             *     		UltimateDebtorLine4
             *
             *     		UltimateDebtorAccount
             *
             *     		UltimateBeneficiaryAccount
             *
             *     		StatusReasonCode
             *
             *     		StatusReasonDescription
             *
             *     	    AdditionalRemittanceInformation1
             *
             *     	    AdditionalRemittanceInformation2
             *
             *     	    AdditionalRemittanceInformation3
             *
             *     	    AdditionalRemittanceInformation4
             *
             *     	    AdditionalRemittanceInformation5
             *
             *     	    InstructedChargeBearer
             *
             *     	    ChargeBearer
             *
             *     	    PaymentRail
             *
             *     	    Return
             *
             *     	    DirectDebitMandateId
             *
             *     	    LatestStatusChangedTimestamp
             *
             *     	    ProcessedTimestamp
             *
             *     	    ClientOrderId
             *
             *     Format: comma (,) separated string
             *      */
            includeProperties?: string[] | null;
            /** @description Properties of Reconciliation object to exclude from result
             *
             *     To get all available properties send an empty ExcludeProperties list
             *     If ExcludeProperties is set, IncludeProperties need not be set
             *      */
            excludeProperties?: string[] | null;
            /**
             * @description List of account Ids
             *
             *     Criteria: Exact match on the Id of the account
             *
             * @example [
             *       "402AF997-14ED-26B7-6269-E50D4C865958",
             *       "AB89F333-908A-DC79-4BE9-E368A0908C26"
             *     ]
             */
            accountIds?: string[] | null;
            /**
             * @description Optional field for custom information
             * @example My custom report name
             */
            name?: string | null;
            reportVersion?: components["schemas"]["ReportVersion"];
        };
        ReferredDocumentInformation3: {
            tp?: components["schemas"]["ReferredDocumentType2"];
            nb?: string | null;
            /** Format: date-time */
            rltdDt?: string;
            rltdDtSpecified?: boolean;
        };
        ReferredDocumentType1Choice: {
            item?: unknown;
        };
        ReferredDocumentType2: {
            cdOrPrtry?: components["schemas"]["ReferredDocumentType1Choice"];
            issr?: string | null;
        };
        Rejection: {
            pIdChanneluser?: string | null;
            /**
             * Format: date
             * @description Date representation
             *
             *     Format: ISO 8601 | YYYY-MM-DD
             *
             *     Example: 2001-01-28
             */
            pTxndate?: string | null;
            /**
             * Format: date
             * @description Date representation
             *
             *     Format: ISO 8601 | YYYY-MM-DD
             *
             *     Example: 2001-01-28
             */
            reportDate?: string | null;
            customerId?: string | null;
            account?: string | null;
            accountCurrency?: string | null;
            /**
             * Format: date
             * @description Date representation
             *
             *     Format: ISO 8601 | YYYY-MM-DD
             *
             *     Example: 2001-01-28
             */
            valueDate?: string | null;
            /** Format: double */
            paymentAmount?: number;
            paymentCurrency?: string | null;
            transferCurrency?: string | null;
            destinationIban?: string | null;
            paymentReferenceNumber?: string | null;
            userReferenceNumber?: string | null;
            fileReferenceNumber?: string | null;
            sourceType?: string | null;
            status?: string | null;
            statusReason?: string | null;
        };
        RejectionBadRequestResponse: {
            errors?: components["schemas"]["ISwaggerUseError"][] | null;
        };
        RejectionReport: {
            rejections?: components["schemas"]["Rejection"][] | null;
        };
        RejectionReportError400Details: {
            readonly type?: string | null;
            title?: string | null;
            /** Format: int32 */
            status?: number | null;
            readonly extensions?: {
                [key: string]: unknown;
            } | null;
            readonly errors?: {
                [key: string]: string[];
            } | null;
        };
        /** @description Rejection report will include all rejected payments at a given transaction date, on all your accounts.
         *     You have the option to include/exclude payments which are missing funds or are pending processing. */
        RejectionReportRequest: {
            /**
             * Format: date-time
             * @description TransactionDate
             *
             *     Format: ISO 8601 | YYYY-MM-DD
             *
             * @example 2001-11-01
             */
            transactionDate?: string;
            includeReceived?: boolean;
            includeMissingFunds?: boolean;
            excludeBooked?: boolean;
        };
        /** @description Rejection report will include all rejected payments at a given transaction date, on all your accounts.
         *     You have the option to include/exclude payments which are missing funds or are pending processing. */
        RejectionReportRequestInput: {
            /**
             * @description Format type the report should be generated as
             *
             *     Available options:
             *     * csv
             *     * json
             * @example json
             */
            reportFormatType: string;
            /**
             * Format: date-time
             * @description TransactionDate
             *
             *     Format: ISO 8601 | YYYY-MM-DD
             *
             * @example 2001-11-01
             */
            transactionDate: string;
            includeReceived?: boolean;
            includeMissingFunds?: boolean;
            /** @description ExcludeBooked
             *
             *     Setting this to true will exclude any payments that are already booked
             *     Default is false */
            excludeBooked?: boolean;
            /**
             * @description Optional field for custom information
             * @example My custom report name
             */
            name?: string | null;
            reportVersion?: components["schemas"]["ReportVersion"];
        };
        RemittanceAmount1: {
            duePyblAmt?: components["schemas"]["ActiveOrHistoricCurrencyAndAmount"];
            dscntApldAmt?: components["schemas"]["ActiveOrHistoricCurrencyAndAmount"];
            cdtNoteAmt?: components["schemas"]["ActiveOrHistoricCurrencyAndAmount"];
            taxAmt?: components["schemas"]["ActiveOrHistoricCurrencyAndAmount"];
            adjstmntAmtAndRsn?: components["schemas"]["DocumentAdjustment1"][] | null;
            rmtdAmt?: components["schemas"]["ActiveOrHistoricCurrencyAndAmount"];
        };
        RemittanceInformation5: {
            ustrd?: string[] | null;
            strd?: components["schemas"]["StructuredRemittanceInformation7"][] | null;
        };
        RemittanceLocation2: {
            rmtId?: string | null;
            rmtLctnMtd?: components["schemas"]["RemittanceLocationMethod2Code"];
            rmtLctnMtdSpecified?: boolean;
            rmtLctnElctrncAdr?: string | null;
            rmtLctnPstlAdr?: components["schemas"]["NameAndAddress10"];
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        RemittanceLocationMethod2Code: 0 | 1 | 2 | 3 | 4 | 5;
        ReportEntry2: {
            ntryRef?: string | null;
            amt?: components["schemas"]["ActiveOrHistoricCurrencyAndAmount"];
            cdtDbtInd?: components["schemas"]["CreditDebitCode"];
            rvslInd?: boolean;
            rvslIndSpecified?: boolean;
            sts?: components["schemas"]["EntryStatus2Code"];
            bookgDt?: components["schemas"]["DateAndDateTimeChoice"];
            valDt?: components["schemas"]["DateAndDateTimeChoice"];
            acctSvcrRef?: string | null;
            avlbty?: components["schemas"]["CashBalanceAvailability2"][] | null;
            bkTxCd?: components["schemas"]["BankTransactionCodeStructure4"];
            comssnWvrInd?: boolean;
            comssnWvrIndSpecified?: boolean;
            addtlInfInd?: components["schemas"]["MessageIdentification2"];
            amtDtls?: components["schemas"]["AmountAndCurrencyExchange3"];
            chrgs?: components["schemas"]["ChargesInformation6"][] | null;
            techInptChanl?: components["schemas"]["TechnicalInputChannel1Choice"];
            intrst?: components["schemas"]["TransactionInterest2"][] | null;
            ntryDtls?: components["schemas"]["EntryDetails1"][] | null;
            addtlNtryInf?: string | null;
        };
        /** @enum {string} */
        ReportErrorCode: "Unspecified" | "RequestingTooManyRows" | "RequestingDataForTooManyDays" | "InvalidAccountId" | "InvalidPropertyFilters" | "ConnectionTimeout" | "NotFoundOrNoAccess" | "ReportNotGenerated" | "UnsupportedOperation" | "DateOutOfRange" | "InvalidBusinessDay" | "RequestingTooOldData" | "InvalidReportFormatType" | "InvalidCompanyId" | "InvalidReportType" | "MissingProperty" | "InvalidDate" | "BindingError" | "InvalidReportVersion" | "MaxFileSizeExceeded";
        ReportErrorDto: {
            errorCode?: components["schemas"]["ReportErrorCode"];
            errorDescription?: string | null;
        };
        ReportMetaData: {
            /**
             * Format: uuid
             * @description The Id
             */
            id?: string;
            /**
             * Format: date-time
             * @description Timestamp for report
             */
            timeStamp?: string;
            /** @description The report name */
            reportName?: string | null;
            /** @description The scheduler name */
            schedulerName?: string | null;
            /** @description The account number */
            account?: string | null;
            accountInfo?: components["schemas"]["Account"];
            /** @description If true then report was generated successful.
             *     If false then there was error(s) generating then report - see Errors for details */
            readonly success?: boolean;
            /** @description The format the file is stored in. */
            reportFormat?: string | null;
            /** @description The list of errors */
            errors?: components["schemas"]["ReportErrorDto"][] | null;
            /** @description The report name */
            name?: string | null;
        };
        ReportOnRequestCombinedBadRequestResponse: {
            errors?: components["schemas"]["ISwaggerUseError"][] | null;
        };
        ReportRequestError400Details: {
            readonly type?: string | null;
            title?: string | null;
            /** Format: int32 */
            status?: number | null;
            readonly extensions?: {
                [key: string]: unknown;
            } | null;
            readonly errors?: {
                [key: string]: string[];
            } | null;
        };
        /** @enum {string} */
        ReportSourceType: "schedule" | "request" | "unknown";
        /** @enum {string} */
        ReportStatus: "created" | "pending" | "success" | "error" | "na";
        /**
         * Format: int32
         * @enum {integer}
         */
        ReportVersion: 1 | 2;
        ReportingSource1Choice: {
            item?: string | null;
            itemElementName?: components["schemas"]["ItemChoiceType2"];
        };
        /** @description Body contents:
         *     * ReportType Required
         *     * ReportFormatType Required
         *     * Exactly one Report Request is Required. */
        RequestForReport: {
            /**
             * @description Optional field for custom information
             * @example My custom report name
             */
            name?: string | null;
            /**
             * @description Available options:
             *     * account-activity-report
             *     * reconciliation-report
             *     * bank-to-customer-report
             *     * account-balance-report
             *     * rejection-report
             *     * bank-statement-report
             * @example reconciliation-report
             */
            reportType: string;
            /**
             * @description Available options:
             *     * json
             *     * csv,
             *     * xml (only for bank-to-customer-report),
             *     * pdf
             * @example json
             */
            reportFormatType: string;
            reportVersion?: components["schemas"]["ReportVersion"];
            reconciliationReportRequest?: components["schemas"]["ReconciliationReportRequest"];
            accountActivityReportRequest?: components["schemas"]["AccountActivityReportRequest"];
            accountBalanceReportRequest?: components["schemas"]["AccountBalanceReportRequest"];
            bankToCustomerReportRequest?: components["schemas"]["BankToCustomerReportRequest"];
            rejectionReportRequest?: components["schemas"]["RejectionReportRequest"];
            bankStatementReportRequest?: components["schemas"]["BankStatementReportRequest"];
            companyAccountBalanceReportRequest?: components["schemas"]["CompanyAccountBalanceReportRequest"];
        };
        RequestedReport: {
            /**
             * Format: uuid
             * @description Requested report ID
             * @example 21d81a3c-042e-4b5d-bba4-febbf6cfa959
             */
            id?: string;
            /**
             * @description Custom name information for requested report
             * @example Recon Report #100523
             */
            name?: string | null;
            /**
             * @description Type of requested report
             * @example reconciliation-report
             */
            reportType?: string | null;
            reportFormatType?: components["schemas"]["FormattingFileType"];
            status?: components["schemas"]["ReportStatus"];
            source?: components["schemas"]["ReportSourceType"];
            /**
             * Format: uuid
             * @description Id for schedule which requested this report. Only present if Source = Schedule
             * @example c9e7e18e-913d-4e58-b8b9-ed4eebd90f29
             */
            scheduleId?: string | null;
            /**
             * Format: uuid
             * @description Id for the report request. Only present if Source = Request
             * @example 63b527ea-6995-41dd-83fe-4ae2ca7b72e2
             */
            requestId?: string | null;
            /**
             * Format: date-time
             * @description Date and time when requested report was generated
             * @example 2023-05-10T05:16
             */
            generationDate?: string;
        };
        RequestedReportPagedResponse: {
            /** @description Contains elements resulting from your query */
            result?: components["schemas"]["RequestedReport"][] | null;
            pageInfo?: components["schemas"]["PageInfo"];
        };
        ReturnReason5Choice: {
            item?: string | null;
            itemElementName?: components["schemas"]["ItemChoiceType12"];
        };
        ReturnReasonInformation10: {
            orgnlBkTxCd?: components["schemas"]["BankTransactionCodeStructure4"];
            orgtr?: components["schemas"]["PartyIdentification32"];
            rsn?: components["schemas"]["ReturnReason5Choice"];
            addtlInf?: string[] | null;
        };
        /** @description Represents a flattened schedule structure.
         *     BankingCircle.Report.DomainServices.Queries.ScheduleResponse.AccountIban is populated if the BankingCircle.Report.DomainServices.Queries.ScheduleResponse.ReportName is 'account-activity-report'. */
        ScheduleResponse: {
            /** Format: uuid */
            id?: string;
            accountIban?: string | null;
            notificationEmail?: string | null;
            schedulerName?: string | null;
            /** @description Type of report the scheduler generates. */
            reportName?: string | null;
            reportVersion?: components["schemas"]["ReportVersion"];
            reportFormat?: components["schemas"]["FormattingFileType"];
            onEvent?: components["schemas"]["EventOfDayType"];
            /** Format: date-time */
            beginDate?: string;
            /** Format: date-time */
            endDate?: string;
            /** Format: int32 */
            lookBackFrom?: number;
            /** Format: int32 */
            lookBackTo?: number;
            rangeUnitType?: components["schemas"]["RangeUnitType"];
            triggerType?: components["schemas"]["TriggerType"];
            includeProperties?: string[] | null;
            excludeProperties?: string[] | null;
        };
        SecurityIdentification4Choice: {
            item?: unknown;
        };
        StructuredRemittanceInformation7: {
            rfrdDocInf?: components["schemas"]["ReferredDocumentInformation3"][] | null;
            rfrdDocAmt?: components["schemas"]["RemittanceAmount1"];
            cdtrRefInf?: components["schemas"]["CreditorReferenceInformation2"];
            invcr?: components["schemas"]["PartyIdentification32"];
            invcee?: components["schemas"]["PartyIdentification32"];
            addtlRmtInf?: string[] | null;
        };
        TaxAmount1: {
            /** Format: double */
            rate?: number;
            rateSpecified?: boolean;
            taxblBaseAmt?: components["schemas"]["ActiveOrHistoricCurrencyAndAmount"];
            ttlAmt?: components["schemas"]["ActiveOrHistoricCurrencyAndAmount"];
            dtls?: components["schemas"]["TaxRecordDetails1"][] | null;
        };
        TaxAuthorisation1: {
            titl?: string | null;
            nm?: string | null;
        };
        TaxCharges2: {
            id?: string | null;
            /** Format: double */
            rate?: number;
            rateSpecified?: boolean;
            amt?: components["schemas"]["ActiveOrHistoricCurrencyAndAmount"];
        };
        TaxInformation3: {
            cdtr?: components["schemas"]["TaxParty1"];
            dbtr?: components["schemas"]["TaxParty2"];
            admstnZn?: string | null;
            refNb?: string | null;
            mtd?: string | null;
            ttlTaxblBaseAmt?: components["schemas"]["ActiveOrHistoricCurrencyAndAmount"];
            ttlTaxAmt?: components["schemas"]["ActiveOrHistoricCurrencyAndAmount"];
            /** Format: date-time */
            dt?: string;
            dtSpecified?: boolean;
            /** Format: double */
            seqNb?: number;
            seqNbSpecified?: boolean;
            rcrd?: components["schemas"]["TaxRecord1"][] | null;
        };
        TaxParty1: {
            taxId?: string | null;
            regnId?: string | null;
            taxTp?: string | null;
        };
        TaxParty2: {
            taxId?: string | null;
            regnId?: string | null;
            taxTp?: string | null;
            authstn?: components["schemas"]["TaxAuthorisation1"];
        };
        TaxPeriod1: {
            /** Format: date-time */
            yr?: string;
            yrSpecified?: boolean;
            tp?: components["schemas"]["TaxRecordPeriod1Code"];
            tpSpecified?: boolean;
            frToDt?: components["schemas"]["DatePeriodDetails"];
        };
        TaxRecord1: {
            tp?: string | null;
            ctgy?: string | null;
            ctgyDtls?: string | null;
            dbtrSts?: string | null;
            certId?: string | null;
            frmsCd?: string | null;
            prd?: components["schemas"]["TaxPeriod1"];
            taxAmt?: components["schemas"]["TaxAmount1"];
            addtlInf?: string | null;
        };
        TaxRecordDetails1: {
            prd?: components["schemas"]["TaxPeriod1"];
            amt?: components["schemas"]["ActiveOrHistoricCurrencyAndAmount"];
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        TaxRecordPeriod1Code: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17;
        TechnicalInputChannel1Choice: {
            item?: string | null;
            itemElementName?: components["schemas"]["ItemChoiceType9"];
        };
        TotalTransactions2: {
            ttlNtries?: components["schemas"]["NumberAndSumOfTransactions2"];
            ttlCdtNtries?: components["schemas"]["NumberAndSumOfTransactions1"];
            ttlDbtNtries?: components["schemas"]["NumberAndSumOfTransactions1"];
            ttlNtriesPerBkTxCd?: components["schemas"]["TotalsPerBankTransactionCode2"][] | null;
        };
        TotalsPerBankTransactionCode2: {
            nbOfNtries?: string | null;
            /** Format: double */
            sum?: number;
            sumSpecified?: boolean;
            /** Format: double */
            ttlNetNtryAmt?: number;
            ttlNetNtryAmtSpecified?: boolean;
            cdtDbtInd?: components["schemas"]["CreditDebitCode"];
            cdtDbtIndSpecified?: boolean;
            fcstInd?: boolean;
            fcstIndSpecified?: boolean;
            bkTxCd?: components["schemas"]["BankTransactionCodeStructure4"];
            avlbty?: components["schemas"]["CashBalanceAvailability2"][] | null;
        };
        Transaction: {
            /** Format: date-time */
            transactionDate?: string | null;
            /** Format: date-time */
            valueDate?: string | null;
            /** Format: double */
            credit?: number | null;
            /** Format: double */
            debit?: number | null;
            /** Format: double */
            balance?: number | null;
            referenceNumber?: string | null;
            description?: string | null;
            readonly paymentDetails?: string | null;
            beneficiaryRemitter1?: string | null;
            beneficiaryRemitter2?: string | null;
            statusReasonCode?: string | null;
            statusReasonDescription?: string | null;
        };
        TransactionAgents2: {
            dbtrAgt?: components["schemas"]["BranchAndFinancialInstitutionIdentification4"];
            cdtrAgt?: components["schemas"]["BranchAndFinancialInstitutionIdentification4"];
            intrmyAgt1?: components["schemas"]["BranchAndFinancialInstitutionIdentification4"];
            intrmyAgt2?: components["schemas"]["BranchAndFinancialInstitutionIdentification4"];
            intrmyAgt3?: components["schemas"]["BranchAndFinancialInstitutionIdentification4"];
            rcvgAgt?: components["schemas"]["BranchAndFinancialInstitutionIdentification4"];
            dlvrgAgt?: components["schemas"]["BranchAndFinancialInstitutionIdentification4"];
            issgAgt?: components["schemas"]["BranchAndFinancialInstitutionIdentification4"];
            sttlmPlc?: components["schemas"]["BranchAndFinancialInstitutionIdentification4"];
            prtry?: components["schemas"]["ProprietaryAgent2"][] | null;
        };
        TransactionDates2: {
            /** Format: date-time */
            accptncDtTm?: string;
            accptncDtTmSpecified?: boolean;
            /** Format: date-time */
            tradActvtyCtrctlSttlmDt?: string;
            tradActvtyCtrctlSttlmDtSpecified?: boolean;
            /** Format: date-time */
            tradDt?: string;
            tradDtSpecified?: boolean;
            /** Format: date-time */
            intrBkSttlmDt?: string;
            intrBkSttlmDtSpecified?: boolean;
            /** Format: date-time */
            startDt?: string;
            startDtSpecified?: boolean;
            /** Format: date-time */
            endDt?: string;
            endDtSpecified?: boolean;
            /** Format: date-time */
            txDtTm?: string;
            txDtTmSpecified?: boolean;
            prtry?: components["schemas"]["ProprietaryDate2"][] | null;
        };
        TransactionInterest2: {
            amt?: components["schemas"]["ActiveOrHistoricCurrencyAndAmount"];
            cdtDbtInd?: components["schemas"]["CreditDebitCode"];
            tp?: components["schemas"]["InterestType1Choice"];
            rate?: components["schemas"]["Rate3"][] | null;
            frToDt?: components["schemas"]["DateTimePeriodDetails"];
            rsn?: string | null;
        };
        TransactionParty2: {
            initgPty?: components["schemas"]["PartyIdentification32"];
            dbtr?: components["schemas"]["PartyIdentification32"];
            dbtrAcct?: components["schemas"]["CashAccount16"];
            ultmtDbtr?: components["schemas"]["PartyIdentification32"];
            cdtr?: components["schemas"]["PartyIdentification32"];
            cdtrAcct?: components["schemas"]["CashAccount16"];
            ultmtCdtr?: components["schemas"]["PartyIdentification32"];
            tradgPty?: components["schemas"]["PartyIdentification32"];
            prtry?: components["schemas"]["ProprietaryParty2"][] | null;
        };
        TransactionPrice2Choice: {
            items?: unknown[] | null;
        };
        TransactionQuantities1Choice: {
            item?: unknown;
        };
        TransactionReferences2: {
            msgId?: string | null;
            acctSvcrRef?: string | null;
            pmtInfId?: string | null;
            instrId?: string | null;
            endToEndId?: string | null;
            txId?: string | null;
            mndtId?: string | null;
            chqNb?: string | null;
            clrSysRef?: string | null;
            prtry?: components["schemas"]["ProprietaryReference1"];
        };
        /** @enum {string} */
        TriggerType: "Daily" | "Weekly" | "Monthly";
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
