/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    "/api/v1/payments/singles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get payments
         * @description <p>This endpoint is used to read a collection of single payments. The below parameters can be used for filtering the returned payments. If all fields are left blank, the 50 latest payments will be returned. The endpoint returns relevant information about the payments – including the payment status.</p>
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Payment identifier of your payment<br />
                     *     Criteria: Exact match of Payment.PaymentId; all other search parameters will be ignored.
                     * @example 46eb8e11-c77c-4a37-b654-2bf1e341fba9
                     */
                    PaymentId?: string;
                    /**
                     * @description Payment bulk identifier of your payment bulk<br />
                     *     Criteria: Exact match of Payment.DebtorInformation.PaymentBulkId; can be used with ValueDate(From/To), Amount(From/To), InstructedDate(From/To),
                     *     PartialPartyName, PartyAccount, Status, DebtorReference. Any other search parameter will be ignored.
                     * @example 46eb8e11-c77c-4a37-b654-2bf1e341fba9
                     */
                    PaymentBulkId?: string;
                    /**
                     * @description Account Id<br />
                     *     Criteria: Exact match any of<br />
                     *      * Payment.DebtorInformation.AccountId
                     *      * Payment.CreditorInformation.AccountId
                     * @example 720694c8-f6b3-4470-aac9-ffa779946d98
                     */
                    AccountId?: string;
                    /**
                     * @description Your reference<br />
                     *     Criteria: Exact match of Payment.DebtorInformation.Instruction.DebtorReference
                     * @example MyReference1234
                     */
                    DebtorReference?: string;
                    /**
                     * @description IBAN representation of your viban<br />
                     *     Criteria: Exact match any of<br />
                     *      * Payment.DebtorInformation.Viban.Account
                     *      * Payment.CreditorInformation.Viban.Account
                     * @example DK3789001234567890
                     */
                    Viban?: string;
                    /**
                     * @description Classification of payment<br />
                     *     Criteria: Exact match
                     * @example Incoming
                     */
                    Classification?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Enum.PaymentClassification"];
                    /**
                     * @description Comma-separated list of payment statuses. <br />
                     *     If the field LastChangedTimestampFrom is used this field is mandatory. For additional information see LastChangedTimestampFrom.<br />
                     *     Criteria: Exact match
                     * @example MissingFunding
                     */
                    Status?: string;
                    /**
                     * @description Date on which your payment instruction was delivered to Banking Circle<br />
                     *     InstructedDateFrom and InstructedDateTo form a date range<br />
                     *     Criteria: Payment.DebtorInformation.InstructedDate must be equal or later<br />
                     *     Format: ISO 8601 | YYYY-MM-DD<br />
                     * @example 2021-11-01
                     */
                    InstructedDateFrom?: string;
                    /**
                     * @description Date on which your payment instruction was delivered to Banking Circle<br />
                     *     InstructedDateFrom and InstructedDateTo form a date range<br />
                     *     Criteria: Payment.DebtorInformation.InstructedDate must be equal or earlier<br />
                     *     Format: ISO 8601 | YYYY-MM-DD
                     * @example 2021-11-01
                     */
                    InstructedDateTo?: string;
                    /**
                     * @description Requested execution date of your payment instruction<br />
                     *     RequestedExecutionDateFrom and RequestedExecutionDateTo form a date range<br />
                     *     Criteria: Payment.DebtorInformation.Instruction.RequestedExecutionDate must be equal or later<br />
                     *     Format: ISO 8601 | YYYY-MM-DD<br />
                     * @example 2021-11-01
                     */
                    RequestedExecutionDateFrom?: string;
                    /**
                     * @description Requested execution date of your payment instruction<br />
                     *     RequestedExecutionDateFrom and RequestedExecutionDateTo form a date range<br />
                     *     Criteria: Payment.DebtorInformation.Instruction.RequestedExecutionDate must be equal or earlier<br />
                     *     Format: ISO 8601 | YYYY-MM-DD
                     * @example 2021-11-01
                     */
                    RequestedExecutionDateTo?: string;
                    /**
                     * @description Value date on account booking<br />
                     *     ValueDateFrom and ValueDateTo form a date range<br />
                     *     When ValueDateFrom is not provided a default of 6 months before ValueDateTo is enforced. - If ValueDateTo is not provided either<br />
                     *     a default of 6 months before Today's date is enforced.<br />
                     *     Criteria: Payment.DebtorInformation.DebitValueDate or Payment.CreditorInformation.CreditValueDate must be equal or later<br />
                     *     Format: ISO 8601 | YYYY-MM-DD
                     * @example 2021-11-01
                     */
                    ValueDateFrom?: string;
                    /**
                     * @description Value date on account booking(s)<br />
                     *     ValueDateFrom and ValueDateTo form a date range<br />
                     *     Criteria: Payment.DebtorInformation.DebitValueDate or Payment.CreditorInformation.CreditValueDate must be equal or earlier<br />
                     *     Format: ISO 8601 | YYYY-MM-DD
                     * @example 2021-11-01
                     */
                    ValueDateTo?: string;
                    /**
                     * @description Amounts on payment<br />
                     *     AmountFrom and AmountTo form an amount range<br />
                     *     Criteria: Payment.DebtorInformation.DebitAmount.Amount or Payment.CreditorInformation.CreditAmount.Amount or Payment.Transfer.Amount.Amount must be equal or larger<br />
                     *     Value can be negative to locate reversals
                     * @example 159.05
                     */
                    AmountFrom?: number;
                    /**
                     * @description Amounts on payment<br />
                     *     AmountFrom and AmountTo form an amount range<br />
                     *     Criteria: Payment.DebtorInformation.DebitAmount.Amount or Payment.CreditorInformation.CreditAmount.Amount or Payment.Transfer.Amount.Amount must be equal or smaller<br />
                     *     Value can be negative to locate reversals
                     * @example 159.05
                     */
                    AmountTo?: number;
                    /**
                     * @description <b>This Parameter has been deprecated. Please use <i>InstructedDateFrom</i> instead.</b>
                     *     <br />
                     *                 When did the last change occur on the payment<br />
                     *                 Criteria: Payment.LastChangedTimestamp must be equal or larger.<br />
                     *                 Condition: Conditional - To search with LastChangedTimestamp, one or more of the following statuses must be provided in the Status filter.<br />
                     *                  * Rejected
                     *                  * MissingFunding
                     *                  * DeclinedByApprover
                     *                  * DeclinedByAuthorizer
                     *                 <br />Note that this parameter, when combined with status(es), allows searching for data only within the past 30 days.
                     *                 <br />Also note that this parameter will be ignored when used alone, i.e. without 'Status' parameter and the result set will contain 50 (default PageSize) recent payments.
                     * @example 2019-11-08T11:40:25Z
                     */
                    LastChangedTimestampFrom?: string;
                    /**
                     * @description Part of line one of the remittance information<br />
                     *     Criteria: Payment.Transfer.RemittanceInformation.Line1 must contain - case insensitive
                     * @example Invoice 1234567
                     */
                    PartialRemittanceInformationLine1?: string;
                    /**
                     * @description Filter on bookings that contain the entered information in the debtorName or CreditorName.<br />
                     *     Criteria: Payment.Transfer.DebtorName or Payment.<br />
                     *     Transfer.CreditorName must contain - case insensitive.<br />
                     *     If this parameter is used without ValueDate(From/To), the search result will contain payments where ValueDate is between (Now - 3 months) to (Now + 1 months)
                     * @example Hello Ltd.
                     */
                    PartialPartyName?: string;
                    /**
                     * @description Account of the involved parties<br />
                     *     Criteria: Exact match one or more of<br />
                     *      * Payment.DebtorInformation.Account.Account
                     *      * Payment.CreditorInformation.Account.Account
                     *      * Payment.Transfer.DebtorAccount.Account
                     *      * Payment.Transfer.CreditorAccount.Account<br />
                     *     If this parameter is used without ValueDate(From/To), the search result will contain payments where ValueDate is between (Now - 3 months) to (Now + 1 months)
                     * @example DK3789001234567890
                     */
                    PartyAccount?: string;
                    /**
                     * @description Number of pages returned.<br />
                     *     Condition: Valid page number(1 to n)
                     * @example 10
                     */
                    PageNumber?: number;
                    /**
                     * @description No. of items returned per page. <br />
                     *     Condition: Valid page number(1 to 5000)<br />
                     * @example 50
                     */
                    PageSize?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "result": [
                         *         {
                         *           "paymentId": "d2404f75-e011-4683-9d2d-efd30943c6b8",
                         *           "transactionReference": "010F104230918348",
                         *           "concurrencyToken": "1699603388",
                         *           "classification": "Outgoing",
                         *           "subClassification": "Internal",
                         *           "isTraceable": true,
                         *           "status": "Processed",
                         *           "processedTimestamp": "2024-06-14T11:17:42+00:00",
                         *           "latestStatusChangedTimestamp": "2024-06-14T11:17:42+00:00",
                         *           "booked": true,
                         *           "reversalBooked": null,
                         *           "return": null,
                         *           "paymentRail": "Internal",
                         *           "errors": [],
                         *           "lastChangedTimestamp": "2024-06-14T11:17:42+00:00",
                         *           "debtorInformation": {
                         *             "paymentBulkId": null,
                         *             "accountId": "d2404f75-e011-4683-9d2d-efd30943c6b8",
                         *             "account": {
                         *               "account": "DK4589000000010099",
                         *               "financialInstitution": "SXPYDKKKXXX",
                         *               "country": null
                         *             },
                         *             "vibanId": null,
                         *             "viban": null,
                         *             "instructedDate": "2024-06-14T00:00:00+00:00",
                         *             "debitAmount": {
                         *               "currency": "DKK",
                         *               "amount": 5
                         *             },
                         *             "debitValueDate": "2024-06-14T00:00:00+00:00",
                         *             "fxRate": null,
                         *             "instruction": {
                         *               "debtorAccount": {
                         *                 "account": "DK4589000000010099",
                         *                 "financialInstitution": null,
                         *                 "country": null
                         *               },
                         *               "debtorViban": null,
                         *               "debtorReference": "TEST REFERENCE 1",
                         *               "debtorNarrativeToSelf": null,
                         *               "currencyOfTransfer": "DKK",
                         *               "amount": {
                         *                 "currency": "DKK",
                         *                 "amount": 5
                         *               },
                         *               "requestedExecutionDate": "2024-06-14T00:00:00+00:00",
                         *               "chargeBearer": "SHA",
                         *               "remittanceInformation": {
                         *                 "line1": "Remittance information line 1",
                         *                 "line2": "Remittance information line 2",
                         *                 "line3": "Remittance information line 3",
                         *                 "line4": "Remittance information line 4"
                         *               },
                         *               "creditorId": null,
                         *               "creditorAccount": {
                         *                 "account": "DK5589000000011471",
                         *                 "financialInstitution": "SXPYDKKKXXX",
                         *                 "country": "DK"
                         *               },
                         *               "creditorName": "CREDITOR NAME",
                         *               "creditorAddress": {
                         *                 "line1": "CREDITOR ADDRESS 1",
                         *                 "line2": "CREDITOR ADDRESS 2",
                         *                 "line3": null
                         *               },
                         *               "instructedChargeBearer": "SHA",
                         *               "clearingNetwork": null,
                         *               "debtorName": null,
                         *               "debtorAddress": null,
                         *               "ultimateDebtorAccount": null,
                         *               "ultimateDebtorName": null,
                         *               "ultimateDebtorAddress": null,
                         *               "clientCustomerId": null
                         *             }
                         *           },
                         *           "transfer": {
                         *             "debtorAccount": {
                         *               "account": "DK4589000000010099",
                         *               "financialInstitution": "SXPYDKKKXXX",
                         *               "country": "DK"
                         *             },
                         *             "debtorName": "DEBTOR NAME",
                         *             "debtorAddress": null,
                         *             "amount": {
                         *               "currency": "DKK",
                         *               "amount": 5
                         *             },
                         *             "valueDate": "2024-06-14T00:00:00+00:00",
                         *             "chargeBearer": "SHA",
                         *             "remittanceInformation": {
                         *               "line1": "Remittance information line 1",
                         *               "line2": "Remittance information line 2",
                         *               "line3": "Remittance information line 3",
                         *               "line4": "Remittance information line 4"
                         *             },
                         *             "additionalRemittanceInformation": null,
                         *             "creditorAccount": {
                         *               "account": "DK5589000000011471",
                         *               "financialInstitution": "SXPYDKKKXXX",
                         *               "country": "DK"
                         *             },
                         *             "creditorName": "CREDITOR NAME",
                         *             "creditorAddress": {
                         *               "line1": "CREDITOR ADDRESS 1",
                         *               "line2": "CREDITOR ADDRESS 2",
                         *               "line3": null
                         *             },
                         *             "ultimateCreditorAccount": null,
                         *             "instructedChargeBearer": "SHA"
                         *           },
                         *           "creditorInformation": null,
                         *           "statusReasons": null,
                         *           "purposeCode": null,
                         *           "possibleActions": []
                         *         },
                         *         {
                         *           "paymentId": "d2404f75-e011-4683-9d2d-efd30943c6b8",
                         *           "transactionReference": "010F103233198349",
                         *           "concurrencyToken": "1699603388",
                         *           "classification": "Outgoing",
                         *           "subClassification": "Internal",
                         *           "isTraceable": false,
                         *           "status": "Reversed",
                         *           "processedTimestamp": "2024-06-14T11:07:23+00:00",
                         *           "latestStatusChangedTimestamp": "2024-06-14T11:17:42+00:00",
                         *           "booked": true,
                         *           "reversalBooked": true,
                         *           "return": null,
                         *           "errors": [],
                         *           "lastChangedTimestamp": "2024-06-14T11:17:42+00:00",
                         *           "debtorInformation": {
                         *             "paymentBulkId": null,
                         *             "accountId": "d2404f75-e011-4683-9d2d-efd30943c6b8",
                         *             "account": {
                         *               "account": "DK4589000000010099",
                         *               "financialInstitution": "SXPYDKKKXXX",
                         *               "country": null
                         *             },
                         *             "vibanId": null,
                         *             "viban": null,
                         *             "instructedDate": "2024-06-14T00:00:00+00:00",
                         *             "debitAmount": {
                         *               "currency": "DKK",
                         *               "amount": 166
                         *             },
                         *             "debitValueDate": "2024-06-14T00:00:00+00:00",
                         *             "fxRate": null,
                         *             "instruction": {
                         *               "debtorAccount": {
                         *                 "account": "DK4589000000010099",
                         *                 "financialInstitution": null,
                         *                 "country": null
                         *               },
                         *               "debtorViban": null,
                         *               "debtorReference": "TEST REFERENCE 2",
                         *               "debtorNarrativeToSelf": null,
                         *               "currencyOfTransfer": "DKK",
                         *               "amount": {
                         *                 "currency": "DKK",
                         *                 "amount": 166
                         *               },
                         *               "requestedExecutionDate": "2024-06-14T00:00:00+00:00",
                         *               "chargeBearer": "SHA",
                         *               "remittanceInformation": {
                         *                 "line1": "Remittance information line 1",
                         *                 "line2": "Remittance information line 2",
                         *                 "line3": "Remittance information line 3",
                         *                 "line4": "Remittance information line 4"
                         *               },
                         *               "creditorId": null,
                         *               "creditorAccount": {
                         *                 "account": "DK5589000000011471",
                         *                 "financialInstitution": "SXPYDKKKXXX",
                         *                 "country": "DK"
                         *               },
                         *               "creditorName": "CREDITOR NAME",
                         *               "creditorAddress": {
                         *                 "line1": "CREDITOR ADDRESS 1",
                         *                 "line2": "CREDITOR ADDRESS 2",
                         *                 "line3": null
                         *               },
                         *               "instructedChargeBearer": "SHA",
                         *               "clearingNetwork": null,
                         *               "debtorName": null,
                         *               "debtorAddress": null,
                         *               "ultimateDebtorAccount": null,
                         *               "ultimateDebtorName": null,
                         *               "ultimateDebtorAddress": null,
                         *               "clientCustomerId": null
                         *             }
                         *           },
                         *           "transfer": {
                         *             "debtorAccount": {
                         *               "account": "DK4589000000010099",
                         *               "financialInstitution": "SXPYDKKKXXX",
                         *               "country": "DK"
                         *             },
                         *             "debtorName": "DEBTOR NAME",
                         *             "debtorAddress": {
                         *               "line1": "ADD1 000012356",
                         *               "line2": "ADD2 000012356",
                         *               "line3": "ADD3 000012356"
                         *             },
                         *             "amount": {
                         *               "currency": "DKK",
                         *               "amount": 166
                         *             },
                         *             "valueDate": "2024-06-14T00:00:00+00:00",
                         *             "chargeBearer": "SHA",
                         *             "remittanceInformation": {
                         *               "line1": "Remittance information line 1",
                         *               "line2": "Remittance information line 2",
                         *               "line3": "Remittance information line 3",
                         *               "line4": "Remittance information line 4"
                         *             },
                         *             "additionalRemittanceInformation": null,
                         *             "creditorAccount": {
                         *               "account": "DK5589000000011471",
                         *               "financialInstitution": "SXPYDKKKXXX",
                         *               "country": "DK"
                         *             },
                         *             "creditorName": "CREDITOR NAME",
                         *             "creditorAddress": {
                         *               "line1": "CREDITOR ADDRESS 1",
                         *               "line2": "CREDITOR ADDRESS 2",
                         *               "line3": null
                         *             },
                         *             "ultimateCreditorAccount": null,
                         *             "instructedChargeBearer": "SHA"
                         *           },
                         *           "creditorInformation": null,
                         *           "statusReasons": [
                         *             {
                         *               "reasonCode": "10001",
                         *               "reasonDescription": "No data found"
                         *             }
                         *           ],
                         *           "purposeCode": null,
                         *           "possibleActions": []
                         *         },
                         *         {
                         *           "paymentId": "d2404f75-e011-4683-9d2d-efd30943c6b8",
                         *           "transactionReference": "010F312233198348",
                         *           "concurrencyToken": "1699603388",
                         *           "classification": "Outgoing",
                         *           "subClassification": "Internal",
                         *           "isTraceable": true,
                         *           "status": "Processed",
                         *           "processedTimestamp": "2024-06-14T11:17:42+00:00",
                         *           "latestStatusChangedTimestamp": "2024-06-14T11:17:42+00:00",
                         *           "booked": null,
                         *           "reversalBooked": null,
                         *           "return": true,
                         *           "paymentRail": "SEPA (SCT)",
                         *           "errors": null,
                         *           "lastChangedTimestamp": "2024-06-14T11:17:42+00:00",
                         *           "debtorInformation": null,
                         *           "transfer": {
                         *             "debtorAccount": {
                         *               "account": "80732112",
                         *               "financialInstitution": "SFXLGB2LXXX",
                         *               "country": "GB"
                         *             },
                         *             "debtorName": "DEBTOR NAME",
                         *             "debtorAddress": {
                         *               "line1": "DEBTOR ADDRESS 1",
                         *               "line2": "DEBTOR ADDRESS 2",
                         *               "line3": null
                         *             },
                         *             "amount": {
                         *               "currency": "GBP",
                         *               "amount": 3.43
                         *             },
                         *             "valueDate": "2024-06-14T00:00:00+00:00",
                         *             "chargeBearer": "BEN",
                         *             "remittanceInformation": {
                         *               "line1": "Remittance information line 1",
                         *               "line2": "Remittance information line 2",
                         *               "line3": "Remittance information line 3",
                         *               "line4": "Remittance information line 4"
                         *             },
                         *             "additionalRemittanceInformation": {
                         *               "line1": "/RETN/",
                         *               "line2": "/AC01/Incorrect Account Number",
                         *               "line3": "/MREF/010F2102331883HJ",
                         *               "line4": null,
                         *               "line5": null
                         *             },
                         *             "creditorAccount": {
                         *               "account": "DK4589000000010099",
                         *               "financialInstitution": "SXPYDKKKXXX",
                         *               "country": "DK"
                         *             },
                         *             "creditorName": "CREDITOR NAME",
                         *             "creditorAddress": {
                         *               "line1": "CREDITOR ADDRESS 1",
                         *               "line2": "CREDITOR ADDRESS 2",
                         *               "line3": null
                         *             },
                         *             "ultimateCreditorAccount": null,
                         *             "instructedChargeBearer": null
                         *           },
                         *           "creditorInformation": {
                         *             "accountId": "d2404f75-e011-4683-9d2d-efd30943c6b8",
                         *             "account": {
                         *               "account": "DK4589000000010099",
                         *               "financialInstitution": "SXPYDKKKXXX",
                         *               "country": null
                         *             },
                         *             "vibanId": null,
                         *             "viban": null,
                         *             "creditAmount": {
                         *               "currency": "DKK",
                         *               "amount": 30.31
                         *             },
                         *             "creditValueDate": "2024-06-14T00:00:00+00:00",
                         *             "fxRate": 8.8386834
                         *           },
                         *           "statusReasons": null,
                         *           "purposeCode": null,
                         *           "possibleActions": []
                         *         }
                         *       ],
                         *       "pageInfo": {
                         *         "currentPage": 1,
                         *         "pageSize": 50
                         *       }
                         *     } */
                        "application/json": {
                            /** IEnumerable */
                            Result?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Dto.Payments.Payment"][];
                            PageInfo?: components["schemas"]["BankingCircle.Utilities.Api.PageInfo"];
                        };
                    };
                };
                /** @description Bad request.<br />Request is not correctly formulated. Goes for both Header, Query and Body. Verify the error description and properties. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "type": "https://tools.ietf.org/html/rfc7231#section-6.5.1",
                         *       "title": "One or more validation errors occurred.",
                         *       "status": 400,
                         *       "errors": {
                         *         "PaymentId": [
                         *           "The value '9899660E-BFBF-4537-A4CB-D13FDasf09D9C93' is not valid for PaymentId."
                         *         ]
                         *       }
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.GetPaymentsSinglesError400Dto"];
                    };
                };
                /** @description Forbidden. The server understood the request, but is refusing it or the access is not allowed, i.e. if resource exists but calling user does not have rights to access it. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.NoResponse"];
                    };
                };
                /** @description Not found. There is no resource behind the URL, i.e. requesting data on an account that does not exist. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "errors": [
                         *         {
                         *           "httpStatus": 404,
                         *           "errorCode": null,
                         *           "keyOrMessage": "Not Found",
                         *           "interpolations": [],
                         *           "details": null,
                         *           "exception": null
                         *         }
                         *       ]
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.PaymentsError404Dto"];
                    };
                };
                /** @description Internal Server Error. Something unexpected happened on BC Connect side. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "errors": [
                         *         {
                         *           "httpStatus": 500,
                         *           "errorCode": null,
                         *           "keyOrMessage": "Internal server error",
                         *           "interpolations": [],
                         *           "details": null,
                         *           "exception": null
                         *         }
                         *       ]
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.PaymentsError500Dto"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Make a payment
         * @description <p>The endpoint is used for initiating a single payment.</p>
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /**
                     * @description Unique reference of the HTTP request.<br />If left blank this field will be populated with a GUID.
                     * @example 6198eb60-d1dd-4aad-9bbd-b01a49214e62
                     */
                    "X-MessageReference"?: string;
                    /** @description Unique value generated by the user which the API uses to recognize subsequent retries of the same request.<br />This field is limited to a maximum of 100 characters, if not upheld the API will return with an error 400 - Bad Request.<br /><i>Example: 2b7b05ad-4411-4a19-8c95-2508b17e0fd8</i> */
                    "Idempotency-Key"?: string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description Payment instruction */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["BankingCircle.Payments.DomainServices.Public.Dto.Payments.PaymentCreationRequest"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "paymentId": "d2404f75-e011-4683-9d2d-efd30943c6b8",
                         *       "status": "PendingProcessing"
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.Payment.PaymentCreationResponse"];
                    };
                };
                /** @description Bad request.<br />Request is not correctly formulated. Goes for both Header, Query and Body. Verify the error description and properties. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.Payment.PaymentCreationFailureResponse"];
                    };
                };
                /** @description Forbidden. The server understood the request, but is refusing it or the access is not allowed, i.e. if resource exists but calling user does not have rights to access it. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.NoResponse"];
                    };
                };
                /** @description Not found. There is no resource behind the URL, i.e. requesting data on an account that does not exist. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "errors": [
                         *         {
                         *           "httpStatus": 404,
                         *           "errorCode": null,
                         *           "keyOrMessage": "Not Found",
                         *           "interpolations": [],
                         *           "details": null,
                         *           "exception": null
                         *         }
                         *       ]
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.PaymentsError404Dto"];
                    };
                };
                /** @description Conflict. Idempotency-key violation. Request being handled. */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "paymentId": "20f1dd79-1ec9-49dc-8d14-1b2c2f0ab89b",
                         *       "propertyName": null,
                         *       "errorCode": "DuplicateIdempotencyKey",
                         *       "errorDescription": "Duplicate Idempotency Key has been detected"
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.GetPaymentsSinglesIdempotencyError409Dto"];
                    };
                };
                /** @description Internal Server Error. Something unexpected happened on BC Connect side. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "errors": [
                         *         {
                         *           "httpStatus": 500,
                         *           "errorCode": null,
                         *           "keyOrMessage": "Internal server error",
                         *           "interpolations": [],
                         *           "details": null,
                         *           "exception": null
                         *         }
                         *       ]
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.PaymentsError500Dto"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payments/singles/{payment-id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get status of a payment
         * @description <p>This endpoint is used for reading the status of a specified payment. <br>The endpoint requires the ID of the payment and returns the status only.</p>
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Payment identifier | Payment.paymentId
                     * @example 6198eb60-d1dd-4aad-9bbd-b01a49214e62
                     */
                    "payment-id": string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "status": "PendingProcessing"
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.PaymentStatusResponseExampleData"];
                    };
                };
                /** @description Forbidden. The server understood the request, but is refusing it or the access is not allowed, i.e. if resource exists but calling user does not have rights to access it. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.NoResponse"];
                    };
                };
                /** @description Not found. There is no resource behind the URL, i.e. requesting data on an account that does not exist. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "errors": [
                         *         {
                         *           "httpStatus": 404,
                         *           "errorCode": null,
                         *           "keyOrMessage": "Not Found",
                         *           "interpolations": [],
                         *           "details": null,
                         *           "exception": null
                         *         }
                         *       ]
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.PaymentsError404Dto"];
                    };
                };
                /** @description Internal Server Error. Something unexpected happened on BC Connect side. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "errors": [
                         *         {
                         *           "httpStatus": 500,
                         *           "errorCode": null,
                         *           "keyOrMessage": "Internal server error",
                         *           "interpolations": [],
                         *           "details": null,
                         *           "exception": null
                         *         }
                         *       ]
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.PaymentsError500Dto"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payments/singles/{payment-id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get details of a payment by payment id
         * @description <p>This endpoint is used for reading a single specified payment. <br>The endpoint requires the ID of the payment and returns relevant information about the payment – including the payment status.</p>
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Payment identifier | Payment.paymentId
                     * @example 6198eb60-d1dd-4aad-9bbd-b01a49214e62
                     */
                    "payment-id": string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "paymentId": "d2404f75-e011-4683-9d2d-efd30943c6b8",
                         *       "transactionReference": "010F104233198348",
                         *       "concurrencyToken": "1699603388",
                         *       "classification": "Outgoing",
                         *       "subClassification": "Internal",
                         *       "isTraceable": true,
                         *       "status": "Processed",
                         *       "processedTimestamp": "2024-06-14T11:17:42+00:00",
                         *       "latestStatusChangedTimestamp": "2024-06-14T11:17:42+00:00",
                         *       "booked": true,
                         *       "reversalBooked": null,
                         *       "return": null,
                         *       "paymentRail": "Internal",
                         *       "errors": [],
                         *       "lastChangedTimestamp": "2024-06-14T11:17:42+00:00",
                         *       "debtorInformation": {
                         *         "paymentBulkId": null,
                         *         "accountId": "d2404f75-e011-4683-9d2d-efd30943c6b8",
                         *         "account": {
                         *           "account": "DK4589000000010099",
                         *           "financialInstitution": "SXPYDKKKXXX",
                         *           "country": null
                         *         },
                         *         "vibanId": null,
                         *         "viban": null,
                         *         "instructedDate": "2024-06-14T00:00:00+00:00",
                         *         "debitAmount": {
                         *           "currency": "DKK",
                         *           "amount": 5
                         *         },
                         *         "debitValueDate": "2024-06-14T00:00:00+00:00",
                         *         "fxRate": null,
                         *         "instruction": {
                         *           "debtorAccount": {
                         *             "account": "DK4589000000010099",
                         *             "financialInstitution": null,
                         *             "country": null
                         *           },
                         *           "debtorViban": null,
                         *           "debtorReference": "TEST REFERENCE 1",
                         *           "debtorNarrativeToSelf": null,
                         *           "currencyOfTransfer": "DKK",
                         *           "amount": {
                         *             "currency": "DKK",
                         *             "amount": 5
                         *           },
                         *           "requestedExecutionDate": "2024-06-14T00:00:00+00:00",
                         *           "chargeBearer": "SHA",
                         *           "remittanceInformation": {
                         *             "line1": "Remittance information line 1",
                         *             "line2": "Remittance information line 2",
                         *             "line3": "Remittance information line 3",
                         *             "line4": "Remittance information line 4"
                         *           },
                         *           "creditorId": null,
                         *           "creditorAccount": {
                         *             "account": "DK5589000000011471",
                         *             "financialInstitution": "SXPYDKKKXXX",
                         *             "country": "DK"
                         *           },
                         *           "creditorName": "CREDITOR NAME",
                         *           "creditorAddress": {
                         *             "line1": "CREDITOR ADDRESS 1",
                         *             "line2": "CREDITOR ADDRESS 2",
                         *             "line3": null
                         *           },
                         *           "instructedChargeBearer": "SHA",
                         *           "clearingNetwork": null,
                         *           "debtorName": null,
                         *           "debtorAddress": null,
                         *           "ultimateDebtorAccount": null,
                         *           "ultimateDebtorName": null,
                         *           "ultimateDebtorAddress": null,
                         *           "clientCustomerId": null
                         *         }
                         *       },
                         *       "transfer": {
                         *         "debtorAccount": {
                         *           "account": "DK4589000000010099",
                         *           "financialInstitution": "SXPYDKKKXXX",
                         *           "country": "DK"
                         *         },
                         *         "debtorName": "DEBTOR NAME",
                         *         "debtorAddress": null,
                         *         "amount": {
                         *           "currency": "DKK",
                         *           "amount": 5
                         *         },
                         *         "valueDate": "2024-06-14T00:00:00+00:00",
                         *         "chargeBearer": "SHA",
                         *         "remittanceInformation": {
                         *           "line1": "Remittance information line 1",
                         *           "line2": "Remittance information line 2",
                         *           "line3": "Remittance information line 3",
                         *           "line4": "Remittance information line 4"
                         *         },
                         *         "additionalRemittanceInformation": null,
                         *         "creditorAccount": {
                         *           "account": "DK5589000000011471",
                         *           "financialInstitution": "SXPYDKKKXXX",
                         *           "country": "DK"
                         *         },
                         *         "creditorName": "CREDITOR NAME",
                         *         "creditorAddress": {
                         *           "line1": "CREDITOR ADDRESS 1",
                         *           "line2": "CREDITOR ADDRESS 2",
                         *           "line3": null
                         *         },
                         *         "ultimateCreditorAccount": null,
                         *         "instructedChargeBearer": "SHA"
                         *       },
                         *       "creditorInformation": null,
                         *       "statusReasons": null,
                         *       "purposeCode": null,
                         *       "possibleActions": []
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.DomainServices.Public.Dto.Payments.Payment"];
                    };
                };
                /** @description Bad request.<br />Request is not correctly formulated. Goes for both Header, Query and Body. Verify the error description and properties. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "type": "https://tools.ietf.org/html/rfc7231#section-6.5.1",
                         *       "title": "One or more validation errors occurred.",
                         *       "status": 400,
                         *       "errors": {
                         *         "payment-id": [
                         *           "The value '460C7840-2600-4418-D-B026-C7F38DA3A737' is not valid."
                         *         ]
                         *       }
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.GetPaymentByIdError400Dto"];
                    };
                };
                /** @description Forbidden. The server understood the request, but is refusing it or the access is not allowed, i.e. if resource exists but calling user does not have rights to access it. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.NoResponse"];
                    };
                };
                /** @description Not found. There is no resource behind the URL, i.e. requesting data on an account that does not exist. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "errors": [
                         *         {
                         *           "httpStatus": 404,
                         *           "errorCode": null,
                         *           "keyOrMessage": "Not Found",
                         *           "interpolations": [],
                         *           "details": null,
                         *           "exception": null
                         *         }
                         *       ]
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.PaymentsError404Dto"];
                    };
                };
                /** @description Internal Server Error. Something unexpected happened on BC Connect side. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "errors": [
                         *         {
                         *           "httpStatus": 500,
                         *           "errorCode": null,
                         *           "keyOrMessage": "Internal server error",
                         *           "interpolations": [],
                         *           "details": null,
                         *           "exception": null
                         *         }
                         *       ]
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.PaymentsError500Dto"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payments/singles/{payment-id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Initiate the cancellation of an active payment process.
         *     If successful, the payment will have a final state with status = Cancelled */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Payment identifier | Payment.paymentId */
                    "payment-id": string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad request.<br />Request is not correctly formulated. Goes for both Header, Query and Body. Verify the error description and properties. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "errors": [
                         *         {
                         *           "errorCode": "UnsupportedPaymentType",
                         *           "errorDescription": "Requested action is not supported for this type of payment"
                         *         }
                         *       ]
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.Payment.PaymentCancelFailureResponse"];
                    };
                };
                /** @description Forbidden. The server understood the request, but is refusing it or the access is not allowed, i.e. if resource exists but calling user does not have rights to access it. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.NoResponse"];
                    };
                };
                /** @description Not found. There is no resource behind the URL, i.e. requesting data on an account that does not exist. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "errors": [
                         *         {
                         *           "httpStatus": 404,
                         *           "errorCode": null,
                         *           "keyOrMessage": "Not Found",
                         *           "interpolations": [],
                         *           "details": null,
                         *           "exception": null
                         *         }
                         *       ]
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.PaymentsError404Dto"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payments/singles/{payment-id}/reject": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Initiate the rejection of an active payment process for a direct debit */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Payment identifier | Payment.paymentId */
                    "payment-id": string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad request.<br />Request is not correctly formulated. Goes for both Header, Query and Body. Verify the error description and properties. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.Payment.PaymentRejectFailureResponse"];
                    };
                };
                /** @description Forbidden. The server understood the request, but is refusing it or the access is not allowed, i.e. if resource exists but calling user does not have rights to access it. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.NoResponse"];
                    };
                };
                /** @description Not found. There is no resource behind the URL, i.e. requesting data on an account that does not exist. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "errors": [
                         *         {
                         *           "httpStatus": 404,
                         *           "errorCode": null,
                         *           "keyOrMessage": "Not Found",
                         *           "interpolations": [],
                         *           "details": null,
                         *           "exception": null
                         *         }
                         *       ]
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.PaymentsError404Dto"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payments/singles/{payment-id}/mt103": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a MT103 payment confirmation
         * @description
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Payment identifier | Payment.paymentId
                     * @example 6198eb61-d1ed-4aad-9bbd-b01a49214e63
                     */
                    "payment-id": string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.Payment.Mt103PaymentResponse"];
                    };
                };
                /** @description Bad request.<br />Request is not correctly formulated. Goes for both Header, Query and Body. Verify the error description and properties. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "type": "https://tools.ietf.org/html/rfc7231#section-6.5.1",
                         *       "title": "One or more validation errors occurred.",
                         *       "status": 400,
                         *       "errors": {
                         *         "payment-id": [
                         *           "The value '460C7840-2600-4418-D-B026-C7F38DA3A737' is not valid."
                         *         ]
                         *       }
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.GetPaymentByIdError400Dto"];
                    };
                };
                /** @description Forbidden. The server understood the request, but is refusing it or the access is not allowed, i.e. if resource exists but calling user does not have rights to access it. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.NoResponse"];
                    };
                };
                /** @description Not found. There is no resource behind the URL, i.e. requesting data on an account that does not exist. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "type": "https://tools.ietf.org/html/rfc7231#section-6.5.1",
                         *       "title": "Not Found",
                         *       "status": 404,
                         *       "errors": {}
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.Mt103PaymentErrorDto"];
                    };
                };
                /** @description Internal Server Error. Something unexpected happened on BC Connect side. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "errors": [
                         *         {
                         *           "httpStatus": 500,
                         *           "errorCode": null,
                         *           "keyOrMessage": "Internal server error",
                         *           "interpolations": [],
                         *           "details": null,
                         *           "exception": null
                         *         }
                         *       ]
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.PaymentsError500Dto"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payments/singles/transactionreference/{transactionreference}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get details of a payment by transaction reference number
         * @description <p>This endpoint is used for reading a single specified payment.<br>The endpoint requires the TransactionReference of the payment and returns relevant information about the payment- including the payment status.</p>
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Transaction reference (also known as contract reference) for the payment | Payment.TransactionReference
                     * @example 010F101000918348
                     */
                    transactionreference: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "paymentId": "d2404f75-e011-4683-9d2d-efd30943c6b8",
                         *       "transactionReference": "010F104233198348",
                         *       "concurrencyToken": "1699603388",
                         *       "classification": "Outgoing",
                         *       "subClassification": "Internal",
                         *       "isTraceable": true,
                         *       "status": "Processed",
                         *       "processedTimestamp": "2024-06-14T11:17:42+00:00",
                         *       "latestStatusChangedTimestamp": "2024-06-14T11:17:42+00:00",
                         *       "booked": true,
                         *       "reversalBooked": null,
                         *       "return": null,
                         *       "paymentRail": "Internal",
                         *       "errors": [],
                         *       "lastChangedTimestamp": "2024-06-14T11:17:42+00:00",
                         *       "debtorInformation": {
                         *         "paymentBulkId": null,
                         *         "accountId": "d2404f75-e011-4683-9d2d-efd30943c6b8",
                         *         "account": {
                         *           "account": "DK4589000000010099",
                         *           "financialInstitution": "SXPYDKKKXXX",
                         *           "country": null
                         *         },
                         *         "vibanId": null,
                         *         "viban": null,
                         *         "instructedDate": "2024-06-14T00:00:00+00:00",
                         *         "debitAmount": {
                         *           "currency": "DKK",
                         *           "amount": 5
                         *         },
                         *         "debitValueDate": "2024-06-14T00:00:00+00:00",
                         *         "fxRate": null,
                         *         "instruction": {
                         *           "debtorAccount": {
                         *             "account": "DK4589000000010099",
                         *             "financialInstitution": null,
                         *             "country": null
                         *           },
                         *           "debtorViban": null,
                         *           "debtorReference": "TEST REFERENCE 1",
                         *           "debtorNarrativeToSelf": null,
                         *           "currencyOfTransfer": "DKK",
                         *           "amount": {
                         *             "currency": "DKK",
                         *             "amount": 5
                         *           },
                         *           "requestedExecutionDate": "2024-06-14T00:00:00+00:00",
                         *           "chargeBearer": "SHA",
                         *           "remittanceInformation": {
                         *             "line1": "Remittance information line 1",
                         *             "line2": "Remittance information line 2",
                         *             "line3": "Remittance information line 3",
                         *             "line4": "Remittance information line 4"
                         *           },
                         *           "creditorId": null,
                         *           "creditorAccount": {
                         *             "account": "DK5589000000011471",
                         *             "financialInstitution": "SXPYDKKKXXX",
                         *             "country": "DK"
                         *           },
                         *           "creditorName": "CREDITOR NAME",
                         *           "creditorAddress": {
                         *             "line1": "CREDITOR ADDRESS 1",
                         *             "line2": "CREDITOR ADDRESS 2",
                         *             "line3": null
                         *           },
                         *           "instructedChargeBearer": "SHA",
                         *           "clearingNetwork": null,
                         *           "debtorName": null,
                         *           "debtorAddress": null,
                         *           "ultimateDebtorAccount": null,
                         *           "ultimateDebtorName": null,
                         *           "ultimateDebtorAddress": null,
                         *           "clientCustomerId": null
                         *         }
                         *       },
                         *       "transfer": {
                         *         "debtorAccount": {
                         *           "account": "DK4589000000010099",
                         *           "financialInstitution": "SXPYDKKKXXX",
                         *           "country": "DK"
                         *         },
                         *         "debtorName": "DEBTOR NAME",
                         *         "debtorAddress": null,
                         *         "amount": {
                         *           "currency": "DKK",
                         *           "amount": 5
                         *         },
                         *         "valueDate": "2024-06-14T00:00:00+00:00",
                         *         "chargeBearer": "SHA",
                         *         "remittanceInformation": {
                         *           "line1": "Remittance information line 1",
                         *           "line2": "Remittance information line 2",
                         *           "line3": "Remittance information line 3",
                         *           "line4": "Remittance information line 4"
                         *         },
                         *         "additionalRemittanceInformation": null,
                         *         "creditorAccount": {
                         *           "account": "DK5589000000011471",
                         *           "financialInstitution": "SXPYDKKKXXX",
                         *           "country": "DK"
                         *         },
                         *         "creditorName": "CREDITOR NAME",
                         *         "creditorAddress": {
                         *           "line1": "CREDITOR ADDRESS 1",
                         *           "line2": "CREDITOR ADDRESS 2",
                         *           "line3": null
                         *         },
                         *         "ultimateCreditorAccount": null,
                         *         "instructedChargeBearer": "SHA"
                         *       },
                         *       "creditorInformation": null,
                         *       "statusReasons": null,
                         *       "purposeCode": null,
                         *       "possibleActions": []
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.DomainServices.Public.Dto.Payments.Payment"];
                    };
                };
                /** @description Bad request.<br />Request is not correctly formulated. Goes for both Header, Query and Body. Verify the error description and properties. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "type": "https://tools.ietf.org/html/rfc7231#section-6.5.1",
                         *       "title": "One or more validation errors occurred.",
                         *       "status": 400,
                         *       "errors": {
                         *         "payment-id": [
                         *           "The value '460C7840-2600-4418-D-B026-C7F38DA3A737' is not valid."
                         *         ]
                         *       }
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.GetPaymentByIdError400Dto"];
                    };
                };
                /** @description Forbidden. The server understood the request, but is refusing it or the access is not allowed, i.e. if resource exists but calling user does not have rights to access it. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.NoResponse"];
                    };
                };
                /** @description Not found. There is no resource behind the URL, i.e. requesting data on an account that does not exist. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "errors": [
                         *         {
                         *           "httpStatus": 404,
                         *           "errorCode": null,
                         *           "keyOrMessage": "Not Found",
                         *           "interpolations": [],
                         *           "details": null,
                         *           "exception": null
                         *         }
                         *       ]
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.PaymentsError404Dto"];
                    };
                };
                /** @description Internal Server Error. Something unexpected happened on BC Connect side. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "errors": [
                         *         {
                         *           "httpStatus": 500,
                         *           "errorCode": null,
                         *           "keyOrMessage": "Internal server error",
                         *           "interpolations": [],
                         *           "details": null,
                         *           "exception": null
                         *         }
                         *       ]
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.PaymentsError500Dto"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payments/bulks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get bulk files
         * @description
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Payment bulk identifier of your payment bulk<br />
                     *     Criteria: Exact match of PaymentBulk.PaymentBulkId
                     * @example 46eb8e11-c77c-4a37-b654-2bf1e341fba9
                     */
                    PaymentBulkId?: string;
                    /**
                     * @description Aggregated status of instructions in the bulk<br />
                     *     Criteria: Exact match
                     * @example PendingApproval
                     */
                    Status?: components["schemas"]["BankingCircle.Payments.Api.Enum.PaymentBulkStatus"];
                    /**
                     * @description Date on which your payment bulk instruction was delivered to Banking Circle<br />
                     *     InstructedDateFrom and InstructedDateTo form a date range<br />
                     *     Criteria: PaymentBulk.InstructedDate must be equal or later<br />
                     *     Format: ISO 8601 | YYYY-MM-DD<br />
                     * @example 2021-11-01
                     */
                    InstructedDateFrom?: string;
                    /**
                     * @description Date on which your payment bulk instruction was delivered to Banking Circle<br />
                     *     InstructedDateFrom and InstructedDateTo form a date range<br />
                     *     Criteria: PaymentBulk.InstructedDate must be equal or earlier<br />
                     *     Format: ISO 8601 | YYYY-MM-DD<br />
                     * @example 2021-11-01
                     */
                    InstructedDateTo?: string;
                    /**
                     * @description Aggregated amount of payments in payment bulk<br />
                     *     AggregatedAmountFrom and AggregatedAmountTo form an amount range<br />
                     *     Criteria: PaymentBulk.PaymentStatistics.AggregatedAmount must be equal or larger
                     * @example 100000
                     */
                    AggregatedAmountFrom?: number;
                    /**
                     * @description Aggregated amount of payments in payment bulk<br />
                     *     AggregatedAmountFrom and AggregatedAmountTo form an amount range<br />
                     *     Criteria: PaymentBulk.PaymentStatistics.AggregatedAmount must be equal or smaller
                     * @example 100000
                     */
                    AggregatedAmountTo?: number;
                    /**
                     * @description Number of pages returned.<br />
                     *     Condition: Valid page number(1 to n).
                     * @example 10
                     */
                    PageNumber?: number;
                    /**
                     * @description No. of items returned per page.<br />
                     *     Condition: Valid page number(1 to 100)
                     * @example 50
                     */
                    PageSize?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "result": [
                         *         {
                         *           "paymentBulkId": "d2404f75-e011-4683-9d2d-efd30943c6b8",
                         *           "concurrencyToken": "1699603388",
                         *           "status": "PendingProcessing",
                         *           "instructedDate": "2024-06-14T00:00:00+00:00",
                         *           "paymentStatistics": {
                         *             "processed": 10,
                         *             "pendingProcessing": 10,
                         *             "rejected": 0,
                         *             "missingFunding": 0,
                         *             "cancelled": 0,
                         *             "pendingApproval": 0,
                         *             "pendingSca": 0,
                         *             "scaDeclined": 0,
                         *             "scaExpired": 0,
                         *             "declinedByApprover": 0,
                         *             "reversed": 0,
                         *             "total": 20,
                         *             "aggregatedAmount": 244
                         *           }
                         *         }
                         *       ],
                         *       "pageInfo": {
                         *         "currentPage": 1,
                         *         "pageSize": 50
                         *       }
                         *     } */
                        "application/json": {
                            /** IEnumerable */
                            Result?: components["schemas"]["BankingCircle.Payments.Api.Data.PaymentBulk.PaymentBulk"][];
                            PageInfo?: components["schemas"]["BankingCircle.Utilities.Api.PageInfo"];
                        };
                    };
                };
                /** @description Bad request.<br />Request is not correctly formulated. Goes for both Header, Query and Body. Verify the error description and properties. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.GetPaymentBulksValidationError400Dto"];
                    };
                };
                /** @description Forbidden. The server understood the request, but is refusing it or the access is not allowed, i.e. if resource exists but calling user does not have rights to access it. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.NoResponse"];
                    };
                };
                /** @description Not found. There is no resource behind the URL, i.e. requesting data on an account that does not exist. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "errors": [
                         *         {
                         *           "httpStatus": 404,
                         *           "errorCode": null,
                         *           "keyOrMessage": "Not Found",
                         *           "interpolations": [],
                         *           "details": null,
                         *           "exception": null
                         *         }
                         *       ]
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.PaymentsError404Dto"];
                    };
                };
                /** @description Internal Server Error. Something unexpected happened on BC Connect side. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "errors": [
                         *         {
                         *           "httpStatus": 500,
                         *           "errorCode": null,
                         *           "keyOrMessage": "Internal server error",
                         *           "interpolations": [],
                         *           "details": null,
                         *           "exception": null
                         *         }
                         *       ]
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.PaymentsError500Dto"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Make bulk payments
         * @description <p>The endpoint is used to initiate a bulk payment, which allows for multiple payments to be initiated at the same time. Read more about bulk payments here.</p>
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /**
                     * @description Specification of the content type.<br />Currently supported type is "text/csvv0"
                     * @example text/csvv0
                     */
                    "X-Content-Type"?: string;
                    /**
                     * @description Unique reference of the HTTP request.If left blank this field will be populated with a GUID.
                     * @example 6198eb60-d1dd-4aad-9bbd-b01a49214e62
                     */
                    "X-MessageReference"?: string;
                    /**
                     * @description Channel reference of the payment
                     * @example channel/api
                     */
                    "X-Channel"?: string;
                    /** @description Allow Bulk payment to be partially created. Default: false */
                    ProceedWithErrors?: boolean;
                    /** @description Unique value generated by the user which the API uses to recognize subsequent retries of the same request.<br />This field is limited to a maximum of 100 characters, if not upheld the API will return with an error 400 - Bad Request.<br /><i>Example: 2b7b05ad-4411-4a19-8c95-2508b17e0fd8</i> */
                    "Idempotency-Key"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "multipart/form-data": {
                        /**
                         * IFormFile
                         * Format: binary
                         * @description Stream with your bulk payload
                         */
                        file?: string;
                    };
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "paymentBulkId": "d2404f75-e011-4683-9d2d-efd30943c6b8",
                         *       "status": "PendingProcessing"
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.PaymentBulk.PaymentBulkCreationResponse"];
                    };
                };
                /** @description Bad request.<br />Request is not correctly formulated. Goes for both Header, Query and Body. Verify the error description and properties. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.CreatePaymentBulkError400Dto"];
                    };
                };
                /** @description Forbidden. The server understood the request, but is refusing it or the access is not allowed, i.e. if resource exists but calling user does not have rights to access it. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.NoResponse"];
                    };
                };
                /** @description Not found. There is no resource behind the URL, i.e. requesting data on an account that does not exist or dont have permissions to. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "errors": [
                         *         {
                         *           "httpStatus": 404,
                         *           "errorCode": null,
                         *           "keyOrMessage": "Not Found",
                         *           "interpolations": [],
                         *           "details": null,
                         *           "exception": null
                         *         }
                         *       ]
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.PaymentsError404Dto"];
                    };
                };
                /** @description Conflict. Idempotency-key violation. Request being handled. */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "type": "Csv",
                         *       "errors": [
                         *         {
                         *           "paymentBulkId": "dc0bd1aa-8491-461a-b1c9-23fdd2007be8",
                         *           "fieldIndex": 0,
                         *           "elementIndex": 0,
                         *           "errorCode": "DuplicateFileUpload",
                         *           "errorDescription": "Identical Idempotency Key is already uploaded once for this user."
                         *         }
                         *       ],
                         *       "canProceedWithErrors": false
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.GetPaymentsBulkIdempotencyError409Dto"];
                    };
                };
                /** @description Payload too large.<br />Size of request or response is too big and therefore rejected */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unsupported media type.<br />Incorrect media type provided in Request Header “Accept” parameter. */
                415: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error. Something unexpected happened on BC Connect side. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "errors": [
                         *         {
                         *           "httpStatus": 500,
                         *           "errorCode": null,
                         *           "keyOrMessage": "Internal server error",
                         *           "interpolations": [],
                         *           "details": null,
                         *           "exception": null
                         *         }
                         *       ]
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.PaymentsError500Dto"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payments/bulks/{payment-bulk-id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get single bulk file */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Payment Bulk identifier | PaymentBulk.paymentBulkId
                     * @example 6198eb60-d1dd-4aad-9bbd-b01a49214e62
                     */
                    "payment-bulk-id": string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "paymentBulkId": "d2404f75-e011-4683-9d2d-efd30943c6b8",
                         *       "concurrencyToken": "1699603388",
                         *       "status": "Approved",
                         *       "instructedDate": "2024-06-14T00:00:00+00:00",
                         *       "paymentStatistics": {
                         *         "processed": 232,
                         *         "pendingProcessing": 0,
                         *         "rejected": 0,
                         *         "missingFunding": 0,
                         *         "cancelled": 0,
                         *         "pendingApproval": 0,
                         *         "pendingSca": 0,
                         *         "scaDeclined": 0,
                         *         "scaExpired": 0,
                         *         "declinedByApprover": 0,
                         *         "reversed": 0,
                         *         "total": 232,
                         *         "aggregatedAmount": 274933
                         *       }
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.PaymentBulk.PaymentBulk"];
                    };
                };
                /** @description Forbidden. The server understood the request, but is refusing it or the access is not allowed, i.e. if resource exists but calling user does not have rights to access it. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.NoResponse"];
                    };
                };
                /** @description Not found. There is no resource behind the URL, i.e. requesting data on an account that does not exist. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "errors": [
                         *         {
                         *           "httpStatus": 404,
                         *           "errorCode": null,
                         *           "keyOrMessage": "Not Found",
                         *           "interpolations": [],
                         *           "details": null,
                         *           "exception": null
                         *         }
                         *       ]
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.PaymentsError404Dto"];
                    };
                };
                /** @description Internal Server Error. Something unexpected happened on BC Connect side. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "errors": [
                         *         {
                         *           "httpStatus": 500,
                         *           "errorCode": null,
                         *           "keyOrMessage": "Internal server error",
                         *           "interpolations": [],
                         *           "details": null,
                         *           "exception": null
                         *         }
                         *       ]
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.PaymentsError500Dto"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payments/bulks/{payment-bulk-id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get status of single bulk payment */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Payment Bulk identifier | PaymentBulk.paymentBulkId
                     * @example 6198eb60-d1dd-4aad-9bbd-b01a49214e62
                     */
                    "payment-bulk-id": string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "status": "PendingProcessing"
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.PaymentBulkStatusExampleData"];
                    };
                };
                /** @description Forbidden. The server understood the request, but is refusing it or the access is not allowed, i.e. if resource exists but calling user does not have rights to access it. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.NoResponse"];
                    };
                };
                /** @description Not found. There is no resource behind the URL, i.e. requesting data on an account that does not exist. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "errors": [
                         *         {
                         *           "httpStatus": 404,
                         *           "errorCode": null,
                         *           "keyOrMessage": "Not Found",
                         *           "interpolations": [],
                         *           "details": null,
                         *           "exception": null
                         *         }
                         *       ]
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.PaymentsError404Dto"];
                    };
                };
                /** @description Internal Server Error. Something unexpected happened on BC Connect side. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "errors": [
                         *         {
                         *           "httpStatus": 500,
                         *           "errorCode": null,
                         *           "keyOrMessage": "Internal server error",
                         *           "interpolations": [],
                         *           "details": null,
                         *           "exception": null
                         *         }
                         *       ]
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.PaymentsError500Dto"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payments/bulks/{payment-bulk-id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Initiate the cancellation of active payment processes, belonging to the same bulk.
         *     If successful, payments eligible for cancellation will be cancelled and have a final state with status = Cancelled. */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Payment Bulk identifier | PaymentBulk.paymentBulkId */
                    "payment-bulk-id": string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad request.<br />Request is not correctly formulated. Goes for both Header, Query and Body. Verify the error description and properties. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.PaymentBulk.PaymentBulkCancelFailureResponse"];
                    };
                };
                /** @description Forbidden. The server understood the request, but is refusing it or the access is not allowed, i.e. if resource exists but calling user does not have rights to access it. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.NoResponse"];
                    };
                };
                /** @description Not found. There is no resource behind the URL, i.e. requesting data on an account that does not exist. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "errors": [
                         *         {
                         *           "httpStatus": 404,
                         *           "errorCode": null,
                         *           "keyOrMessage": "Not Found",
                         *           "interpolations": [],
                         *           "details": null,
                         *           "exception": null
                         *         }
                         *       ]
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.PaymentsError404Dto"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payments/fi-to-fi-customer-credit-transfer-initiation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Make an agency or correspondent banking payment
         * @description
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /**
                     * @description Unique reference of the HTTP request.<br />If left blank this field will be populated with a GUID.
                     * @example 6198eb60-d1dd-4aad-9bbd-b01a49214e62
                     */
                    "X-MessageReference"?: string;
                    /** @description Unique value generated by the user which the API uses to recognize subsequent retries of the same request.<br />This field is limited to a maximum of 100 characters, if not upheld the API will return with an error 400 - Bad Request.<br /><i>Example: 2b7b05ad-4411-4a19-8c95-2508b17e0fd8</i> */
                    "Idempotency-Key"?: string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description Payment instruction */
            requestBody?: {
                content: {
                    /** @example {
                     *       "instrId": "InstructionId",
                     *       "requestedExecutionDate": "2024-06-14T00:00:00+00:00",
                     *       "debtorAccount": {
                     *         "account": "ES9121000418450200051332",
                     *         "financialInstitution": "CAIXESBBXXX",
                     *         "country": "ES"
                     *       },
                     *       "debtorName": "Debtor name",
                     *       "debtorAddress": {
                     *         "line1": "Debtor address line 1",
                     *         "line2": "Debtor address line 2",
                     *         "line3": "Debtor address line 3"
                     *       },
                     *       "ultimateDebtorName": "Ultimate debtor name",
                     *       "ultimateDebtorAddress": {
                     *         "line1": "Ultimate debtor address line 1",
                     *         "line2": "Ultimate debtor address line 2",
                     *         "line3": "Ultimate debtor address line 3"
                     *       },
                     *       "debtorAgentFinancialInstitution": "CAIXESBBXXX",
                     *       "debtorAgentAccount": "DK2489000000000001",
                     *       "currencyOfTransfer": null,
                     *       "amount": {
                     *         "currency": "EUR",
                     *         "amount": 11
                     *       },
                     *       "chargeBearer": "SHA",
                     *       "remittanceInformation": {
                     *         "line1": "Remittance Information",
                     *         "line2": "Remittance Information 2",
                     *         "line3": null,
                     *         "line4": null
                     *       },
                     *       "creditorId": null,
                     *       "creditorAccount": {
                     *         "account": "DE1111111111111111",
                     *         "financialInstitution": "WIREDEMM",
                     *         "country": "DE"
                     *       },
                     *       "creditorName": "Beneficiary Name",
                     *       "creditorAddress": {
                     *         "line1": "Address 1",
                     *         "line2": "Address 2",
                     *         "line3": "Address 3"
                     *       },
                     *       "clearingNetwork": null,
                     *       "purposeCode": null,
                     *       "fxQuoteId": null
                     *     } */
                    "application/json": components["schemas"]["BankingCircle.Payments.DomainServices.Public.Dto.Payments.PaymentCreationRequestAgencyBanking"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "paymentId": "d2404f75-e011-4683-9d2d-efd30943c6b8",
                         *       "status": "PendingProcessing"
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.Payment.PaymentCreationResponse"];
                    };
                };
                /** @description Bad request.<br />Request is not correctly formulated. Goes for both Header, Query and Body. Verify the error description and properties. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.Payment.PaymentCreationFailureResponse"];
                    };
                };
                /** @description Forbidden. The server understood the request, but is refusing it or the access is not allowed, i.e. if resource exists but calling user does not have rights to access it. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.NoResponse"];
                    };
                };
                /** @description Not found. There is no resource behind the URL, i.e. requesting data on an account that does not exist. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "errors": [
                         *         {
                         *           "httpStatus": 404,
                         *           "errorCode": null,
                         *           "keyOrMessage": "Not Found",
                         *           "interpolations": [],
                         *           "details": null,
                         *           "exception": null
                         *         }
                         *       ]
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.PaymentsError404Dto"];
                    };
                };
                /** @description Conflict. Idempotency-key violation. Request being handled. */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "paymentId": "20f1dd79-1ec9-49dc-8d14-1b2c2f0ab89b",
                         *       "propertyName": null,
                         *       "errorCode": "DuplicateIdempotencyKey",
                         *       "errorDescription": "Duplicate Idempotency Key has been detected"
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.GetPaymentsSinglesIdempotencyError409Dto"];
                    };
                };
                /** @description Internal Server Error. Something unexpected happened on BC Connect side. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "errors": [
                         *         {
                         *           "httpStatus": 500,
                         *           "errorCode": null,
                         *           "keyOrMessage": "Internal server error",
                         *           "interpolations": [],
                         *           "details": null,
                         *           "exception": null
                         *         }
                         *       ]
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.PaymentsError500Dto"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payments/iso20022/customer-credit-transfer-initiation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Payment initiation using pain001 format
         * @description
         */
        post: {
            parameters: {
                query?: never;
                header: {
                    /** @description The Accept header is used to inform the server by the client that which content type is understandable by the client expressed as MIME-types.<br />Valid input (returns xml - any other value returns json):<br />\*\/\*<br>application/*<br />application/xml<br />Example: \*\/\* */
                    Accept: string;
                    /** @description Type: Bearer token.<br />State-of-art implementation. Check documentation <a href="https://docs.bankingcircleconnect.com/api-reference/m2m-user-token">Authorization</a> and <a href="https://docs.bankingcircleconnect.com/guides/connecting-to-the-api">Connecting to the API</a><br />Example (shortend): Bearer eyJ0eXAiOiJKV1QiLCJhb... */
                    Authorization: string;
                    /** @description Mediatype of input resource. Boundary is a delimiter of data parts in the input. Format: multipart/form-data; boundary=[string].<br />Example: multipart/form-data; boundary=-----xyz */
                    "Content-Type"?: string;
                    /** @description X-ContentType is not required but may be in the future. Clients are encouraged to set the value to text/pain001. */
                    "X-ContentType": string;
                    /** @description Currently Accept-Response must be set to pain.002.001.03. Other options may be available in the future. */
                    "Accept-Response": string;
                    /** @description Unique value generated by the user which the API uses to recognize subsequent retries of the same request.<br />This field is limited to a maximum of 100 characters, if not upheld the API will return with an error 400 - Bad Request.<br /><i>Example: 2b7b05ad-4411-4a19-8c95-2508b17e0fd8</i> */
                    "Idempotency-Key"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "multipart/form-data": {
                        /**
                         * IFormFile
                         * Format: binary
                         */
                        painFile?: string;
                    };
                };
            };
            responses: {
                /** @description OK<br />Request is not sent for processing, all payments are rejected */
                200: {
                    headers: {
                        /** @description MIME-type determining format of the response.<br />Example: application/xml */
                        "Content-Type": string;
                        /** @description Indicates the length of the response body in bytes.<br />Example: 314 */
                        "Content-Length": number;
                        /** @description Correlates HTTP requests between a client and server.<br />Example: f058ebd6-02f7-4d3f-942e-904344e8cde5 */
                        "X-Correlation": string;
                        /** @description Used for cross-component correlation when 2 of your applications use different instrumentation keys.<br />Example: appId=cid-v1:7067aa9e-f4bb-44b5-a124-bab9395de160 */
                        "Request-Context": string;
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example <Pain002CreatePayment200RejectedResponseExample xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://schemas.datacontract.org/2004/07/BankingCircle.Payments.Api.Data.SwaggerExampleData">
                         *       <cstmrPmtStsRptField xmlns="http://schemas.datacontract.org/2004/07/BankingCircle.Payments.Api.Data.SwaggerExampleData.CustomPainDocuments.Pain002CreatePayment201AcceptedResponseExample">
                         *         <grpHdrField>
                         *           <initgPtyField>
                         *             <idField>
                         *               <itemField i:type="OrganisationIdentification4">
                         *                 <bICOrBEIField>SXPYDKKKXXX</bICOrBEIField>
                         *               </itemField>
                         *             </idField>
                         *           </initgPtyField>
                         *           <msgIdField>1bb3bf30d46345838260b01429049d52</msgIdField>
                         *         </grpHdrField>
                         *         <orgnlGrpInfAndStsField>
                         *           <grpStsField>RJCT</grpStsField>
                         *           <grpStsFieldSpecified>true</grpStsFieldSpecified>
                         *           <orgnlCreDtTmField>0001-01-01T00:00:00</orgnlCreDtTmField>
                         *           <orgnlCreDtTmFieldSpecified>false</orgnlCreDtTmFieldSpecified>
                         *           <orgnlCtrlSumField>0</orgnlCtrlSumField>
                         *           <orgnlCtrlSumFieldSpecified>false</orgnlCtrlSumFieldSpecified>
                         *           <orgnlMsgIdField>POBOPaymentTestTATA14</orgnlMsgIdField>
                         *           <orgnlMsgNmIdField>pain.001.001.03</orgnlMsgNmIdField>
                         *         </orgnlGrpInfAndStsField>
                         *         <orgnlPmtInfAndStsField>
                         *           <OriginalPaymentInformation1>
                         *             <orgnlCtrlSumField>0</orgnlCtrlSumField>
                         *             <orgnlCtrlSumFieldSpecified>false</orgnlCtrlSumFieldSpecified>
                         *             <orgnlPmtInfIdField>1POBOTestTATA</orgnlPmtInfIdField>
                         *             <pmtInfStsField>ACTC</pmtInfStsField>
                         *             <pmtInfStsFieldSpecified>false</pmtInfStsFieldSpecified>
                         *             <txInfAndStsField>
                         *               <PaymentTransactionInformation25>
                         *                 <accptncDtTmField>0001-01-01T00:00:00</accptncDtTmField>
                         *                 <accptncDtTmFieldSpecified>false</accptncDtTmFieldSpecified>
                         *                 <orgnlEndToEndIdField>PRAPTESTREMINFOR02</orgnlEndToEndIdField>
                         *                 <orgnlInstrIdField>PRAPTEST12APR01</orgnlInstrIdField>
                         *                 <txStsField>RJCT</txStsField>
                         *                 <txStsFieldSpecified>true</txStsFieldSpecified>
                         *               </PaymentTransactionInformation25>
                         *             </txInfAndStsField>
                         *           </OriginalPaymentInformation1>
                         *         </orgnlPmtInfAndStsField>
                         *       </cstmrPmtStsRptField>
                         *     </Pain002CreatePayment200RejectedResponseExample> */
                        "application/xml": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.Pain002CreatePayment200RejectedResponseExample"];
                    };
                };
                /** @description Success: Created<br />Request is sent for processing */
                201: {
                    headers: {
                        /** @description MIME-type determining format of the response.<br />Example: application/xml */
                        "Content-Type": string;
                        /** @description Indicates the length of the response body in bytes.<br />Example: 314 */
                        "Content-Length": number;
                        /** @description Correlates HTTP requests between a client and server.<br />Example: f058ebd6-02f7-4d3f-942e-904344e8cde5 */
                        "X-Correlation": string;
                        /** @description Used for cross-component correlation when 2 of your applications use different instrumentation keys.<br />Example: appId=cid-v1:7067aa9e-f4bb-44b5-a124-bab9395de160 */
                        "Request-Context": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/xml": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.Pain002CreatePayment201AcceptedResponseExample"];
                    };
                };
                /** @description Bad request.<br />Request is not correctly formulated. Goes for both Header, Query and Body. Verify the error description and properties. */
                400: {
                    headers: {
                        /** @description MIME-type determining format of the response.<br />Example: application/xml */
                        "Content-Type": string;
                        /** @description Indicates the length of the response body in bytes.<br />Example: 314 */
                        "Content-Length": number;
                        /** @description Correlates HTTP requests between a client and server.<br />Example: f058ebd6-02f7-4d3f-942e-904344e8cde5 */
                        "X-Correlation": string;
                        /** @description Used for cross-component correlation when 2 of your applications use different instrumentation keys.<br />Example: appId=cid-v1:7067aa9e-f4bb-44b5-a124-bab9395de160 */
                        "Request-Context": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.Pain002CreatePayment400Response"];
                    };
                };
                /** @description Forbidden. The server understood the request, but is refusing it or the access is not allowed, i.e. if resource exists but calling user does not have rights to access it. */
                403: {
                    headers: {
                        /** @description MIME-type determining format of the response.<br />Example: application/xml */
                        "Content-Type": string;
                        /** @description Indicates the length of the response body in bytes.<br />Example: 314 */
                        "Content-Length": number;
                        /** @description Correlates HTTP requests between a client and server.<br />Example: f058ebd6-02f7-4d3f-942e-904344e8cde5 */
                        "X-Correlation": string;
                        /** @description Used for cross-component correlation when 2 of your applications use different instrumentation keys.<br />Example: appId=cid-v1:7067aa9e-f4bb-44b5-a124-bab9395de160 */
                        "Request-Context": string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not found. There is no resource behind the URL, i.e. requesting data on an account that does not exist or dont have permissions to. */
                404: {
                    headers: {
                        /** @description MIME-type determining format of the response.<br />Example: application/xml */
                        "Content-Type": string;
                        /** @description Indicates the length of the response body in bytes.<br />Example: 314 */
                        "Content-Length": number;
                        /** @description Correlates HTTP requests between a client and server.<br />Example: f058ebd6-02f7-4d3f-942e-904344e8cde5 */
                        "X-Correlation": string;
                        /** @description Used for cross-component correlation when 2 of your applications use different instrumentation keys.<br />Example: appId=cid-v1:7067aa9e-f4bb-44b5-a124-bab9395de160 */
                        "Request-Context": string;
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "errors": [
                         *         {
                         *           "httpStatus": 404,
                         *           "errorCode": null,
                         *           "keyOrMessage": "Not Found",
                         *           "interpolations": [],
                         *           "details": null,
                         *           "exception": null
                         *         }
                         *       ],
                         *       "account": null,
                         *       "_links": null
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.Pain002CreatePayment404Response"];
                    };
                };
                /** @description Conflict. Idempotency-key violation. Request being handled. */
                409: {
                    headers: {
                        /** @description MIME-type determining format of the response.<br />Example: application/xml */
                        "Content-Type": string;
                        /** @description Indicates the length of the response body in bytes.<br />Example: 314 */
                        "Content-Length": number;
                        /** @description Correlates HTTP requests between a client and server.<br />Example: f058ebd6-02f7-4d3f-942e-904344e8cde5 */
                        "X-Correlation": string;
                        /** @description Used for cross-component correlation when 2 of your applications use different instrumentation keys.<br />Example: appId=cid-v1:7067aa9e-f4bb-44b5-a124-bab9395de160 */
                        "Request-Context": string;
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "Id": "d2404f75-e011-4683-9d2d-efd30943c6b8",
                         *       "Type": "Pain001",
                         *       "Errors": [
                         *         {
                         *           "PaymentBulkId": "fa5eba78-a2a5-4ceb-916a-d3fd355c94cb",
                         *           "ErrorCode": "DuplicateIdempotencyKey",
                         *           "ErrorDescription": "Identical Idempotency Key is already uploaded once for this user."
                         *         }
                         *       ]
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.Pain002CreatePayment409Response"];
                    };
                };
                /** @description Payload too large.<br />Size of request or response is too big and therefore rejected */
                413: {
                    headers: {
                        /** @description MIME-type determining format of the response.<br />Example: application/xml */
                        "Content-Type": string;
                        /** @description Indicates the length of the response body in bytes.<br />Example: 314 */
                        "Content-Length": number;
                        /** @description Correlates HTTP requests between a client and server.<br />Example: f058ebd6-02f7-4d3f-942e-904344e8cde5 */
                        "X-Correlation": string;
                        /** @description Used for cross-component correlation when 2 of your applications use different instrumentation keys.<br />Example: appId=cid-v1:7067aa9e-f4bb-44b5-a124-bab9395de160 */
                        "Request-Context": string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/recalls": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a collection of recalls */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Number of pages returned.<br />
                     *     Condition: Valid page number(1 to n)
                     * @example 10
                     */
                    PageNumber?: number;
                    /**
                     * @description No. of items returned per page. <br />
                     *     Condition: Valid page number(1 to 5000)<br />
                     * @example 50
                     */
                    PageSize?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "result": [
                         *         {
                         *           "id": "d2404f75-e011-4683-9d2d-efd30943c6b8",
                         *           "paymentId": "d2404f75-e011-4683-9d2d-efd30943c6b8",
                         *           "incomingPaymentId": null,
                         *           "status": "Processing",
                         *           "statusReason": "Recall request sent",
                         *           "statusCode": null,
                         *           "createdAt": "2024-06-14T10:52:02+00:00",
                         *           "modifiedAt": "2024-06-14T11:17:42+00:00",
                         *           "recallReason": {
                         *             "code": "AC03",
                         *             "description": "Invalid Creditor Account Number"
                         *           }
                         *         },
                         *         {
                         *           "id": "d2404f75-e011-4683-9d2d-efd30943c6b8",
                         *           "paymentId": "d2404f75-e011-4683-9d2d-efd30943c6b8",
                         *           "incomingPaymentId": null,
                         *           "status": "Unsuccessful",
                         *           "statusReason": "The request was rejected by the counterparty (Closed Account)",
                         *           "statusCode": "AC04",
                         *           "createdAt": "2024-06-14T10:52:02+00:00",
                         *           "modifiedAt": "2024-06-14T11:17:42+00:00",
                         *           "recallReason": {
                         *             "code": "AM09",
                         *             "description": "Wrong Amount"
                         *           }
                         *         },
                         *         {
                         *           "id": "d2404f75-e011-4683-9d2d-efd30943c6b8",
                         *           "paymentId": "d2404f75-e011-4683-9d2d-efd30943c6b8",
                         *           "incomingPaymentId": "d2404f75-e011-4683-9d2d-efd30943c6b8",
                         *           "status": "Successful",
                         *           "statusReason": "We successfully received the incoming payment",
                         *           "statusCode": null,
                         *           "createdAt": "2024-06-14T10:52:02+00:00",
                         *           "modifiedAt": "2024-06-14T11:17:42+00:00",
                         *           "recallReason": {
                         *             "code": "CUST",
                         *             "description": "Requested By Customer"
                         *           }
                         *         }
                         *       ],
                         *       "pageInfo": {
                         *         "currentPage": 1,
                         *         "pageSize": 50,
                         *         "rowCount": 3
                         *       }
                         *     } */
                        "application/json": {
                            /** IEnumerable */
                            Result?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Dto.PaymentRecallResponse"][];
                            PageInfo?: components["schemas"]["BankingCircle.Utilities.Api.PageInfo"];
                        };
                    };
                };
                /** @description Bad request.<br />Request is not correctly formulated. Goes for both Header, Query and Body. Verify the error description and properties. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.GetRecallsError400Dto"];
                    };
                };
                /** @description Forbidden. The server understood the request, but is refusing it or the access is not allowed, i.e. if resource exists but calling user does not have rights to access it. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.NoResponse"];
                    };
                };
                /** @description Not found. There is no resource behind the URL, i.e. requesting data on an account that does not exist. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "errors": [
                         *         {
                         *           "httpStatus": 404,
                         *           "errorCode": null,
                         *           "keyOrMessage": "Not Found",
                         *           "interpolations": [],
                         *           "details": null,
                         *           "exception": null
                         *         }
                         *       ]
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.RecallsError404Dto"];
                    };
                };
                /** @description Internal Server Error. Something unexpected happened on BC Connect side. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "errors": [
                         *         {
                         *           "httpStatus": 500,
                         *           "errorCode": null,
                         *           "keyOrMessage": "Internal server error",
                         *           "interpolations": [],
                         *           "details": null,
                         *           "exception": null
                         *         }
                         *       ]
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.RecallsError500Dto"];
                    };
                };
            };
        };
        put?: never;
        /** Initiate recall for a payment */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Recall request for a payment. */
            requestBody?: {
                content: {
                    /** @example {
                     *       "paymentId": "d2404f75-e011-4683-9d2d-efd30943c6b8",
                     *       "recallReasonCode": "AC03"
                     *     } */
                    "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.Recall.PaymentRecallCreationRequest"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "id": "d2404f75-e011-4683-9d2d-efd30943c6b8",
                         *       "paymentId": "d2404f75-e011-4683-9d2d-efd30943c6b8",
                         *       "incomingPaymentId": null,
                         *       "status": "Received",
                         *       "statusReason": "Recall request received",
                         *       "statusCode": null,
                         *       "createdAt": "2024-06-14T10:52:02+00:00",
                         *       "modifiedAt": "2024-06-14T11:17:42+00:00",
                         *       "recallReason": {
                         *         "code": "AC03",
                         *         "description": "Invalid Creditor Account Number"
                         *       }
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.PaymentRecallCreationResponseExample"];
                    };
                };
                /** @description Bad request.<br />Request is not correctly formulated. Goes for both Header, Query and Body. Verify the error description and properties. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.Recall.PaymentRecallCreationFailureResponse"];
                    };
                };
                /** @description Forbidden. The server understood the request, but is refusing it or the access is not allowed, i.e. if resource exists but calling user does not have rights to access it. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.NoResponse"];
                    };
                };
                /** @description Not found. There is no resource behind the URL, i.e. requesting data on an account that does not exist. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "errors": [
                         *         {
                         *           "httpStatus": 404,
                         *           "errorCode": null,
                         *           "keyOrMessage": "Not Found",
                         *           "interpolations": [],
                         *           "details": null,
                         *           "exception": null
                         *         }
                         *       ]
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.RecallsError404Dto"];
                    };
                };
                /** @description Internal Server Error. Something unexpected happened on BC Connect side. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "errors": [
                         *         {
                         *           "httpStatus": 500,
                         *           "errorCode": null,
                         *           "keyOrMessage": "Internal server error",
                         *           "interpolations": [],
                         *           "details": null,
                         *           "exception": null
                         *         }
                         *       ]
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.RecallsError500Dto"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/recalls/{recall-id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a specific recall by id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Recall identifier (PaymentRecallResponse.Id).
                     * @example 6198eb60-d1dd-4aad-9bbd-b01a49214e62
                     */
                    "recall-id": string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.DomainServices.Public.Dto.PaymentRecallResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "type": "https://tools.ietf.org/html/rfc7231#section-6.5.1",
                         *       "title": "One or more validation errors occurred.",
                         *       "status": 400,
                         *       "errors": {
                         *         "recall-id": [
                         *           "The value '460C7840-2600-4418-D-B026-C7F38DA3A737' is not valid."
                         *         ]
                         *       }
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.GetRecallByIdError400Dto"];
                    };
                };
                /** @description Forbidden. The server understood the request, but is refusing it or the access is not allowed, i.e. if resource exists but calling user does not have rights to access it. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.NoResponse"];
                    };
                };
                /** @description Not found. There is no resource behind the URL, i.e. requesting data on an account that does not exist. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "errors": [
                         *         {
                         *           "httpStatus": 404,
                         *           "errorCode": null,
                         *           "keyOrMessage": "Not Found",
                         *           "interpolations": [],
                         *           "details": null,
                         *           "exception": null
                         *         }
                         *       ]
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.RecallsError404Dto"];
                    };
                };
                /** @description Internal Server Error. Something unexpected happened on BC Connect side. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "errors": [
                         *         {
                         *           "httpStatus": 500,
                         *           "errorCode": null,
                         *           "keyOrMessage": "Internal server error",
                         *           "interpolations": [],
                         *           "details": null,
                         *           "exception": null
                         *         }
                         *       ]
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.RecallsError500Dto"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/recalls/{recall-id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get status of a recall */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Recall identifier (PaymentRecallResponse.Id).
                     * @example 6198eb60-d1dd-4aad-9bbd-b01a49214e62
                     */
                    "recall-id": string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "status": "Successful"
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.DomainServices.Public.Dto.PaymentRecallStatusResponse"];
                    };
                };
                /** @description Forbidden. The server understood the request, but is refusing it or the access is not allowed, i.e. if resource exists but calling user does not have rights to access it. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.NoResponse"];
                    };
                };
                /** @description Not found. There is no resource behind the URL, i.e. requesting data on an account that does not exist. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "errors": [
                         *         {
                         *           "httpStatus": 404,
                         *           "errorCode": null,
                         *           "keyOrMessage": "Not Found",
                         *           "interpolations": [],
                         *           "details": null,
                         *           "exception": null
                         *         }
                         *       ]
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.RecallsError404Dto"];
                    };
                };
                /** @description Internal Server Error. Something unexpected happened on BC Connect side. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "errors": [
                         *         {
                         *           "httpStatus": 500,
                         *           "errorCode": null,
                         *           "keyOrMessage": "Internal server error",
                         *           "interpolations": [],
                         *           "details": null,
                         *           "exception": null
                         *         }
                         *       ]
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.RecallsError500Dto"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/traces": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a collection of traces
         * @description Get a collection of traces available to the user
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Number of pages returned.<br />
                     *     Condition: Valid page number(1 to n)
                     * @example 10
                     */
                    PageNumber?: number;
                    /**
                     * @description No. of items returned per page. <br />
                     *     Condition: Valid page number(1 to 5000)<br />
                     * @example 50
                     */
                    PageSize?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "result": [
                         *         {
                         *           "traceId": "44e53e18-d7c0-4472-9f18-8c096fde241e",
                         *           "paymentId": "aa8c95c7-10e9-4baa-abe5-eb7953cba3aa",
                         *           "contractReferenceNumber": "010F215241625AXN",
                         *           "status": "Successful",
                         *           "statusReason": "The trace successfully completed. Payment has been received by beneficiary",
                         *           "valueDate": "",
                         *           "to": {
                         *             "name": "Name identifying the creditor",
                         *             "accountIdentifier": "DK7989000000012009"
                         *           },
                         *           "from": {
                         *             "name": "Name identifying the debitor",
                         *             "accountIdentifier": "DK6089000000026610"
                         *           },
                         *           "amount": 34355.5,
                         *           "currency": "NOK",
                         *           "paymentDetails": [],
                         *           "createdAt": "2024-06-14T10:52:02+00:00",
                         *           "modifiedAt": "2024-06-14T11:17:42+00:00"
                         *         },
                         *         {
                         *           "traceId": "d2404f75-e011-4683-9d2d-efd30943c6b8",
                         *           "paymentId": "0f0fd307-1b53-4dbc-8142-265721bff08d",
                         *           "contractReferenceNumber": "010F21324037029A",
                         *           "status": "Processing",
                         *           "statusReason": "Trace request sent",
                         *           "valueDate": "2024-02-06",
                         *           "to": {
                         *             "name": "Name identifying the creditor",
                         *             "accountIdentifier": "56403960"
                         *           },
                         *           "from": {
                         *             "name": "Name identifying the debitor",
                         *             "accountIdentifier": "DK4089000000010674"
                         *           },
                         *           "amount": 234.567,
                         *           "currency": "DKK",
                         *           "paymentDetails": [
                         *             "RemittanceInformation1",
                         *             "RemittanceInformation2",
                         *             "RemittanceInformation3",
                         *             "RemittanceInformation4"
                         *           ],
                         *           "createdAt": "2024-06-14T10:52:02+00:00",
                         *           "modifiedAt": "2024-06-14T11:17:42+00:00"
                         *         },
                         *         {
                         *           "traceId": "c312fafc-f4cf-4042-9b32-8c5117874bb8",
                         *           "paymentId": "aeb76501-258f-489f-825a-4d640c21200a",
                         *           "contractReferenceNumber": "010F2092416237KU",
                         *           "status": "Unsuccessful",
                         *           "statusReason": "The request was rejected by the counterparty (Closed Account)",
                         *           "valueDate": "",
                         *           "to": {
                         *             "name": "Name identifying the creditor",
                         *             "accountIdentifier": "DE25201207003100124449"
                         *           },
                         *           "from": {
                         *             "name": "Name identifying the debitor",
                         *             "accountIdentifier": "LU074080000000026386"
                         *           },
                         *           "amount": 234.567,
                         *           "currency": "SEK",
                         *           "paymentDetails": [
                         *             "RemittanceInformation1",
                         *             "RemittanceInformation3",
                         *             "RemittanceInformation4"
                         *           ],
                         *           "createdAt": "2024-06-14T10:52:02+00:00",
                         *           "modifiedAt": "2024-06-14T11:17:42+00:00"
                         *         }
                         *       ],
                         *       "pageInfo": {
                         *         "currentPage": 1,
                         *         "pageSize": 50,
                         *         "rowCount": 3
                         *       }
                         *     } */
                        "application/json": {
                            /** IEnumerable */
                            Result?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Dto.PaymentTraceResponse"][];
                            PageInfo?: components["schemas"]["BankingCircle.Utilities.Api.PageInfo"];
                        };
                    };
                };
                /** @description Bad request.<br />Request is not correctly formulated. Goes for both Header, Query and Body. Verify the error description and properties. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.GetTracesError400Dto"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.NoResponse"];
                    };
                };
                /** @description Forbidden. The server understood the request, but is refusing it or the access is not allowed, i.e. if resource exists but calling user does not have rights to access it. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.NoResponse"];
                    };
                };
                /** @description Not found. There is no resource behind the URL, i.e. requesting data on an account that does not exist. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "type": "https://tools.ietf.org/html/rfc7231#section-6.5.1",
                         *       "title": "Not Found",
                         *       "status": 404,
                         *       "traceId": "d2404f75-e011-4683-9d2d-efd30943c6b8"
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.TracesError404Dto"];
                    };
                };
                /** @description Internal Server Error. Something unexpected happened on BC Connect side. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "type": "https://tools.ietf.org/html/rfc7231#section-6.5.1",
                         *       "title": "Internal server error",
                         *       "status": 500,
                         *       "traceId": "d2404f75-e011-4683-9d2d-efd30943c6b8"
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.TracesError500Dto"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Initiate trace for a payment
         * @description Initiate trace for a payment
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Trace request for a payment. */
            requestBody?: {
                content: {
                    /** @example {
                     *       "paymentId": "d2404f75-e011-4683-9d2d-efd30943c6b8"
                     *     } */
                    "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.Trace.PaymentTraceCreationRequest"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.PaymentTraceCreationResponseExample"];
                    };
                };
                /** @description Bad request.<br />Request is not correctly formulated. Goes for both Header, Query and Body. Verify the error description and properties. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.Trace.PaymentTraceCreateFailureResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.NoResponse"];
                    };
                };
                /** @description Forbidden. The server understood the request, but is refusing it or the access is not allowed, i.e. if resource exists but calling user does not have rights to access it. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.NoResponse"];
                    };
                };
                /** @description Not found. There is no resource behind the URL, i.e. requesting data on an account that does not exist. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "type": "https://tools.ietf.org/html/rfc7231#section-6.5.1",
                         *       "title": "Not Found",
                         *       "status": 404,
                         *       "traceId": "d2404f75-e011-4683-9d2d-efd30943c6b8"
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.TracesError404Dto"];
                    };
                };
                /** @description Internal Server Error. Something unexpected happened on BC Connect side. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "type": "https://tools.ietf.org/html/rfc7231#section-6.5.1",
                         *       "title": "Internal server error",
                         *       "status": 500,
                         *       "traceId": "d2404f75-e011-4683-9d2d-efd30943c6b8"
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.TracesError500Dto"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/traces/{trace-id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Cancel a trace
         * @description Cancel a trace
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    "trace-id": string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "traceId": "d2404f75-e011-4683-9d2d-efd30943c6b8",
                         *       "paymentId": "0f0fd307-1b53-4dbc-8142-265721bff08d",
                         *       "contractReferenceNumber": "contractReferenceNumber",
                         *       "status": "Cancelled",
                         *       "statusReason": "Cancelled by user",
                         *       "valueDate": "2024-02-06",
                         *       "to": {
                         *         "name": "Name identifying the creditor",
                         *         "accountIdentifier": "GB04SAPY60838200023131"
                         *       },
                         *       "from": {
                         *         "name": "Name identifying the debitor",
                         *         "accountIdentifier": "DK2789000000025555"
                         *       },
                         *       "amount": 9550.06,
                         *       "currency": "GBP",
                         *       "paymentDetails": [
                         *         "RemittanceInformation1",
                         *         "RemittanceInformation2",
                         *         "RemittanceInformation3",
                         *         "RemittanceInformation4"
                         *       ],
                         *       "createdAt": "2024-06-14T10:52:02+00:00",
                         *       "modifiedAt": "2024-06-14T11:17:42+00:00"
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.PaymentTraceCancelResponseExample"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.Trace.PaymentTraceCancelFailureResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.NoResponse"];
                    };
                };
                /** @description Forbidden. The server understood the request, but is refusing it or the access is not allowed, i.e. if resource exists but calling user does not have rights to access it. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.NoResponse"];
                    };
                };
                /** @description Not found. There is no resource behind the URL, i.e. requesting data on an account that does not exist. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "type": "https://tools.ietf.org/html/rfc7231#section-6.5.1",
                         *       "title": "Not Found",
                         *       "status": 404,
                         *       "traceId": "d2404f75-e011-4683-9d2d-efd30943c6b8"
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.TracesError404Dto"];
                    };
                };
                /** @description Internal Server Error. Something unexpected happened on BC Connect side. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "type": "https://tools.ietf.org/html/rfc7231#section-6.5.1",
                         *       "title": "Internal server error",
                         *       "status": 500,
                         *       "traceId": "d2404f75-e011-4683-9d2d-efd30943c6b8"
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.TracesError500Dto"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/traces/{trace-id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a specific trace by id
         * @description Get a specific trace by id
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Trace identifier (PaymentTraceResponse.Id).
                     * @example 6198eb60-d1dd-4aad-9bbd-b01a49214e62
                     */
                    "trace-id": string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.DomainServices.Public.Dto.PaymentTraceResponse"];
                    };
                };
                /** @description Bad request.<br />Request is not correctly formulated. Goes for both Header, Query and Body. Verify the error description and properties. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.GetTraceError400Dto"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.NoResponse"];
                    };
                };
                /** @description Forbidden. The server understood the request, but is refusing it or the access is not allowed, i.e. if resource exists but calling user does not have rights to access it. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.NoResponse"];
                    };
                };
                /** @description Not found. There is no resource behind the URL, i.e. requesting data on an account that does not exist. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "type": "https://tools.ietf.org/html/rfc7231#section-6.5.1",
                         *       "title": "Not Found",
                         *       "status": 404,
                         *       "traceId": "d2404f75-e011-4683-9d2d-efd30943c6b8"
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.TracesError404Dto"];
                    };
                };
                /** @description Internal Server Error. Something unexpected happened on BC Connect side. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "type": "https://tools.ietf.org/html/rfc7231#section-6.5.1",
                         *       "title": "Internal server error",
                         *       "status": 500,
                         *       "traceId": "d2404f75-e011-4683-9d2d-efd30943c6b8"
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.TracesError500Dto"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/traces/{trace-id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get status of a trace
         * @description Get trace status
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Trace identifier (PaymentTraceResponse.Id).
                     * @example 6198eb60-d1dd-4aad-9bbd-b01a49214e62
                     */
                    "trace-id": string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "status": "Successful"
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.DomainServices.Public.Dto.PaymentTraceStatusResponse"];
                    };
                };
                /** @description Bad request.<br />Request is not correctly formulated. Goes for both Header, Query and Body. Verify the error description and properties. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.GetTraceError400Dto"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.NoResponse"];
                    };
                };
                /** @description Forbidden. The server understood the request, but is refusing it or the access is not allowed, i.e. if resource exists but calling user does not have rights to access it. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.NoResponse"];
                    };
                };
                /** @description Not found. There is no resource behind the URL, i.e. requesting data on an account that does not exist. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "type": "https://tools.ietf.org/html/rfc7231#section-6.5.1",
                         *       "title": "Not Found",
                         *       "status": 404,
                         *       "traceId": "d2404f75-e011-4683-9d2d-efd30943c6b8"
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.TracesError404Dto"];
                    };
                };
                /** @description Internal Server Error. Something unexpected happened on BC Connect side. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "type": "https://tools.ietf.org/html/rfc7231#section-6.5.1",
                         *       "title": "Internal server error",
                         *       "status": 500,
                         *       "traceId": "d2404f75-e011-4683-9d2d-efd30943c6b8"
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.TracesError500Dto"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payments/invoke": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Invoke a specified action for a given payment or direct debit
         * @deprecated
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    /** @example {
                     *       "id": "d2404f75-e011-4683-9d2d-efd30943c6b8",
                     *       "action": "Reject"
                     *     } */
                    "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.Payment.PaymentInvokeActionRequest"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad request.<br />Request is not correctly formulated. Goes for both Header, Query and Body. Verify the error description and properties. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "errors": [
                         *         {
                         *           "errorCode": "UnsupportedPaymentType",
                         *           "errorDescription": "Requested action is not supported for this type of payment"
                         *         }
                         *       ]
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.Payment.PaymentCancelFailureResponse"];
                    };
                };
                /** @description Forbidden. The server understood the request, but is refusing it or the access is not allowed, i.e. if resource exists but calling user does not have rights to access it. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.NoResponse"];
                    };
                };
                /** @description Not found. There is no resource behind the URL, i.e. requesting data on an account that does not exist. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "errors": [
                         *         {
                         *           "httpStatus": 404,
                         *           "errorCode": null,
                         *           "keyOrMessage": "Not Found",
                         *           "interpolations": [],
                         *           "details": null,
                         *           "exception": null
                         *         }
                         *       ]
                         *     } */
                        "application/json": components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.PaymentsError404Dto"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** ErrorDetailDto */
        "BankingCircle.Extensions.Utilities.Exceptions.Dto.ErrorDetailDto": {
            /** String */
            errorCode?: string | null;
            /** String */
            errorText?: string | null;
            /** String */
            propertyName?: string | null;
            /**
             * Nullable`1
             * Format: int32
             */
            lineNumber?: number | null;
            /**
             * Nullable`1
             * Format: int32
             */
            fieldNumber?: number | null;
            /** Boolean */
            isOk?: boolean;
        };
        /** DateAndPlaceOfBirth */
        "BankingCircle.Iso20022.Pain_002_001_03.Model.DateAndPlaceOfBirth": {
            /**
             * DateTime
             * Format: date-time
             */
            birthDt?: string;
            /** String */
            prvcOfBirth?: string | null;
            /** String */
            cityOfBirth?: string | null;
            /** String */
            ctryOfBirth?: string | null;
        };
        /** GenericOrganisationIdentification1 */
        "BankingCircle.Iso20022.Pain_002_001_03.Model.GenericOrganisationIdentification1": {
            /** String */
            id?: string | null;
            schmeNm?: components["schemas"]["BankingCircle.Iso20022.Pain_002_001_03.Model.OrganisationIdentificationSchemeName1Choice"];
            /** String */
            issr?: string | null;
        };
        /** GenericPersonIdentification1 */
        "BankingCircle.Iso20022.Pain_002_001_03.Model.GenericPersonIdentification1": {
            /** String */
            id?: string | null;
            schmeNm?: components["schemas"]["BankingCircle.Iso20022.Pain_002_001_03.Model.PersonIdentificationSchemeName1Choice"];
            /** String */
            issr?: string | null;
        };
        /**
         * ItemChoiceType
         * Format: int32
         * @enum {integer}
         */
        "BankingCircle.Iso20022.Pain_002_001_03.Model.ItemChoiceType": 0 | 1;
        /**
         * ItemChoiceType1
         * Format: int32
         * @enum {integer}
         */
        "BankingCircle.Iso20022.Pain_002_001_03.Model.ItemChoiceType1": 0 | 1;
        /** OrganisationIdentification4 */
        "BankingCircle.Iso20022.Pain_002_001_03.Model.OrganisationIdentification4": {
            /** String */
            bicOrBEI?: string | null;
            /** GenericOrganisationIdentification1[] */
            othr?: components["schemas"]["BankingCircle.Iso20022.Pain_002_001_03.Model.GenericOrganisationIdentification1"][] | null;
        };
        /** OrganisationIdentificationSchemeName1Choice */
        "BankingCircle.Iso20022.Pain_002_001_03.Model.OrganisationIdentificationSchemeName1Choice": {
            /** String */
            item?: string | null;
            itemElementName?: components["schemas"]["BankingCircle.Iso20022.Pain_002_001_03.Model.ItemChoiceType"];
        };
        /** PersonIdentification5 */
        "BankingCircle.Iso20022.Pain_002_001_03.Model.PersonIdentification5": {
            dtAndPlcOfBirth?: components["schemas"]["BankingCircle.Iso20022.Pain_002_001_03.Model.DateAndPlaceOfBirth"];
            /** GenericPersonIdentification1[] */
            othr?: components["schemas"]["BankingCircle.Iso20022.Pain_002_001_03.Model.GenericPersonIdentification1"][] | null;
        };
        /** PersonIdentificationSchemeName1Choice */
        "BankingCircle.Iso20022.Pain_002_001_03.Model.PersonIdentificationSchemeName1Choice": {
            /** String */
            item?: string | null;
            itemElementName?: components["schemas"]["BankingCircle.Iso20022.Pain_002_001_03.Model.ItemChoiceType1"];
        };
        /**
         * Mt103PaymentResponse
         * @description Mt103 payment response message
         */
        "BankingCircle.Payments.Api.Data.Payment.Mt103PaymentResponse": {
            /**
             * String
             * @description Payment status for requested payment
             */
            status?: string | null;
            /**
             * String
             * @description Mt103 formatted payment information
             *                 Is null if payment is not Processed
             */
            mt103?: string | null;
        };
        /** PaymentApprovalApproveError */
        "BankingCircle.Payments.Api.Data.Payment.PaymentApprovalApproveError": {
            errorCode?: components["schemas"]["BankingCircle.Payments.Api.Enum.PaymentApprovalApproveErrorCode"];
            /**
             * String
             * @description Description of the error (English)
             */
            errorDescription?: string | null;
        };
        /** PaymentApprovalApproveFailureResponse */
        "BankingCircle.Payments.Api.Data.Payment.PaymentApprovalApproveFailureResponse": {
            /** List`1 */
            errors?: components["schemas"]["BankingCircle.Payments.Api.Data.Payment.PaymentApprovalApproveError"][] | null;
        };
        /** PaymentApprovalDeclineError */
        "BankingCircle.Payments.Api.Data.Payment.PaymentApprovalDeclineError": {
            errorCode?: components["schemas"]["BankingCircle.Payments.Api.Enum.PaymentApprovalDeclineErrorCode"];
            /**
             * String
             * @description Description of the error (English)
             */
            errorDescription?: string | null;
        };
        /** PaymentApprovalDeclineFailureResponse */
        "BankingCircle.Payments.Api.Data.Payment.PaymentApprovalDeclineFailureResponse": {
            /** List`1 */
            errors?: components["schemas"]["BankingCircle.Payments.Api.Data.Payment.PaymentApprovalDeclineError"][] | null;
        };
        /**
         * PaymentBatchRequest
         * @description PaymentBatchRequest contains list of payment ids
         *                 for which details are requested
         */
        "BankingCircle.Payments.Api.Data.Payment.PaymentBatchRequest": {
            /**
             * ICollection`1
             * @description List of payment ids
             */
            paymentIds?: string[] | null;
        };
        /** PaymentCancelError */
        "BankingCircle.Payments.Api.Data.Payment.PaymentCancelError": {
            errorCode?: components["schemas"]["BankingCircle.Payments.Api.Enum.PaymentCancelErrorCode"];
            /**
             * String
             * @description Description of the error (English)
             */
            errorDescription?: string | null;
        };
        /** PaymentCancelFailureResponse */
        "BankingCircle.Payments.Api.Data.Payment.PaymentCancelFailureResponse": {
            /** List`1 */
            errors?: components["schemas"]["BankingCircle.Payments.Api.Data.Payment.PaymentCancelError"][] | null;
        };
        /** PaymentCreationFailureResponse */
        "BankingCircle.Payments.Api.Data.Payment.PaymentCreationFailureResponse": {
            /** List`1 */
            errors?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Data.Payments.PaymentCreationErrorDetail"][] | null;
        };
        /** PaymentCreationResponse */
        "BankingCircle.Payments.Api.Data.Payment.PaymentCreationResponse": {
            /**
             * Guid
             * Format: uuid
             * @description Identifier of the newly created payment
             */
            paymentId?: string;
            status?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Enum.PaymentCreationStatus"];
        };
        /**
         * PaymentInvokeActionRequest
         * @description PaymentInvokeActionRequest
         */
        "BankingCircle.Payments.Api.Data.Payment.PaymentInvokeActionRequest": {
            /**
             * Guid
             * Format: uuid
             */
            id?: string;
            action?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Enum.UserAction"];
        };
        /** PaymentReAuthorizeError */
        "BankingCircle.Payments.Api.Data.Payment.PaymentReAuthorizeError": {
            errorCode?: components["schemas"]["BankingCircle.Payments.Api.Enum.PaymentReAuthorizeErrorCode"];
            /**
             * String
             * @description Description of the error (English)
             */
            errorDescription?: string | null;
        };
        /** PaymentReAuthorizeFailureResponse */
        "BankingCircle.Payments.Api.Data.Payment.PaymentReAuthorizeFailureResponse": {
            /** List`1 */
            errors?: components["schemas"]["BankingCircle.Payments.Api.Data.Payment.PaymentReAuthorizeError"][] | null;
        };
        /** PaymentRejectFailureResponse */
        "BankingCircle.Payments.Api.Data.Payment.PaymentRejectFailureResponse": {
            /** List`1 */
            errors?: components["schemas"]["BankingCircle.Payments.Api.Data.Payment.PaymentCancelError"][] | null;
        };
        /**
         * PaymentBulk
         * @description PaymentBulk contains bulk information regarding one submitted payment bulk
         */
        "BankingCircle.Payments.Api.Data.PaymentBulk.PaymentBulk": {
            /**
             * Guid
             * Format: uuid
             * @description Payment bulk id
             */
            paymentBulkId?: string;
            /**
             * String
             * @description Token provided to ensure concurrent interactions are resolved orderly
             */
            concurrencyToken?: string | null;
            /** @description Current status */
            status?: components["schemas"]["BankingCircle.Payments.Api.Enum.PaymentBulkStatus"];
            /** @description Date when the payment was instructed */
            instructedDate?: components["schemas"]["BankingCircle.Utilities.Api.Data.Date"];
            /** @description Statistics of payments in the bulk */
            paymentStatistics?: components["schemas"]["BankingCircle.Payments.Api.Data.PaymentBulk.PaymentBulkPaymentStatistics"];
        };
        /** PaymentBulkApprovalApproveError */
        "BankingCircle.Payments.Api.Data.PaymentBulk.PaymentBulkApprovalApproveError": {
            errorCode?: components["schemas"]["BankingCircle.Payments.Api.Enum.PaymentBulkApprovalApproveErrorCode"];
            /**
             * String
             * @description Description of the error (English)
             */
            errorDescription?: string | null;
        };
        /** PaymentBulkApprovalApproveFailureResponse */
        "BankingCircle.Payments.Api.Data.PaymentBulk.PaymentBulkApprovalApproveFailureResponse": {
            /** List`1 */
            errors?: components["schemas"]["BankingCircle.Payments.Api.Data.PaymentBulk.PaymentBulkApprovalApproveError"][] | null;
        };
        /** PaymentBulkApprovalDeclineError */
        "BankingCircle.Payments.Api.Data.PaymentBulk.PaymentBulkApprovalDeclineError": {
            errorCode?: components["schemas"]["BankingCircle.Payments.Api.Enum.PaymentBulkApprovalDeclineErrorCode"];
            /**
             * String
             * @description Description of the error (English)
             */
            errorDescription?: string | null;
        };
        /** PaymentBulkApprovalDeclineFailureResponse */
        "BankingCircle.Payments.Api.Data.PaymentBulk.PaymentBulkApprovalDeclineFailureResponse": {
            /** List`1 */
            errors?: components["schemas"]["BankingCircle.Payments.Api.Data.PaymentBulk.PaymentBulkApprovalDeclineError"][] | null;
        };
        /** PaymentBulkCancelError */
        "BankingCircle.Payments.Api.Data.PaymentBulk.PaymentBulkCancelError": {
            errorCode?: components["schemas"]["BankingCircle.Payments.Api.Enum.PaymentBulkCancelErrorCode"];
            /**
             * String
             * @description Description of the error (English)
             */
            errorDescription?: string | null;
        };
        /** PaymentBulkCancelFailureResponse */
        "BankingCircle.Payments.Api.Data.PaymentBulk.PaymentBulkCancelFailureResponse": {
            /** List`1 */
            errors?: components["schemas"]["BankingCircle.Payments.Api.Data.PaymentBulk.PaymentBulkCancelError"][] | null;
        };
        /** PaymentBulkCreationResponse */
        "BankingCircle.Payments.Api.Data.PaymentBulk.PaymentBulkCreationResponse": {
            /**
             * Guid
             * Format: uuid
             */
            paymentBulkId?: string;
            status?: components["schemas"]["BankingCircle.Payments.Api.Enum.PaymentBulkCreationStatus"];
        };
        /** PaymentBulkCsvCreationErrorDetail */
        "BankingCircle.Payments.Api.Data.PaymentBulk.PaymentBulkCsvCreationErrorDetail": {
            /**
             * Int32
             * Format: int32
             * @description Number of field in a field number enumerated value collection<br />
             *     Base is 1
             */
            fieldIndex?: number;
            /**
             * Int32
             * Format: int32
             * @description Number of element in a element number enumerated element collection<br />
             *     Base is 1
             */
            elementIndex?: number;
            errorCode?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Enum.PaymentInitiationErrorCodes"];
            /**
             * String
             * @description Description of the error (English)
             */
            errorDescription?: string | null;
        };
        /**
         * PaymentBulkPaymentStatistics
         * @description Statistics of payments in the bulk
         */
        "BankingCircle.Payments.Api.Data.PaymentBulk.PaymentBulkPaymentStatistics": {
            /**
             * Int32
             * Format: int32
             * @description Number of payments with status Processed
             */
            processed?: number;
            /**
             * Int32
             * Format: int32
             * @description Number of payment with status PendingProcessing
             */
            pendingProcessing?: number;
            /**
             * Int32
             * Format: int32
             * @description Number of payment with status Rejected
             */
            rejected?: number;
            /**
             * Int32
             * Format: int32
             * @description Number of payment with status MissingFunding
             */
            missingFunding?: number;
            /**
             * Int32
             * Format: int32
             * @description Number of payment with status Cancelled
             */
            cancelled?: number;
            /**
             * Int32
             * Format: int32
             * @description Number of payment with status PendingApproval
             */
            pendingApproval?: number;
            /**
             * Int32
             * Format: int32
             * @description Number of payment with status PendingSca
             */
            pendingSca?: number;
            /**
             * Int32
             * Format: int32
             * @description Number of payment with status ScaDeclined
             */
            scaDeclined?: number;
            /**
             * Int32
             * Format: int32
             * @description Number of payment with status ScaExpired
             */
            scaExpired?: number;
            /**
             * Int32
             * Format: int32
             * @description Number of payment with status DeclinedByApprover
             */
            declinedByApprover?: number;
            /**
             * Int32
             * Format: int32
             * @description Total number of reversed payments
             */
            reversed?: number;
            /**
             * Int32
             * Format: int32
             * @description Total number of payments
             */
            total?: number;
            /**
             * Decimal
             * Format: double
             * @description Gross number of summing all Payment.DebtorInformation.Instruction.Amount.Amount disregarding currencies
             */
            aggregatedAmount?: number;
        };
        /** PaymentBulkReAuthorizeError */
        "BankingCircle.Payments.Api.Data.PaymentBulk.PaymentBulkReAuthorizeError": {
            errorCode?: components["schemas"]["BankingCircle.Payments.Api.Enum.PaymentBulkReAuthorizeErrorCode"];
            /**
             * String
             * @description Description of the error (English)
             */
            errorDescription?: string | null;
        };
        /** PaymentBulkReAuthorizeFailureResponse */
        "BankingCircle.Payments.Api.Data.PaymentBulk.PaymentBulkReAuthorizeFailureResponse": {
            /** List`1 */
            errors?: components["schemas"]["BankingCircle.Payments.Api.Data.PaymentBulk.PaymentBulkReAuthorizeError"][] | null;
        };
        /** PaymentReferenceDataValidationResult */
        "BankingCircle.Payments.Api.Data.PaymentReferenceDataValidationResult": {
            /** String */
            ibanOrAccountNumber?: string | null;
            /** String */
            bicOrClearingCode?: string | null;
            /** String */
            countryCode?: string | null;
            /** Boolean */
            isOk?: boolean;
            /** String */
            bankName?: string | null;
            accountFormat?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Enum.AccountFormatType"];
            financialInstitutionFormat?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Enum.FinancialInstitutionFormatType"];
            /**
             * Boolean
             * @deprecated
             */
            readonly isIbanOrAccountOk?: boolean;
            /** Boolean */
            isIbanOk?: boolean;
            /** Boolean */
            isAccountOk?: boolean;
            /** Boolean */
            isBicOrClearingCodeOk?: boolean;
            /** String */
            ibanNationalId?: string | null;
            /** String */
            ibanKey?: string | null;
            /** String */
            ibanKeyForBank?: string | null;
            /** String */
            ibanBic?: string | null;
            /** String */
            routingBic?: string | null;
            /** String */
            parentOfficeKey?: string | null;
            /** String */
            groupParentKey?: string | null;
            /** String */
            legalParentKey?: string | null;
            /** String */
            headOfficeKey?: string | null;
            /** String */
            nationalIdToUse?: string | null;
            /** String */
            nationalIdIdentifier?: string | null;
        };
        /** PaymentRecallCreationFailureResponse */
        "BankingCircle.Payments.Api.Data.Recall.PaymentRecallCreationFailureResponse": {
            /** List`1 */
            errors?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Data.PaymentRecallFailureErrorDetail"][] | null;
        };
        /** PaymentRecallCreationRequest */
        "BankingCircle.Payments.Api.Data.Recall.PaymentRecallCreationRequest": {
            /**
             * Guid
             * Format: uuid
             * @description The unique identifier of the payment that is to be recalled.
             */
            paymentId: string;
            /**
             * String
             * @description The code (reason) for the recall.
             *     Valid values:
             *     AC03 (Invalid Creditor Account Number),
             *     AM09 (Wrong Amount),
             *     CUST (Requested By Customer)
             */
            recallReasonCode: string;
        };
        /** PaymentRecallReAuthorizeFailureResponse */
        "BankingCircle.Payments.Api.Data.Recall.PaymentRecallReAuthorizeFailureResponse": {
            /** List`1 */
            errors?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Data.PaymentRecallReAuthorizeError"][] | null;
        };
        /**
         * CreatePaymentBulkError400Dto
         * @description Is typeof(PaymentBulkCsvCreationFailureResponse)
         */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.CreatePaymentBulkError400Dto": {
            type?: components["schemas"]["BankingCircle.Payments.Api.Enum.PaymentBulkCreationFailureType"];
            /** List`1 */
            readonly errors?: components["schemas"]["BankingCircle.Payments.Api.Data.PaymentBulk.PaymentBulkCsvCreationErrorDetail"][] | null;
            /** Boolean */
            readonly canProceedWithErrors?: boolean;
        };
        /** CustomerPaymentStatusReportV03 */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.CustomPainDocuments.Pain002CreatePayment201AcceptedResponseExample.CustomerPaymentStatusReportV03": {
            grpHdr?: components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.CustomPainDocuments.Pain002CreatePayment201AcceptedResponseExample.GroupHeader36"];
            orgnlGrpInfAndSts?: components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.CustomPainDocuments.Pain002CreatePayment201AcceptedResponseExample.OriginalGroupInformation20"];
            /** OriginalPaymentInformation1[] */
            orgnlPmtInfAndSts?: components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.CustomPainDocuments.Pain002CreatePayment201AcceptedResponseExample.OriginalPaymentInformation1"][] | null;
        };
        /** GroupHeader36 */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.CustomPainDocuments.Pain002CreatePayment201AcceptedResponseExample.GroupHeader36": {
            /** String */
            msgId?: string | null;
            initgPty?: components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.CustomPainDocuments.Pain002CreatePayment201AcceptedResponseExample.PartyIdentification32"];
        };
        /** OriginalGroupInformation20 */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.CustomPainDocuments.Pain002CreatePayment201AcceptedResponseExample.OriginalGroupInformation20": {
            /** String */
            orgnlMsgId?: string | null;
            /** String */
            orgnlMsgNmId?: string | null;
            /**
             * DateTime
             * Format: date-time
             */
            orgnlCreDtTm?: string;
            /** Boolean */
            orgnlCreDtTmSpecified?: boolean;
            /**
             * Decimal
             * Format: double
             */
            orgnlCtrlSum?: number;
            /** Boolean */
            orgnlCtrlSumSpecified?: boolean;
            grpSts?: components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.CustomPainDocuments.Pain002CreatePayment201AcceptedResponseExample.TransactionGroupStatus3Code"];
            /** Boolean */
            grpStsSpecified?: boolean;
        };
        /** OriginalPaymentInformation1 */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.CustomPainDocuments.Pain002CreatePayment201AcceptedResponseExample.OriginalPaymentInformation1": {
            /** String */
            orgnlPmtInfId?: string | null;
            /**
             * Decimal
             * Format: double
             */
            orgnlCtrlSum?: number;
            /** Boolean */
            orgnlCtrlSumSpecified?: boolean;
            pmtInfSts?: components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.CustomPainDocuments.Pain002CreatePayment201AcceptedResponseExample.TransactionGroupStatus3Code"];
            /** Boolean */
            pmtInfStsSpecified?: boolean;
            /** PaymentTransactionInformation25[] */
            txInfAndSts?: components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.CustomPainDocuments.Pain002CreatePayment201AcceptedResponseExample.PaymentTransactionInformation25"][] | null;
        };
        /** Party6Choice */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.CustomPainDocuments.Pain002CreatePayment201AcceptedResponseExample.Party6Choice": {
            /** Object */
            item?: unknown;
        };
        /** PartyIdentification32 */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.CustomPainDocuments.Pain002CreatePayment201AcceptedResponseExample.PartyIdentification32": {
            id?: components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.CustomPainDocuments.Pain002CreatePayment201AcceptedResponseExample.Party6Choice"];
        };
        /** PaymentTransactionInformation25 */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.CustomPainDocuments.Pain002CreatePayment201AcceptedResponseExample.PaymentTransactionInformation25": {
            /** String */
            orgnlInstrId?: string | null;
            /** String */
            orgnlEndToEndId?: string | null;
            txSts?: components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.CustomPainDocuments.Pain002CreatePayment201AcceptedResponseExample.TransactionIndividualStatus3Code"];
            /** Boolean */
            txStsSpecified?: boolean;
            /**
             * DateTime
             * Format: date-time
             */
            accptncDtTm?: string;
            /** Boolean */
            accptncDtTmSpecified?: boolean;
        };
        /**
         * TransactionGroupStatus3Code
         * Format: int32
         * @enum {integer}
         */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.CustomPainDocuments.Pain002CreatePayment201AcceptedResponseExample.TransactionGroupStatus3Code": 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;
        /**
         * TransactionIndividualStatus3Code
         * Format: int32
         * @enum {integer}
         */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.CustomPainDocuments.Pain002CreatePayment201AcceptedResponseExample.TransactionIndividualStatus3Code": 0 | 1 | 2 | 3 | 4 | 5 | 6;
        /** ExceptionErrorDetailDto */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.ExceptionErrorDetailDto": {
            /**
             * Int32
             * Format: int32
             */
            httpStatus?: number;
            /** String */
            errorCode?: string | null;
            /** String */
            keyOrMessage?: string | null;
            /** Object[] */
            interpolations?: unknown[] | null;
            /** String */
            details?: string | null;
            /** String */
            exception?: string | null;
        };
        /**
         * GetPaymentBulksValidationError400Dto
         * @description Creates swagger example for 400 error<br />Is typeof(ValidationProblemDetails)
         */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.GetPaymentBulksValidationError400Dto": {
            /** String */
            readonly type?: string | null;
            /** String */
            title?: string | null;
            /**
             * Nullable`1
             * Format: int32
             */
            status?: number | null;
            /** IDictionary`2 */
            readonly errors?: {
                [key: string]: string[];
            } | null;
        };
        /**
         * GetPaymentByIdError400Dto
         * @description Is typeof(ValidationProblemDetails)
         */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.GetPaymentByIdError400Dto": {
            /** String */
            readonly type?: string | null;
            /** String */
            title?: string | null;
            /**
             * Nullable`1
             * Format: int32
             */
            status?: number | null;
            /** IDictionary`2 */
            readonly errors?: {
                [key: string]: string[];
            } | null;
        };
        /**
         * GetPaymentsBulkIdempotencyError409Dto
         * @description Is typeof(ValidationProblemDetails)
         */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.GetPaymentsBulkIdempotencyError409Dto": {
            type?: components["schemas"]["BankingCircle.Payments.Api.Enum.PaymentBulkCreationFailureType"];
            /** List`1 */
            errors?: components["schemas"]["BankingCircle.Payments.Api.Data.PaymentBulk.PaymentBulkCsvCreationErrorDetail"][] | null;
            /** Boolean */
            canProceedWithErrors?: boolean;
        };
        /**
         * GetPaymentsSinglesError400Dto
         * @description Is typeof(ValidationProblemDetails)
         */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.GetPaymentsSinglesError400Dto": {
            /** String */
            readonly type?: string | null;
            /** String */
            title?: string | null;
            /**
             * Nullable`1
             * Format: int32
             */
            status?: number | null;
            /** IDictionary`2 */
            readonly errors?: {
                [key: string]: string[];
            } | null;
        };
        /**
         * GetPaymentsSinglesIdempotencyError409Dto
         * @description Is typeof(ValidationProblemDetails)
         */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.GetPaymentsSinglesIdempotencyError409Dto": {
            /** String */
            paymentId?: string | null;
            /**
             * String
             * @description Name of property
             */
            propertyName?: string | null;
            errorCode?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Enum.PaymentInitiationErrorCodes"];
            /**
             * String
             * @description Description of the error (English)
             */
            errorDescription?: string | null;
        };
        /**
         * GetRecallByIdError400Dto
         * @description Is typeof(ValidationProblemDetails)
         */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.GetRecallByIdError400Dto": {
            /** String */
            readonly type?: string | null;
            /** String */
            title?: string | null;
            /**
             * Nullable`1
             * Format: int32
             */
            status?: number | null;
            /** IDictionary`2 */
            readonly errors?: {
                [key: string]: string[];
            } | null;
        };
        /**
         * GetRecallsError400Dto
         * @description Is typeof(ValidationProblemDetails)
         */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.GetRecallsError400Dto": {
            /** String */
            readonly type?: string | null;
            /** String */
            title?: string | null;
            /**
             * Nullable`1
             * Format: int32
             */
            status?: number | null;
            /** IDictionary`2 */
            readonly errors?: {
                [key: string]: string[];
            } | null;
        };
        /** GetTraceError400Dto */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.GetTraceError400Dto": {
            /** List`1 */
            errors?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Data.PaymentTraceFailureErrorDetail"][] | null;
        };
        /**
         * GetTracesError400Dto
         * @description Is typeof(ValidationProblemDetails)
         */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.GetTracesError400Dto": {
            /** List`1 */
            errors?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Data.PaymentTraceFailureErrorDetail"][] | null;
        };
        /** Mt103PaymentErrorDto */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.Mt103PaymentErrorDto": {
            /** String */
            readonly type?: string | null;
            /** String */
            title?: string | null;
            /**
             * Nullable`1
             * Format: int32
             */
            status?: number | null;
            /** IDictionary`2 */
            readonly errors?: {
                [key: string]: string[];
            } | null;
        };
        /**
         * NoResponse
         * @description No data dto for Swagger generation
         */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.NoResponse": Record<string, never>;
        /** Pacs008CreatePayment200RejectedResponseExample */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.Pacs008CreatePayment200RejectedResponseExample": {
            cstmrPmtStsRpt?: components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.CustomPainDocuments.Pain002CreatePayment201AcceptedResponseExample.CustomerPaymentStatusReportV03"];
        };
        /**
         * Pacs008CreatePayment201AcceptedResponseExample
         * @description TODO: Rework to use pacs.002 types and example data.
         */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.Pacs008CreatePayment201AcceptedResponseExample": {
            cstmrPmtStsRpt?: components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.CustomPainDocuments.Pain002CreatePayment201AcceptedResponseExample.CustomerPaymentStatusReportV03"];
        };
        /**
         * Pacs008CreatePayment400Response
         * @description Dto for 400 response error type
         */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.Pacs008CreatePayment400Response": {
            /**
             * Guid
             * Format: uuid
             */
            readonly Id?: string;
            Type?: components["schemas"]["BankingCircle.Payments.Api.Enum.PaymentBulkCreationFailureType"];
            /** List`1 */
            readonly Errors?: components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.SwaggerPaymentBulkPacs008CreationErrorDetail"][] | null;
        };
        /**
         * Pacs008CreatePayment404Response
         * @description Swagger type for 404 errors
         */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.Pacs008CreatePayment404Response": {
            /** List`1 */
            errors?: components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.ExceptionErrorDetailDto"][] | null;
            /** String */
            account?: string | null;
            /** String */
            _links?: string | null;
        };
        /** Pacs008CreatePayment409Response */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.Pacs008CreatePayment409Response": {
            /**
             * Guid
             * Format: uuid
             */
            readonly Id?: string;
            Type?: components["schemas"]["BankingCircle.Payments.Api.Enum.PaymentBulkCreationFailureType"];
            /** List`1 */
            readonly Errors?: components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.SwaggerPaymentBulkPacs008CreationErrorDetailIdempotency"][] | null;
        };
        /** Pain002CreatePayment200RejectedResponseExample */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.Pain002CreatePayment200RejectedResponseExample": {
            cstmrPmtStsRpt?: components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.CustomPainDocuments.Pain002CreatePayment201AcceptedResponseExample.CustomerPaymentStatusReportV03"];
        };
        /** Pain002CreatePayment201AcceptedResponseExample */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.Pain002CreatePayment201AcceptedResponseExample": {
            cstmrPmtStsRpt?: components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.CustomPainDocuments.Pain002CreatePayment201AcceptedResponseExample.CustomerPaymentStatusReportV03"];
        };
        /**
         * Pain002CreatePayment400Response
         * @description Dto for 400 response error type
         */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.Pain002CreatePayment400Response": {
            /**
             * Guid
             * Format: uuid
             */
            readonly Id?: string;
            Type?: components["schemas"]["BankingCircle.Payments.Api.Enum.PaymentBulkCreationFailureType"];
            /** List`1 */
            readonly Errors?: components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.SwaggerPaymentBulkPainCreationErrorDetail"][] | null;
        };
        /**
         * Pain002CreatePayment404Response
         * @description Swagger type for 404 errors
         */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.Pain002CreatePayment404Response": {
            /** List`1 */
            errors?: components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.ExceptionErrorDetailDto"][] | null;
            /** String */
            account?: string | null;
            /** String */
            _links?: string | null;
        };
        /** Pain002CreatePayment409Response */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.Pain002CreatePayment409Response": {
            /**
             * Guid
             * Format: uuid
             */
            readonly Id?: string;
            Type?: components["schemas"]["BankingCircle.Payments.Api.Enum.PaymentBulkCreationFailureType"];
            /** List`1 */
            readonly Errors?: components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.SwaggerPaymentBulkPainCreationErrorDetailIdempotency"][] | null;
        };
        /**
         * PaymentBulkStatusExampleData
         * @description Is typeof(PaymentBulkStatusResponse)
         */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.PaymentBulkStatusExampleData": {
            status?: components["schemas"]["BankingCircle.Payments.Api.Enum.PaymentBulkStatus"];
        };
        /** PaymentRecallCreationResponseExample */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.PaymentRecallCreationResponseExample": {
            /**
             * Guid
             * Format: uuid
             * @description The unique identifier of the recall.
             */
            id?: string;
            /**
             * Guid
             * Format: uuid
             * @description The unique identifier of the payment that a recall has been requested for.
             */
            paymentId?: string;
            /**
             * Nullable`1
             * Format: uuid
             * @description The unique identifier of the incoming payment when a recall has been successful.
             *     Only available for successful recalls.
             */
            incomingPaymentId?: string | null;
            /**
             * String
             * @description The current status of the recall.
             */
            status?: string | null;
            /**
             * String
             * @description The current status reason of the recall.
             */
            statusReason?: string | null;
            /**
             * String
             * @description The current status code of the recall.
             *     Only available for rejected recalls.
             */
            statusCode?: string | null;
            /**
             * DateTimeOffset
             * Format: date-time
             * @description The creation date and time of the recall.
             */
            createdAt?: string;
            /**
             * DateTimeOffset
             * Format: date-time
             * @description The latest modification date and time of the recall.
             */
            modifiedAt?: string;
            recallReason?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Dto.Reference.RecallReason"];
        };
        /** PaymentStatusResponseExampleData */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.PaymentStatusResponseExampleData": {
            status?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Enum.PaymentStatus"];
        };
        /** PaymentTraceCancelResponseExample */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.PaymentTraceCancelResponseExample": {
            /**
             * Guid
             * Format: uuid
             * @description The unique id identifying the trace.
             */
            traceId?: string;
            /**
             * Guid
             * Format: uuid
             * @description The unique id identifing the payment, that a trace has been requested for.
             */
            paymentId?: string;
            /** String */
            contractReferenceNumber?: string | null;
            /**
             * String
             * @description The current status of the trace.
             */
            status?: string | null;
            /**
             * String
             * @description The current status reason of the trace.
             */
            statusReason?: string | null;
            /**
             * String
             * @description From instruction
             */
            valueDate?: string | null;
            to?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Dto.NameAccountIdentifier"];
            from?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Dto.NameAccountIdentifier"];
            /**
             * Decimal
             * Format: double
             * @description Payment amount from instruction
             */
            amount?: number;
            /**
             * String
             * @description DebtorAccount currency
             */
            currency?: string | null;
            /**
             * List`1
             * @description Remittance information line 1-4
             */
            paymentDetails?: string[] | null;
            /**
             * DateTimeOffset
             * Format: date-time
             * @description The creation date and time of the trace.
             */
            createdAt?: string;
            /**
             * DateTimeOffset
             * Format: date-time
             * @description The latest modification date and time of the trace.
             */
            modifiedAt?: string;
        };
        /** PaymentTraceCreationResponseExample */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.PaymentTraceCreationResponseExample": {
            /**
             * Guid
             * Format: uuid
             * @description The unique id identifying the trace.
             */
            traceId?: string;
            /**
             * Guid
             * Format: uuid
             * @description The unique id identifing the payment, that a trace has been requested for.
             */
            paymentId?: string;
            /** String */
            contractReferenceNumber?: string | null;
            /**
             * String
             * @description The current status of the trace.
             */
            status?: string | null;
            /**
             * String
             * @description The current status reason of the trace.
             */
            statusReason?: string | null;
            /**
             * String
             * @description From instruction
             */
            valueDate?: string | null;
            to?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Dto.NameAccountIdentifier"];
            from?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Dto.NameAccountIdentifier"];
            /**
             * Decimal
             * Format: double
             * @description Payment amount from instruction
             */
            amount?: number;
            /**
             * String
             * @description DebtorAccount currency
             */
            currency?: string | null;
            /**
             * List`1
             * @description Remittance information line 1-4
             */
            paymentDetails?: string[] | null;
            /**
             * DateTimeOffset
             * Format: date-time
             * @description The creation date and time of the trace.
             */
            createdAt?: string;
            /**
             * DateTimeOffset
             * Format: date-time
             * @description The latest modification date and time of the trace.
             */
            modifiedAt?: string;
        };
        /**
         * PaymentsError404Dto
         * @description Is typeOf(ErrorDto)
         */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.PaymentsError404Dto": {
            /** List`1 */
            errors?: components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.ExceptionErrorDetailDto"][] | null;
        };
        /**
         * PaymentsError500Dto
         * @description Is typeOf(ErrorDto)
         */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.PaymentsError500Dto": {
            /** List`1 */
            errors?: components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.ExceptionErrorDetailDto"][] | null;
        };
        /**
         * RecallsError404Dto
         * @description Is typeOf(ErrorDto)
         */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.RecallsError404Dto": {
            /** List`1 */
            errors?: components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.ExceptionErrorDetailDto"][] | null;
        };
        /**
         * RecallsError500Dto
         * @description Is typeOf(ErrorDto)
         */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.RecallsError500Dto": {
            /** List`1 */
            errors?: components["schemas"]["BankingCircle.Payments.Api.Data.SwaggerExampleData.ExceptionErrorDetailDto"][] | null;
        };
        /**
         * SwaggerPaymentBulkPacs008CreationErrorDetail
         * @description Swagger implementation for PaymentBulkPacs008CreationErrorDetail in order to control property names.
         *                 CamelCase is selected by default.
         *                 Newtonsoft.Json.JsonProperty used to control property names
         *                 NB: Swagger uses NewtonSoft
         */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.SwaggerPaymentBulkPacs008CreationErrorDetail": {
            ErrorCode?: components["schemas"]["BankingCircle.Payments.Api.Enum.PaymentBulkPacs008CreationErrorCode"];
            /** String */
            ErrorDescription?: string | null;
        };
        /** SwaggerPaymentBulkPacs008CreationErrorDetailIdempotency */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.SwaggerPaymentBulkPacs008CreationErrorDetailIdempotency": {
            /** String */
            PaymentBulkId?: string | null;
            ErrorCode?: components["schemas"]["BankingCircle.Payments.Api.Enum.PaymentBulkPacs008CreationErrorCode"];
            /** String */
            ErrorDescription?: string | null;
        };
        /**
         * SwaggerPaymentBulkPainCreationErrorDetail
         * @description Swagger implementation for PaymentBulkPainCreationErrorDetail in order to control property names.
         *                 CamelCase is selected by default.
         *                 Newtonsoft.Json.JsonProperty used to control property names
         *                 NB: Swagger uses NewtonSoft
         */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.SwaggerPaymentBulkPainCreationErrorDetail": {
            ErrorCode?: components["schemas"]["BankingCircle.Payments.Api.Enum.PaymentBulkPainCreationErrorCode"];
            /** String */
            ErrorDescription?: string | null;
        };
        /** SwaggerPaymentBulkPainCreationErrorDetailIdempotency */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.SwaggerPaymentBulkPainCreationErrorDetailIdempotency": {
            /** String */
            PaymentBulkId?: string | null;
            ErrorCode?: components["schemas"]["BankingCircle.Payments.Api.Enum.PaymentBulkPainCreationErrorCode"];
            /** String */
            ErrorDescription?: string | null;
        };
        /**
         * TracesError404Dto
         * @description Is typeOf(ErrorDto)
         */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.TracesError404Dto": {
            /** String */
            readonly type?: string | null;
            /** String */
            title?: string | null;
            /**
             * Nullable`1
             * Format: int32
             */
            status?: number | null;
            /** String */
            readonly traceId?: string | null;
        };
        /**
         * TracesError500Dto
         * @description Is typeOf(ErrorDto)
         */
        "BankingCircle.Payments.Api.Data.SwaggerExampleData.TracesError500Dto": {
            /** String */
            readonly type?: string | null;
            /** String */
            title?: string | null;
            /**
             * Nullable`1
             * Format: int32
             */
            status?: number | null;
            /** String */
            readonly traceId?: string | null;
        };
        /** PaymentTraceCancelFailureResponse */
        "BankingCircle.Payments.Api.Data.Trace.PaymentTraceCancelFailureResponse": {
            /** List`1 */
            errors?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Data.PaymentTraceFailureErrorDetail"][] | null;
        };
        /** PaymentTraceCreateFailureResponse */
        "BankingCircle.Payments.Api.Data.Trace.PaymentTraceCreateFailureResponse": {
            /** List`1 */
            errors?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Data.PaymentTraceFailureErrorDetail"][] | null;
        };
        /** PaymentTraceCreationRequest */
        "BankingCircle.Payments.Api.Data.Trace.PaymentTraceCreationRequest": {
            /**
             * Guid
             * Format: uuid
             * @description The unique identifier of the payment that is to be traced.
             *     Used as parameter to controllr endpoints
             */
            paymentId: string;
        };
        /**
         * PaymentApprovalApproveErrorCode
         * @enum {string}
         */
        "BankingCircle.Payments.Api.Enum.PaymentApprovalApproveErrorCode": "TransactionNotFound" | "InvalidPaymentStatusForRequestedOperation" | "RequestedActionAllowedOnSelfPayment" | "RequestedActionNotAllowedOnSelfPayment" | "InvalidRequestingUser" | "BulkPaymentApproveDeclinePermissionViolation" | "SinglePaymentApproveDeclinePermissionViolation";
        /**
         * PaymentApprovalDeclineErrorCode
         * @enum {string}
         */
        "BankingCircle.Payments.Api.Enum.PaymentApprovalDeclineErrorCode": "TransactionNotFound" | "InvalidPaymentStatusForRequestedOperation" | "RequestedActionAllowedOnSelfPayment" | "RequestedActionNotAllowedOnSelfPayment" | "InvalidRequestingUser" | "BulkPaymentApproveDeclinePermissionViolation" | "SinglePaymentApproveDeclinePermissionViolation";
        /**
         * PaymentBulkApprovalApproveErrorCode
         * @enum {string}
         */
        "BankingCircle.Payments.Api.Enum.PaymentBulkApprovalApproveErrorCode": "TransactionNotFound" | "InvalidPaymentStatusForRequestedOperation" | "RequestedActionAllowedOnSelfPayment" | "RequestedActionNotAllowedOnSelfPayment" | "InvalidRequestingUser" | "BulkPaymentApproveDeclinePermissionViolation" | "SinglePaymentApproveDeclinePermissionViolation";
        /**
         * PaymentBulkApprovalDeclineErrorCode
         * @enum {string}
         */
        "BankingCircle.Payments.Api.Enum.PaymentBulkApprovalDeclineErrorCode": "TransactionNotFound" | "InvalidPaymentStatusForRequestedOperation" | "RequestedActionAllowedOnSelfPayment" | "RequestedActionNotAllowedOnSelfPayment" | "InvalidRequestingUser" | "BulkPaymentApproveDeclinePermissionViolation" | "SinglePaymentApproveDeclinePermissionViolation";
        /**
         * PaymentBulkCancelErrorCode
         * @enum {string}
         */
        "BankingCircle.Payments.Api.Enum.PaymentBulkCancelErrorCode": "ValueDateInPast" | "ValueDateInFuture" | "InvalidPaymentStatusForRequestedOperation" | "TransactionNotFound" | "CancelOnlyUpcomingPayments" | "ExternalReferenceNumberSyncPending" | "BulkPaymentDeletePermissionViolation" | "SinglePaymentDeletePermissionViolation" | "UpcomingPaymentDeletePermissionViolation";
        /**
         * PaymentBulkCreationFailureType
         * @enum {string}
         */
        "BankingCircle.Payments.Api.Enum.PaymentBulkCreationFailureType": "Csv" | "Pain001" | "Pacs008";
        /**
         * PaymentBulkCreationStatus
         * @enum {string}
         */
        "BankingCircle.Payments.Api.Enum.PaymentBulkCreationStatus": "None" | "ScaPending" | "PendingApproval" | "Approved" | "PendingProcessing" | "DeclinedByApprover" | "Rejected" | "Processed" | "DeclinedByAuthorizer" | "ScaExpired" | "ScaFailed" | "Authorized";
        /**
         * PaymentBulkPacs008CreationErrorCode
         * @enum {string}
         */
        "BankingCircle.Payments.Api.Enum.PaymentBulkPacs008CreationErrorCode": "Unknown" | "UnsupportedDocumentVersion" | "UnsupportedAcceptResponseVersion" | "InvalidRequest" | "InvalidFile" | "InvalidFileSize" | "InvalidFileExtension" | "InvalidFileContentType" | "DuplicateFileUpload" | "UnsupportedAcceptValue" | "DuplicateIdempotencyKey" | "InvalidIdempotencyKey";
        /**
         * PaymentBulkPainCreationErrorCode
         * @enum {string}
         */
        "BankingCircle.Payments.Api.Enum.PaymentBulkPainCreationErrorCode": "Unknown" | "UnsupportedDocumentVersion" | "UnsupportedAcceptResponseVersion" | "InvalidRequest" | "InvalidFile" | "InvalidFileSize" | "InvalidFileExtension" | "InvalidFileContentType" | "DuplicateFileUpload" | "UnsupportedAcceptValue" | "DuplicateIdempotencyKey" | "InvalidIdempotencyKey";
        /**
         * PaymentBulkReAuthorizeErrorCode
         * @enum {string}
         */
        "BankingCircle.Payments.Api.Enum.PaymentBulkReAuthorizeErrorCode": "InvalidPaymentStatusForRequestedOperation" | "TransactionNotFound" | "RequestedActionAllowedOnSelfPayment";
        /**
         * PaymentBulkStatus
         * @enum {string}
         */
        "BankingCircle.Payments.Api.Enum.PaymentBulkStatus": "Unknown" | "ScaExpired" | "ScaFailed" | "ScaPending" | "PendingApproval" | "MissingFunding" | "PendingProcessing" | "Hold" | "PendingCancellation" | "PendingCancellationApproval" | "DeclinedByApprover" | "Rejected" | "Cancelled" | "Processed" | "Reversed" | "ScaDeclined" | "Approved";
        /**
         * PaymentCancelErrorCode
         * @enum {string}
         */
        "BankingCircle.Payments.Api.Enum.PaymentCancelErrorCode": "ValueDateInPast" | "ValueDateInFuture" | "InvalidPaymentStatusForRequestedOperation" | "TransactionNotFound" | "CancelOnlyUpcomingPayments" | "ExternalReferenceNumberSyncPending" | "BulkPaymentDeletePermissionViolation" | "SinglePaymentDeletePermissionViolation" | "UpcomingPaymentDeletePermissionViolation" | "DuplicateAction" | "RejectionPeriodExceeded" | "UnsupportedPaymentType";
        /**
         * PaymentReAuthorizeErrorCode
         * @enum {string}
         */
        "BankingCircle.Payments.Api.Enum.PaymentReAuthorizeErrorCode": "InvalidPaymentStatusForRequestedOperation" | "TransactionNotFound" | "RequestedActionAllowedOnSelfPayment" | "UnsupportedPaymentType";
        /**
         * AdditionalRemittanceInformation
         * @description Information shared between debtor and creditor<br />
         *                 Unstructured free text
         */
        "BankingCircle.Payments.DomainServices.Public.Data.AdditionalRemittanceInformation": {
            /**
             * String
             * @description Line one of additional remittance information
             *                 it will contain a return indicator.
             * @example RETN
             */
            line1?: string | null;
            /**
             * String
             * @description Line two of additional remittance information
             *                 it will contain a return reason code.
             * @example AC04
             */
            line2?: string | null;
            /**
             * String
             * @description Line three of additional remittance information
             *                 it will contain the original payment reference.
             * @example 010F10xxxx001007
             */
            line3?: string | null;
            /**
             * String
             * @description Line four of additional remittance information
             */
            line4?: string | null;
            /**
             * String
             * @description Line five of additional remittance information
             */
            line5?: string | null;
        };
        /** PaymentRecallFailureErrorDetail */
        "BankingCircle.Payments.DomainServices.Public.Data.PaymentRecallFailureErrorDetail": {
            /**
             * String
             * @description Name of property
             */
            propertyName?: string | null;
            errorCode?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Enum.PaymentRecallErrorCode"];
            /**
             * String
             * @description Description of the error (English)
             */
            errorDescription?: string | null;
        };
        /** PaymentRecallReAuthorizeError */
        "BankingCircle.Payments.DomainServices.Public.Data.PaymentRecallReAuthorizeError": {
            /**
             * String
             * @description Name of property
             */
            propertyName?: string | null;
            errorCode?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Enum.PaymentRecallErrorCode"];
            /**
             * String
             * @description Description of the error (English)
             */
            errorDescription?: string | null;
        };
        /**
         * PaymentTraceFailureErrorDetail
         * @description Response from traces controller endpoints on failure.
         */
        "BankingCircle.Payments.DomainServices.Public.Data.PaymentTraceFailureErrorDetail": {
            /**
             * String
             * @description Name of property
             */
            propertyName?: string | null;
            errorCode?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Enum.PaymentTraceErrorCode"];
            /**
             * String
             * @description Description of the error (English)
             */
            errorDescription?: string | null;
        };
        /**
         * CreditTransfer
         * @description Credit transfer between the two parties debtor and creditor<br />
         *                 Funds are transferred from debtor to creditor<br />
         *                 All fields are as communicated between the parties
         */
        "BankingCircle.Payments.DomainServices.Public.Data.Payments.CreditTransfer": {
            /** @description Account of debtor */
            debtorAccount?: components["schemas"]["BankingCircle.Utilities.Api.Data.AccountIdentifier"];
            /**
             * String
             * @description Name of debtor
             */
            debtorName?: string | null;
            /** @description Address of debtor */
            debtorAddress?: components["schemas"]["BankingCircle.Utilities.Api.Data.PostalAddress"];
            /** @description Transfer amount */
            amount?: components["schemas"]["BankingCircle.Utilities.Api.Data.Amount"];
            /** @description Value date of the transfer amount */
            valueDate?: components["schemas"]["BankingCircle.Utilities.Api.Data.Date"];
            /**
             * String
             * @description Who will be charged with the payment fee<br />
             *                 This field contains the requested ChargeBearer<br />
             *                 Example:
             *                  * SHA - Shared expense - Debtor and creditor each pay their own payment fee
             *                  * OUR - Our expense - Debtor pays for both debtor and creditor side payment fee
             *                  * BEN - Beneficiary hold expense - Creditor pays for both debtor and creditor side payment fee
             */
            chargeBearer?: string | null;
            /** @description Remittance information captures the free-text message between debtor and creditor */
            remittanceInformation?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Data.RemittanceInformation"];
            /** @description Additional remittance information */
            additionalRemittanceInformation?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Data.AdditionalRemittanceInformation"];
            /** @description Account of creditor */
            creditorAccount?: components["schemas"]["BankingCircle.Utilities.Api.Data.AccountIdentifier"];
            /**
             * String
             * @description Name of creditor
             */
            creditorName?: string | null;
            /** @description Address of creditor */
            creditorAddress?: components["schemas"]["BankingCircle.Utilities.Api.Data.PostalAddress"];
            /** @description Account of ultimate creditor<br />
             *                 This field will only be populated for incoming Agency and Correspondent payments<br /> */
            ultimateCreditorAccount?: components["schemas"]["BankingCircle.Utilities.Api.Data.AccountIdentifier"];
            /**
             * String
             * @description This field specifies which party will bear the charges for the transaction<br />
             *                 This field contains the charge bearer as specified in payment instruction<br />
             *                 Example:<br />
             *                  * SHA - Debtor and creditor each pay their own payment fee<br />
             *                  * OUR - Debtor pays for both debtor and creditor side payment fee<br />
             *                  * BEN - Creditor pays for both debtor and creditor side payment fee<br />
             */
            instructedChargeBearer?: string | null;
        };
        /** PaymentCreationErrorDetail */
        "BankingCircle.Payments.DomainServices.Public.Data.Payments.PaymentCreationErrorDetail": {
            /**
             * String
             * @description Name of property
             */
            propertyName?: string | null;
            errorCode?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Enum.PaymentInitiationErrorCodes"];
            /**
             * String
             * @description Description of the error (English)
             */
            errorDescription?: string | null;
        };
        /**
         * PaymentCreditorInformation
         * @description Processing and settlement details for the creditor
         */
        "BankingCircle.Payments.DomainServices.Public.Data.Payments.PaymentCreditorInformation": {
            /**
             * Guid
             * Format: uuid
             * @description Credit account identifier
             */
            accountId?: string;
            /** @description Credit account */
            account?: components["schemas"]["BankingCircle.Utilities.Api.Data.AccountIdentifier"];
            /**
             * Nullable`1
             * Format: uuid
             * @description Credit viban identifier<br />
             *                 Only provided if the transfer was done to a viban
             */
            vibanId?: string | null;
            /** @description Credit viban<br />
             *                 Only provided if the transfer was done to a viban */
            viban?: components["schemas"]["BankingCircle.Utilities.Api.Data.AccountIdentifier"];
            /** @description Credit amount */
            creditAmount?: components["schemas"]["BankingCircle.Utilities.Api.Data.Amount"];
            /** @description Value date of the credit amount */
            creditValueDate?: components["schemas"]["BankingCircle.Utilities.Api.Data.Date"];
            /**
             * Nullable`1
             * Format: double
             * @description Foreign exchange rate<br />
             *                 Exchange rate between transferred amount and credit amount<br />
             *                 Only provided when transfer currency and credit account currency differs
             */
            fxRate?: number | null;
        };
        /**
         * PaymentDebtorInformation
         * @description Processing and settlement details for the debtor
         */
        "BankingCircle.Payments.DomainServices.Public.Data.Payments.PaymentDebtorInformation": {
            /**
             * Nullable`1
             * Format: uuid
             * @description Payment bulk identifier<br />
             *                 Only provided when payment originates from a payment bulk
             */
            paymentBulkId?: string | null;
            /**
             * Guid
             * Format: uuid
             * @description Debit account identifier
             */
            accountId?: string;
            /** @description Debit account */
            account?: components["schemas"]["BankingCircle.Utilities.Api.Data.AccountIdentifier"];
            /**
             * Nullable`1
             * Format: uuid
             * @description Debit viban identifier<br />
             *                 Only provided if the transfer was done from a viban
             */
            vibanId?: string | null;
            /** @description Debit viban<br />
             *                 Only provided if the transfer was done from a viban */
            viban?: components["schemas"]["BankingCircle.Utilities.Api.Data.AccountIdentifier"];
            /** @description Date when the payment was instructed */
            instructedDate?: components["schemas"]["BankingCircle.Utilities.Api.Data.Date"];
            /** @description Debit amount */
            debitAmount?: components["schemas"]["BankingCircle.Utilities.Api.Data.Amount"];
            /** @description Value date of the debit amount */
            debitValueDate?: components["schemas"]["BankingCircle.Utilities.Api.Data.Date"];
            /**
             * Nullable`1
             * Format: double
             * @description Foreign exchange rate<br />
             *                 Exchange rate between debit amount and transfer amount<br />
             *                 Only provided when debit account currency and transfer currency differs
             */
            fxRate?: number | null;
            /** @description Original payment instruction */
            instruction?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Data.Payments.PaymentInstruction"];
        };
        /**
         * PaymentInstruction
         * @description Payment instruction is a copy of the details provided when creating a payment<br />
         *                 Only modification is yield from creditorAccount, creditorName and creditorAddress that will be populated from creditorId if this is provided
         */
        "BankingCircle.Payments.DomainServices.Public.Data.Payments.PaymentInstruction": {
            /** @description Account of the debtor */
            debtorAccount?: components["schemas"]["BankingCircle.Utilities.Api.Data.AccountIdentifier"];
            /** @description Viban of the debtor */
            debtorViban?: components["schemas"]["BankingCircle.Utilities.Api.Data.AccountIdentifier"];
            /**
             * String
             * @description Debtor own reference.<br />
             *                 In case of machine-to-machine may be an identifier of your own system.<br />
             *                 Is part of the resulting payment
             */
            debtorReference?: string | null;
            /**
             * String
             * @description Debtor own narrative.<br />
             *                 Purely for own reference -&gt; Is not part of the resulting payment
             */
            debtorNarrativeToSelf?: string | null;
            /**
             * Currency
             * @description Currency of the amount that will be remitted to the creditor
             */
            currencyOfTransfer?: string | null;
            /** @description Amount of the instruction.<br />
             *                 Condition: Amount currency must match either
             *                  * DebtorAccount currency. Example: I would like 100 EUR from my EUR account sent to CreditorAccount in GBP (CurrencyOfTransfer)
             *                  * CurrencyOfTransfer. Example: I would like to withdraw from my EUR account what is required to pay my invoice of exactly 100 GBP (CurrencyOfTransfer) to CreditorAccount */
            amount?: components["schemas"]["BankingCircle.Utilities.Api.Data.Amount"];
            /** @description The date on which you would like the payment to be executed. */
            requestedExecutionDate?: components["schemas"]["BankingCircle.Utilities.Api.Data.Date"];
            /**
             * String
             * @description This field specifies which party will bear the charges for the transaction<br />
             *                 This field contains the actual charge bearer<br />
             *                 Example:<br />
             *                  * SHA - Shared expense - Debtor and creditor each pay their own payment fee<br />
             *                  * OUR - Debtor pays for both debtor and creditor side payment fee<br />
             *                  * BEN - Creditor pays for both debtor and creditor side payment fee<br />
             */
            chargeBearer?: string | null;
            /** @description Remittance information captures the free-text message between debtor and creditor */
            remittanceInformation?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Data.RemittanceInformation"];
            /**
             * Nullable`1
             * Format: uuid
             * @description Reference to a predefined creditor
             */
            creditorId?: string | null;
            /** @description Account of the creditor<br />
             *                 Case: Was provided as part of payment instruction
             *                  * Yields provided creditor account
             *                 Case: creditorId was provided with the payment instruction
             *                  * Yields the creditor account of the predefined creditor */
            creditorAccount?: components["schemas"]["BankingCircle.Utilities.Api.Data.AccountIdentifier"];
            /**
             * String
             * @description Name of the creditor<br />
             *                 Case: Was provided as part of payment instruction
             *                  * Yields provided creditor name
             *                 Case: creditorId was provided with the payment instruction
             *                  * Yields the creditor name of the predefined creditor
             */
            creditorName?: string | null;
            /** @description Address of the creditor<br />
             *                 Case: Was provided as part of payment instruction
             *                  * Yields provided creditor address
             *                 Case: creditorId was provided with the payment instruction
             *                  * Yields the creditor address of the predefined creditor */
            creditorAddress?: components["schemas"]["BankingCircle.Utilities.Api.Data.PostalAddress"];
            /**
             * String
             * @description This field specifies which party will bear the charges for the transaction<br />
             *                 This field contains the charge bearer as specified in payment instruction<br />
             *                 Example:<br />
             *                  * SHA - Debtor and creditor each pay their own payment fee<br />
             *                  * OUR - Debtor pays for both debtor and creditor side payment fee<br />
             *                  * BEN - Creditor pays for both debtor and creditor side payment fee<br />
             */
            instructedChargeBearer?: string | null;
            /**
             * String
             * @description Clearing network as specified in payment instruction
             */
            clearingNetwork?: string | null;
            /**
             * String
             * @description Legal name of debtor as specified in payment instruction<br />
             */
            debtorName?: string | null;
            /** @description Address of the debtor as specified in payment instruction<br /> */
            debtorAddress?: components["schemas"]["BankingCircle.Utilities.Api.Data.PostalAddress"];
            /** @description Legal name of ultimate debtor as specified in payment instruction<br /> */
            ultimateDebtorAccount?: components["schemas"]["BankingCircle.Utilities.Api.Data.AccountIdentifier"];
            /**
             * String
             * @description Legal name of ultimate debtor<br />
             *                 Used for Payment on Behalf of
             */
            ultimateDebtorName?: string | null;
            /** @description Address of the ultimate debtor as specified in payment instruction<br /> */
            ultimateDebtorAddress?: components["schemas"]["BankingCircle.Utilities.Api.Data.PostalAddress"];
            /**
             * String
             * @description Client Customer Id as specified in payment instruction<br />
             *                 This field contains the Id assigned by you to your customer<br />
             *                 Used for Dynamic Sender Name solution<br />
             */
            clientCustomerId?: string | null;
        };
        /** PaymentStatusReason */
        "BankingCircle.Payments.DomainServices.Public.Data.Payments.PaymentStatusReason": {
            /**
             * String
             * @description Status reason code
             *     E.g. used for status Reversed
             */
            reasonCode?: string | null;
            /**
             * String
             * @description Status reason description
             *     E.g. used for status Reversed
             */
            reasonDescription?: string | null;
        };
        /**
         * RemittanceInformation
         * @description Information shared between debtor and creditor<br />
         *                 Unstructured free text
         */
        "BankingCircle.Payments.DomainServices.Public.Data.RemittanceInformation": {
            /**
             * String
             * @description Line one of remittance information<br />
             *                 Condition: Optional
             * @example Invoice 12345
             */
            line1?: string | null;
            /**
             * String
             * @description Line two of remittance information<br />
             *                 Condition: Optional
             */
            line2?: string | null;
            /**
             * String
             * @description Line three of remittance information<br />
             *                 Condition: Optional
             */
            line3?: string | null;
            /**
             * String
             * @description Line four of remittance information<br />
             *                 Condition: Optional
             */
            line4?: string | null;
        };
        /** AccountFormatDto */
        "BankingCircle.Payments.DomainServices.Public.Dto.AccountFormatDto": {
            /** String */
            countryCode?: string | null;
            /** String */
            accountNbType?: string | null;
            /** String */
            accountNbLocalName?: string | null;
            /** String */
            regexFormat?: string | null;
            /**
             * Int32
             * Format: int32
             */
            minLength?: number;
            /**
             * Int32
             * Format: int32
             */
            maxLength?: number;
        };
        /** NameAccountIdentifier */
        "BankingCircle.Payments.DomainServices.Public.Dto.NameAccountIdentifier": {
            /** String */
            name?: string | null;
            /** String */
            accountIdentifier?: string | null;
        };
        /** PaymentRecallReAuthorizeResponse */
        "BankingCircle.Payments.DomainServices.Public.Dto.PaymentRecallReAuthorizeResponse": {
            /** Boolean */
            isOk?: boolean;
            /** IEnumerable`1 */
            errors?: components["schemas"]["BankingCircle.Extensions.Utilities.Exceptions.Dto.ErrorDetailDto"][] | null;
        };
        /** PaymentRecallResponse */
        "BankingCircle.Payments.DomainServices.Public.Dto.PaymentRecallResponse": {
            /**
             * Guid
             * Format: uuid
             * @description The unique identifier of the recall.
             */
            id?: string;
            /**
             * Guid
             * Format: uuid
             * @description The unique identifier of the payment that a recall has been requested for.
             */
            paymentId?: string;
            /**
             * Nullable`1
             * Format: uuid
             * @description The unique identifier of the incoming payment when a recall has been successful.
             *     Only available for successful recalls.
             */
            incomingPaymentId?: string | null;
            /**
             * String
             * @description The current status of the recall.
             */
            status?: string | null;
            /**
             * String
             * @description The current status reason of the recall.
             */
            statusReason?: string | null;
            /**
             * String
             * @description The current status code of the recall.
             *     Only available for rejected recalls.
             */
            statusCode?: string | null;
            /**
             * DateTimeOffset
             * Format: date-time
             * @description The creation date and time of the recall.
             */
            createdAt?: string;
            /**
             * DateTimeOffset
             * Format: date-time
             * @description The latest modification date and time of the recall.
             */
            modifiedAt?: string;
            recallReason?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Dto.Reference.RecallReason"];
        };
        /** PaymentRecallStatusResponse */
        "BankingCircle.Payments.DomainServices.Public.Dto.PaymentRecallStatusResponse": {
            /** String */
            status?: string | null;
        };
        /**
         * PaymentTraceResponse
         * @description Payment trace response to client on create and get
         */
        "BankingCircle.Payments.DomainServices.Public.Dto.PaymentTraceResponse": {
            /**
             * Guid
             * Format: uuid
             * @description The unique id identifying the trace.
             */
            traceId?: string;
            /**
             * Guid
             * Format: uuid
             * @description The unique id identifing the payment, that a trace has been requested for.
             */
            paymentId?: string;
            /** String */
            contractReferenceNumber?: string | null;
            /**
             * String
             * @description The current status of the trace.
             */
            status?: string | null;
            /**
             * String
             * @description The current status reason of the trace.
             */
            statusReason?: string | null;
            /**
             * String
             * @description From instruction
             */
            valueDate?: string | null;
            /** @description Creditor name retrieved instruction Beneficiary name */
            to?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Dto.NameAccountIdentifier"];
            /** @description Debitor name retrieved instruction debtorVirtualAccount.CompanyName or debtorAccount.CompanyName */
            from?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Dto.NameAccountIdentifier"];
            /**
             * Decimal
             * Format: double
             * @description Payment amount from instruction
             */
            amount?: number;
            /**
             * String
             * @description DebtorAccount currency
             */
            currency?: string | null;
            /**
             * List`1
             * @description Remittance information line 1-4
             */
            paymentDetails?: string[] | null;
            /**
             * DateTimeOffset
             * Format: date-time
             * @description The creation date and time of the trace.
             */
            createdAt?: string;
            /**
             * DateTimeOffset
             * Format: date-time
             * @description The latest modification date and time of the trace.
             */
            modifiedAt?: string;
        };
        /**
         * PaymentTraceStatusResponse
         * @description Response to client on get-status
         */
        "BankingCircle.Payments.DomainServices.Public.Dto.PaymentTraceStatusResponse": {
            /** String */
            status?: string | null;
        };
        /**
         * Payment
         * @description Payment contains all information of your payment transaction. The information includes<br />
         *                  * DebtorInformation - Information private to the debtor of the transaction
         *                  * Transfer - Information shared between the parties
         *                  * CreditorInformation - Information private to the creditor of the transaction
         */
        "BankingCircle.Payments.DomainServices.Public.Dto.Payments.Payment": {
            /**
             * Guid
             * Format: uuid
             * @description Payment identifier
             */
            paymentId?: string;
            /**
             * String
             * @description Unique reference<br />
             *                 To be used in communication between operational officers to identify a payment
             */
            transactionReference?: string | null;
            /**
             * String
             * @description Token provided to ensure concurrent interactions are resolved orderly
             */
            concurrencyToken?: string | null;
            /** @description Classifies payment in terms of incoming payment, outgoing payment or own account transfer */
            classification?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Enum.PaymentClassification"];
            /** @description Classifies payment in terms of internal payment or external payment transfer */
            subClassification?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Enum.PaymentSubClassification"];
            /**
             * Nullable`1
             * @description Indicates whether the payment can be requested to be traced
             */
            isTraceable?: boolean | null;
            /** @description Current status */
            status?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Enum.PaymentStatus"];
            /**
             * String
             * @description Routing information
             */
            routingStatus?: string | null;
            /**
             * Nullable`1
             * Format: date-time
             * @description Timestamp for when the payment was processed
             */
            processedTimestamp?: string | null;
            /**
             * DateTimeOffset
             * Format: date-time
             * @description Timestamp for Current status
             */
            latestStatusChangedTimestamp?: string;
            /**
             * Nullable`1
             * @description Outgoing payment booked on your account
             */
            booked?: boolean | null;
            /**
             * Nullable`1
             * @description Outgoing payment reversed and reversal is booked on your account
             */
            reversalBooked?: boolean | null;
            /**
             * Nullable`1
             * @description Return indication of a payment. If true the payment is a return payment
             */
            return?: boolean | null;
            /**
             * String
             * @description Clearing or Scheme via which payment has been executed or sent outside (in case of Outgoing payments) or from scheme or clearing we have received a payment (in case of Incoming payments)
             */
            paymentRail?: string | null;
            /**
             * IEnumerable`1
             * @description Payment errors
             */
            errors?: components["schemas"]["BankingCircle.Extensions.Utilities.Exceptions.Dto.ErrorDetailDto"][] | null;
            /**
             * DateTimeOffset
             * Format: date-time
             * @description Details when latest change occured
             */
            lastChangedTimestamp?: string;
            /** @description Information only for debtor */
            debtorInformation?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Data.Payments.PaymentDebtorInformation"];
            /** @description Resulting credit transfer */
            transfer?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Data.Payments.CreditTransfer"];
            /** @description Information only for creditor */
            creditorInformation?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Data.Payments.PaymentCreditorInformation"];
            /**
             * IEnumerable`1
             * @description Current payment status reason when one exists
             */
            statusReasons?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Data.Payments.PaymentStatusReason"][] | null;
            /**
             * String
             * @description Purpose code as specified in payment instruction<br />
             *                 This field is used for CNH payments to China<br />
             */
            purposeCode?: string | null;
            /**
             * String
             * @description DirectDebitMandateId is a unique identifier assigned to a mandate issued by creditors under the SEPA Direct
             *                 Debit scheme, such as a customer number
             */
            directDebitMandateId?: string | null;
            /**
             * String
             * @description DirectDebitCreditorId is an unique identifier associated with each SEPA Direct Debit payment and identifies
             *                 the company making the payment
             */
            directDebitCreditorId?: string | null;
            /**
             * IEnumerable`1
             * @description Available reject Action
             */
            possibleActions?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Enum.UserAction"][] | null;
        };
        /**
         * PaymentCreationRequest
         * @description Payment Creation Request object
         */
        "BankingCircle.Payments.DomainServices.Public.Dto.Payments.PaymentCreationRequest": {
            /** @description The date on which you would like the payment to be executed. */
            requestedExecutionDate: components["schemas"]["BankingCircle.Utilities.Api.Data.Date"];
            /**
             * Nullable`1
             * Format: uuid
             * @description Unique identifier of the quote, previously retrieved through "fx/rates" endpoint.<br />
             *                 Optional field only used in case of Embedded FX RFQ flow
             * @example ccecb8aa-32d7-4c38-8187-ade667bb1b75
             */
            fxQuoteId?: string | null;
            /** @description Account of the debtor */
            debtorAccount: components["schemas"]["BankingCircle.Utilities.Api.Data.AccountIdentifier"];
            /** @description Viban of the debtor */
            debtorViban?: components["schemas"]["BankingCircle.Utilities.Api.Data.AccountIdentifier"];
            /**
             * String
             * @description Debtor own reference.<br />
             *                 In case of machine-to-machine may be an identifier of your own system.<br />
             *                 Purely for own reference -&gt; Is not part of the resulting payment
             */
            debtorReference?: string | null;
            /**
             * String
             * @description Debtor own narrative.<br />
             *                 Purely for own reference -&gt; Is not part of the resulting payment
             */
            debtorNarrativeToSelf?: string | null;
            /**
             * Currency
             * @description Currency of the amount that will be remitted to the creditor
             */
            currencyOfTransfer: string;
            /** @description Amount of the instruction.<br />
             *                 Condition: Amount currency must match either
             *                  * DebtorAccount currency. Example: I would like 100 EUR from my EUR account sent to CreditorAccount in GBP (CurrencyOfTransfer)
             *                  * CurrencyOfTransfer. Example: I would like to withdraw from my EUR account what is required to pay my invoice of exactly 100 GBP (CurrencyOfTransfer) to CreditorAccount */
            amount: components["schemas"]["BankingCircle.Utilities.Api.Data.Amount"];
            /**
             * String
             * @description Who will be charged with the payment fee<br />
             *                 Supported values are:<br />
             *                 "BEN" - Beneficiary bears Transaction charges"<br />
             *                 "OUR" - Ordering customer bears Transaction charges<br />
             *                 "SHA" - Transaction charges to be shared
             */
            chargeBearer: string;
            /** @description Remittance information captures the free-text message between debtor and creditor */
            remittanceInformation?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Data.RemittanceInformation"];
            /**
             * Nullable`1
             * Format: uuid
             * @description Reference to a predefined creditor<br />
             *                 Condition: Conditional<br />
             *                  * Either creditorId is provided
             *                  * Or creditorAccount, creditorName and creditorAddress properties are provided
             */
            creditorId?: string | null;
            /** @description Account of the creditor<br />
             *                 Condition: Conditional<br />
             *                  * Either creditorId is provided
             *                  * Or creditorAccount is provided */
            creditorAccount?: components["schemas"]["BankingCircle.Utilities.Api.Data.AccountIdentifier"];
            /**
             * String
             * @description Name of the creditor<br />
             *                 Condition: Conditional<br />
             *                  * Either creditorId is provided
             *                  * Or creditorName is provided
             */
            creditorName?: string | null;
            /** @description Address of the creditor<br />
             *                 Condition: Conditional<br />
             *                  * Either creditorId is provided
             *                  * Or creditorAddress is provided */
            creditorAddress?: components["schemas"]["BankingCircle.Utilities.Api.Data.PostalAddress"];
            /**
             * String
             * @description A clearing network a payment will be routed through.
             *                 Possible values: SEPAINST, SEPA, T2
             */
            clearingNetwork?: string | null;
            /**
             * String
             * @description Payment Purpose Code use for instructing payment to Mainland China
             *                 Valid values are: GOD, STR, CTF and OTF
             */
            purposeCode?: string | null;
        };
        /**
         * PaymentCreationRequestAgencyBanking
         * @description Payment creation request object for agency banking
         */
        "BankingCircle.Payments.DomainServices.Public.Dto.Payments.PaymentCreationRequestAgencyBanking": {
            /**
             * String
             * @description An identification, as assigned by an instructing party for an instructed party,
             *                 to unambiguously identify the instruction.<br />
             *                 Condition: Optional
             */
            instrId?: string | null;
            /** @description The date on which you would like the payment to be executed. */
            requestedExecutionDate: components["schemas"]["BankingCircle.Utilities.Api.Data.Date"];
            /** @description External Debtor Account that will be sent to the creditor. */
            debtorAccount: components["schemas"]["BankingCircle.Utilities.Api.Data.AccountIdentifier"];
            /**
             * String
             * @description Legal name of debtor<br />
             *                 Condition: Conditional<br />
             *                 * Mandatory if ultimateDebtorName is not provided
             *                 * Optional if ultimateDebtorName is provided
             */
            debtorName?: string | null;
            /** @description Address of the debtor<br />
             *                 Condition: Conditional<br />
             *                 * Line 1 mandatory if ultimateDebtorAddressLine1 is not provided
             *                 * Line 1 optional if ultimateDebtorAddressLine1 is provided */
            debtorAddress?: components["schemas"]["BankingCircle.Utilities.Api.Data.PostalAddress"];
            /**
             * String
             * @description Legal name of ultimate debtor<br />
             *                 Condition: Conditional<br />
             *                 * Mandatory if debtorName is not provided
             *                 * Optional if debtorName is provided
             */
            ultimateDebtorName?: string | null;
            /** @description Address of the ultimate debtor<br />
             *                 Condition: Conditional<br />
             *                 * Line 1 mandatory if DebtorAddressLine1 is not provided
             *                 * Line 1 optional if DebtorAddressLine1 is provided */
            ultimateDebtorAddress?: components["schemas"]["BankingCircle.Utilities.Api.Data.PostalAddress"];
            /**
             * String
             * @description Financial Institution code (BIC) for the ordering client
             */
            debtorAgentFinancialInstitution: string;
            /**
             * String
             * @description Account with Banking Circle on which the payments are settled.
             */
            debtorAgentAccount: string;
            /**
             * Currency
             * @description Currency of the amount that will be remitted to the creditor.<br />
             *                 If not provided, amount.Currency will be used as currencyOfTransfer.
             */
            currencyOfTransfer?: string | null;
            /** @description Amount of the instruction. */
            amount: components["schemas"]["BankingCircle.Utilities.Api.Data.Amount"];
            /**
             * String
             * @description Who will be charged with the payment fee.
             *                 Only supported value currently is "SHA" - Shared expense.
             */
            chargeBearer: string;
            /** @description Remittance information captures the free-text message between debtor and creditor */
            remittanceInformation?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Data.RemittanceInformation"];
            /**
             * Nullable`1
             * Format: uuid
             * @description Reference to a predefined creditor<br />
             *                 Condition: Conditional<br />
             *                  * Either creditorId is provided
             *                  * Or creditorAccount, creditorName and creditorAddress properties are provided
             */
            creditorId?: string | null;
            /** @description Account of the creditor<br />
             *                 Condition: Mandatory */
            creditorAccount?: components["schemas"]["BankingCircle.Utilities.Api.Data.AccountIdentifier"];
            /**
             * String
             * @description Name of the creditor<br />
             *                 Condition: Conditional<br />
             *                 * Mandatory if payment targets institutions other than Banking Circle
             *                 * Optional if payment target institution is Banking Circle
             */
            creditorName?: string | null;
            /** @description Address of the creditor<br />
             *                 Condition: Conditional<br />
             *                 * Line1 mandatory if payment targets institutions other than Banking Circle
             *                 * Line1 optional if payment target institution is Banking Circle */
            creditorAddress?: components["schemas"]["BankingCircle.Utilities.Api.Data.PostalAddress"];
            /**
             * String
             * @description A clearing network a payment will be routed through.<br />
             *                 Example:
             *                 * SEPAINST, SEPA, T2
             * @example SEPAINST
             */
            clearingNetwork?: string | null;
            /**
             * String
             * @description Payment Purpose Code use for instructing payment to Mainland China.<br />
             *                 Example:
             *                 * GOD, STR, CTF and OTF
             * @example GOD
             */
            purposeCode?: string | null;
            /**
             * Nullable`1
             * Format: uuid
             * @description Unique identifier of the quote, previously retrieved through "fx/rates" endpoint.
             *                 Optional field only used in case of FX RFQ flow
             * @example ccecb8aa-32d7-4c38-8187-ade667bb1b75
             */
            fxQuoteId?: string | null;
        };
        /**
         * OrderBy
         * @description How should the order of the result be delivered.
         * @enum {string}
         */
        "BankingCircle.Payments.DomainServices.Public.Dto.PredefinedBeneficiary.OrderBy": "NameAscending" | "NameDescending" | "CreatedByAscending" | "CreatedByDescending" | "AccountAscending" | "AccountDescending";
        /** PredefinedBeneficiaryDifferenceDto */
        "BankingCircle.Payments.DomainServices.Public.Dto.PredefinedBeneficiary.PredefinedBeneficiaryDifferenceDto": {
            original?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Dto.PredefinedBeneficiary.PredefinedBeneficiaryDto"];
            edited?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Dto.PredefinedBeneficiary.PredefinedBeneficiaryDto"];
            type?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Enum.EditTrailType"];
        };
        /** PredefinedBeneficiaryDto */
        "BankingCircle.Payments.DomainServices.Public.Dto.PredefinedBeneficiary.PredefinedBeneficiaryDto": {
            /**
             * Nullable`1
             * Format: uuid
             */
            id?: string | null;
            /**
             * Boolean
             * @description The state of the predefined beneficiary. When not specified in POST or PUT request, it's false by default.
             */
            active?: boolean;
            /**
             * Nullable`1
             * Format: uuid
             * @description Points to the PBG
             */
            predefinedBeneficiaryGroupId?: string | null;
            /**
             * String
             * @description For returning the predefined beneficiary group name
             */
            predefinedBeneficiaryGroupName?: string | null;
            /**
             * Nullable`1
             * Format: uuid
             * @description Grant direct access to specific user
             */
            userId?: string | null;
            /**
             * Nullable`1
             * Format: int64
             * @description The version number of the possible change of a predefined beneficiary (the edit trail version number)
             */
            version?: number | null;
            /**
             * Byte[]
             * Format: byte
             * @description Row version of the beneficiary. Used for optimistic currency control allowing service to detect concurrent changes.
             */
            rowVersion?: string | null;
            /**
             * String
             * @description Row Version encoded in Http Request base 64 safe format.
             */
            readonly rowVersionEncoded?: string | null;
            /**
             * String
             * @description The current state of the predefined beneficiary change, relevant only in GET request.
             */
            approvalFlowState?: string | null;
            /** String */
            beneficiaryAccount?: string | null;
            /** String */
            beneficiaryName?: string | null;
            /** String */
            beneficiaryAddressLine1?: string | null;
            /** String */
            beneficiaryAddressLine2?: string | null;
            /** String */
            beneficiaryAddressLine3?: string | null;
            /** String */
            beneficiaryFinancialInstitution?: string | null;
        };
        /** PredefinedBeneficiaryDtoPagedResponse */
        "BankingCircle.Payments.DomainServices.Public.Dto.PredefinedBeneficiary.PredefinedBeneficiaryDtoPagedResponse": {
            /** PredefinedBeneficiaryDto[] */
            predefinedBeneficiaries?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Dto.PredefinedBeneficiary.PredefinedBeneficiaryDto"][] | null;
            metaData?: components["schemas"]["BankingCircle.Utilities.ResponseFormat.MetaData"];
            account?: components["schemas"]["BankingCircle.Utilities.ResponseFormat.CommonAccountDto"];
            _links?: components["schemas"]["BankingCircle.Utilities.ResponseFormat.LinksDto"];
        };
        /** PredefinedBeneficiaryDtoResponse */
        "BankingCircle.Payments.DomainServices.Public.Dto.PredefinedBeneficiary.PredefinedBeneficiaryDtoResponse": {
            predefinedBeneficiary?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Dto.PredefinedBeneficiary.PredefinedBeneficiaryDto"];
            /** IEnumerable`1 */
            errors?: components["schemas"]["BankingCircle.Extensions.Utilities.Exceptions.Dto.ErrorDetailDto"][] | null;
            account?: components["schemas"]["BankingCircle.Utilities.ResponseFormat.CommonAccountDto"];
            _links?: components["schemas"]["BankingCircle.Utilities.ResponseFormat.LinksDto"];
        };
        /** PredefinedBeneficiaryGroupDto */
        "BankingCircle.Payments.DomainServices.Public.Dto.PredefinedBeneficiary.PredefinedBeneficiaryGroupDto": {
            /**
             * Guid
             * Format: uuid
             */
            id?: string;
            /** String */
            name?: string | null;
            /** String */
            description?: string | null;
            /**
             * Guid
             * Format: uuid
             */
            companyConfigurationGroupSettingId?: string;
            /** Boolean */
            active?: boolean;
            /**
             * Byte[]
             * Format: byte
             */
            rowVersion?: string | null;
            /**
             * Guid
             * Format: uuid
             */
            owner?: string;
        };
        /** PredefinedBeneficiaryGroupDtoPagedResponse */
        "BankingCircle.Payments.DomainServices.Public.Dto.PredefinedBeneficiary.PredefinedBeneficiaryGroupDtoPagedResponse": {
            /** PredefinedBeneficiaryGroupDto[] */
            predefinedBeneficiaryGroups?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Dto.PredefinedBeneficiary.PredefinedBeneficiaryGroupDto"][] | null;
            metaData?: components["schemas"]["BankingCircle.Utilities.ResponseFormat.MetaData"];
            account?: components["schemas"]["BankingCircle.Utilities.ResponseFormat.CommonAccountDto"];
            _links?: components["schemas"]["BankingCircle.Utilities.ResponseFormat.LinksDto"];
        };
        /** PredefinedBeneficiaryGroupDtoResponse */
        "BankingCircle.Payments.DomainServices.Public.Dto.PredefinedBeneficiary.PredefinedBeneficiaryGroupDtoResponse": {
            predefinedBeneficiaryGroup?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Dto.PredefinedBeneficiary.PredefinedBeneficiaryGroupDto"];
            account?: components["schemas"]["BankingCircle.Utilities.ResponseFormat.CommonAccountDto"];
            _links?: components["schemas"]["BankingCircle.Utilities.ResponseFormat.LinksDto"];
        };
        /** PredefinedBeneficiaryIdResponse */
        "BankingCircle.Payments.DomainServices.Public.Dto.PredefinedBeneficiary.PredefinedBeneficiaryIdResponse": {
            /**
             * Nullable`1
             * Format: uuid
             */
            id?: string | null;
            /** IEnumerable`1 */
            errors?: components["schemas"]["BankingCircle.Extensions.Utilities.Exceptions.Dto.ErrorDetailDto"][] | null;
            account?: components["schemas"]["BankingCircle.Utilities.ResponseFormat.CommonAccountDto"];
            _links?: components["schemas"]["BankingCircle.Utilities.ResponseFormat.LinksDto"];
        };
        /** PredefinedBeneficiaryValidateResponse */
        "BankingCircle.Payments.DomainServices.Public.Dto.PredefinedBeneficiary.PredefinedBeneficiaryValidateResponse": {
            /** IImmutableList`1 */
            readonly errorDetails?: components["schemas"]["BankingCircle.Extensions.Utilities.Exceptions.Dto.ErrorDetailDto"][] | null;
        };
        /** UserPredefinedBeneficiaryGroupAccessDto */
        "BankingCircle.Payments.DomainServices.Public.Dto.PredefinedBeneficiary.UserPredefinedBeneficiaryGroupAccessDto": {
            /**
             * Guid
             * Format: uuid
             */
            predefinedBeneficiaryGroupId?: string;
            /**
             * Guid
             * Format: uuid
             */
            userId?: string;
        };
        /** UserPredefinedBeneficiaryGroupAccessDtoPagedResponse */
        "BankingCircle.Payments.DomainServices.Public.Dto.PredefinedBeneficiary.UserPredefinedBeneficiaryGroupAccessDtoPagedResponse": {
            /** UserPredefinedBeneficiaryGroupAccessDto[] */
            userPredefinedBeneficiaryGroupAccess?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Dto.PredefinedBeneficiary.UserPredefinedBeneficiaryGroupAccessDto"][] | null;
            metaData?: components["schemas"]["BankingCircle.Utilities.ResponseFormat.MetaData"];
            account?: components["schemas"]["BankingCircle.Utilities.ResponseFormat.CommonAccountDto"];
            _links?: components["schemas"]["BankingCircle.Utilities.ResponseFormat.LinksDto"];
        };
        /** AmountLimit */
        "BankingCircle.Payments.DomainServices.Public.Dto.Reference.AmountLimit": {
            /** String */
            currency?: string | null;
            /**
             * Decimal
             * Format: double
             */
            minimumThreshold?: number;
            /**
             * Decimal
             * Format: double
             */
            maximumThreshold?: number;
        };
        /**
         * BranchIdentifier
         * @description Specified here:
         *                 http://confluence.sxp.saxopayments.com/display/FE/MDS+-+Branch
         */
        "BankingCircle.Payments.DomainServices.Public.Dto.Reference.BranchIdentifier": {
            /** String */
            branchCode?: string | null;
            /** String */
            name?: string | null;
            /** String */
            bic?: string | null;
            /** String */
            countryCode?: string | null;
            /** String */
            baseCurrency?: string | null;
            /** Boolean */
            active?: boolean;
            /**
             * String
             * @description Gets or sets national bank code (NationalId)
             */
            nationalId?: string | null;
        };
        /** ClearingNetworkDefinition */
        "BankingCircle.Payments.DomainServices.Public.Dto.Reference.ClearingNetworkDefinition": {
            /** String */
            clearingCode?: string | null;
            /** String */
            transferCurrency?: string | null;
            /**
             * Nullable`1
             * Format: double
             */
            maximumAmount?: number | null;
        };
        /**
         * CountryDefinitionForStaticData
         * @description A country defined after the ISO 3166, partially defined after:
         *                 http://confluence.sxp.saxopayments.com/display/FE/MDS+-+Country
         */
        "BankingCircle.Payments.DomainServices.Public.Dto.Reference.CountryDefinitionForStaticData": {
            /**
             * String
             * @description alpha2 iso-3166
             */
            nccPrefix?: string | null;
            /**
             * String
             * @description alpha2 iso-3166
             */
            code2?: string | null;
            /**
             * String
             * @description alpha3 iso-3166
             */
            code3?: string | null;
            /**
             * String
             * @description Numeric code iso-3166
             */
            digitCode?: string | null;
            /**
             * String
             * @description Name of country
             */
            name?: string | null;
            /** Boolean */
            isOpen?: boolean;
        };
        /**
         * CurrencyDefinition
         * @description Model of currencies
         *                 http://confluence.sxp.saxopayments.com/display/FE/MDS+-+Currency
         */
        "BankingCircle.Payments.DomainServices.Public.Dto.Reference.CurrencyDefinition": {
            /**
             * String
             * @description Currency code as defined in Alpha 3 ISO 4217
             */
            code?: string | null;
            /**
             * String
             * @description Name of currency
             */
            name?: string | null;
            /**
             * Int32
             * Format: int32
             * @description Number of decimals
             */
            decimals?: number;
            /**
             * Boolean
             * @description If the currency is active
             */
            active?: boolean;
            /**
             * String
             * @description Branch the currency definition applies to
             */
            branchCode?: string | null;
        };
        /**
         * ForbiddenCountry
         * @description http://confluence.sxp.saxopayments.com/display/FE/MDS+-+Forbidden+beneficiary+institution+country
         */
        "BankingCircle.Payments.DomainServices.Public.Dto.Reference.ForbiddenCountry": {
            /**
             * String
             * @description 2 char country code ISO 3166
             */
            countryCode?: string | null;
            /**
             * String
             * @description Branch key
             */
            branchCode?: string | null;
            /**
             * Boolean
             * @description Tells whether the validation is enabled and should be conducted.
             */
            enabled?: boolean;
        };
        /**
         * ForbiddenCurrencyCountry
         * @description Definition of forbidden currency to beneficial institution country
         */
        "BankingCircle.Payments.DomainServices.Public.Dto.Reference.ForbiddenCurrencyCountry": {
            /**
             * String
             * @description 3 char currency code ISO 4217 format
             */
            currencyCode?: string | null;
            /**
             * String
             * @description 2 char country code, ISO 3166 format
             */
            countryCode?: string | null;
            /**
             * String
             * @description Branch key
             */
            branchCode?: string | null;
            /**
             * Boolean
             * @description Tells whether the validation is enabled and should be conducted.
             */
            enabled?: boolean;
        };
        /** NccPrefix */
        "BankingCircle.Payments.DomainServices.Public.Dto.Reference.NccPrefix": {
            /** String */
            countryCode?: string | null;
            /** String */
            prefix?: string | null;
        };
        /** RecallReason */
        "BankingCircle.Payments.DomainServices.Public.Dto.Reference.RecallReason": {
            /** String */
            code?: string | null;
            /** String */
            description?: string | null;
        };
        /** ReferenceDataValueDates */
        "BankingCircle.Payments.DomainServices.Public.Dto.Reference.ReferenceDataValueDates": {
            /** IEnumerable`1 */
            valueDates?: string[] | null;
        };
        /** StaticData */
        "BankingCircle.Payments.DomainServices.Public.Dto.Reference.StaticData": {
            /** IEnumerable`1 */
            currencies?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Dto.Reference.CurrencyDefinition"][] | null;
            /** IEnumerable`1 */
            countries?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Dto.Reference.CountryDefinitionForStaticData"][] | null;
            /** IEnumerable`1 */
            clearingNetworks?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Dto.Reference.ClearingNetworkDefinition"][] | null;
            /** IDictionary`2 */
            currencyWiseAmountLimits?: {
                [key: string]: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Dto.Reference.AmountLimit"];
            } | null;
            /** IDictionary`2 */
            valueDateOffsets?: {
                [key: string]: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Dto.Reference.ValueDateAllowedDaysOffset"];
            } | null;
            /** IEnumerable`1 */
            forbiddenCountries?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Dto.Reference.ForbiddenCountry"][] | null;
            /** IEnumerable`1 */
            forbiddenCurrencyCountries?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Dto.Reference.ForbiddenCurrencyCountry"][] | null;
            /** IEnumerable`1 */
            valueDates?: string[] | null;
            /**
             * IEnumerable`1
             * @description Gets a list of known branches. This list is synchronized with data from FlexCube.
             */
            branchIdentifiers?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Dto.Reference.BranchIdentifier"][] | null;
            /**
             * IEnumerable`1
             * @description Gets a list of supported branch identifiers, i.e.: branches representing following countries: DK, DE, LU, GB.
             *     This list if maintained directly in BCConnect database.
             */
            supportedBranchIdentifiers?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Dto.Reference.BranchIdentifier"][] | null;
            /** ReadOnlyDictionary`2 */
            accountFormats?: {
                [key: string]: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Dto.AccountFormatDto"][];
            } | null;
            /** IEnumerable`1 */
            recallReasons?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Dto.Reference.RecallReason"][] | null;
            /** IEnumerable`1 */
            nccPrefixes?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Dto.Reference.NccPrefix"][] | null;
        };
        /** StaticDataCurrencies */
        "BankingCircle.Payments.DomainServices.Public.Dto.Reference.StaticDataCurrencies": {
            /** IEnumerable`1 */
            currencies?: components["schemas"]["BankingCircle.Payments.DomainServices.Public.Dto.Reference.CurrencyDefinition"][] | null;
        };
        /** ValueDateAllowedDaysOffset */
        "BankingCircle.Payments.DomainServices.Public.Dto.Reference.ValueDateAllowedDaysOffset": {
            /**
             * Int32
             * Format: int32
             */
            lookupDaysInPast?: number;
            /**
             * Int32
             * Format: int32
             */
            lookupDaysInFuture?: number;
            /** String */
            currency?: string | null;
            /** String */
            branchCode?: string | null;
            /**
             * Guid
             * Format: uuid
             */
            createdById?: string;
            /**
             * DateTimeOffset
             * Format: date-time
             */
            createdAt?: string;
            /**
             * Guid
             * Format: uuid
             */
            modifiedById?: string;
            /**
             * DateTimeOffset
             * Format: date-time
             */
            modifiedAt?: string;
            /**
             * Byte[]
             * Format: byte
             */
            rowVersion?: string | null;
        };
        /**
         * AccountFormatType
         * @enum {string}
         */
        "BankingCircle.Payments.DomainServices.Public.Enum.AccountFormatType": "Undefined" | "Iban" | "NotIban";
        /**
         * EditTrailType
         * @enum {string}
         */
        "BankingCircle.Payments.DomainServices.Public.Enum.EditTrailType": "Insert" | "Update" | "Delete";
        /**
         * FinancialInstitutionFormatType
         * @enum {string}
         */
        "BankingCircle.Payments.DomainServices.Public.Enum.FinancialInstitutionFormatType": "Undefined" | "Bic" | "NationalClearingCode";
        /**
         * PaymentClassification
         * @enum {string}
         */
        "BankingCircle.Payments.DomainServices.Public.Enum.PaymentClassification": "Incoming" | "Outgoing" | "Own";
        /**
         * PaymentCreationStatus
         * @enum {string}
         */
        "BankingCircle.Payments.DomainServices.Public.Enum.PaymentCreationStatus": "ScaPending" | "PendingApproval" | "MissingFunding" | "PendingProcessing" | "Processed" | "Approved";
        /**
         * PaymentInitiationErrorCodes
         * @enum {string}
         */
        "BankingCircle.Payments.DomainServices.Public.Enum.PaymentInitiationErrorCodes": "NoApprovers" | "ConflictingConfiguration" | "InvalidContentType" | "CreatePaymentWithAdhocCreditorPermissionViolation" | "InactiveDebtorAccount" | "InvalidDebtorAccount" | "AmbiguousDebtorAccount" | "CountryCodeInvalid" | "MandatoryMissing" | "BulkPaymentCreatePermissionViolation" | "CreateOutgoingPaymentPermissionViolation" | "CreateOwnPaymentPermissionViolation" | "InvalidAmountLength" | "InvalidAmountFormat" | "InvalidAmountPrecisionForCurrency" | "MaxEurThresholdViolation" | "MinEurThresholdViolation" | "InvalidCurrency" | "InvalidDateFormat" | "RequestedExecutionDateDaysInPastThresholdViolation" | "RequestedExecutionDateDaysInFutureThresholdViolation" | "InvalidAccountFormat" | "InvalidExternalAccount" | "InvalidExternalFinancialInstitution" | "ExternalFinancialInstitutionNotInSwift" | "InvalidCountryCodeAndIbanCombination" | "InvalidTransferDebitAndCreditToSameAccount" | "InvalidFinancialInstitution" | "ForbiddenTransferToCountry" | "InvalidAccountAndFinancialInstitutionCombination" | "InvalidLength" | "MissingChargeBearer" | "InvalidChargeBearer" | "InvalidDebtorViban" | "InvalidDebtorVibanRelation" | "InvalidDebtorAccountCurrencyAmountCurrencyAndTransferCurrencyCombination" | "InvalidCharacters" | "InvalidCreditorIdentifierAndAdHocCreditorExclusivityCombination" | "ProcessingError" | "InvalidCsvMaximumNumberOfLines" | "InvalidCsvMinimumNumberOfLines" | "InvalidCsvFileSize" | "InvalidCsvFileExtension" | "CancelOnlyUpcomingPayments" | "UpdateOfUnapprovedSchedule" | "TransactionNotFound" | "UserAmountLimitViolation" | "MissingFunding" | "RetentionPeriod" | "HighRiskPayment" | "ForbiddenCountry" | "ForbiddenCurrencyToCountry" | "DeclinedByCorrespondentBank" | "InvalidInternalAccount" | "DetailOfChargesMustBeSha" | "InvalidRequestedExecutionDate" | "CurrencyMismatchForOwnPayment" | "RemitterAndBeneficiaryAccountCannotBeSame" | "SepaPaymentMissingCreditorName" | "InvaliBicCode" | "UltimateCreditorRequried" | "InvalidRemitterOrCreditorCustomer" | "NotServicedCountry" | "UnresolvedCorrespondentBank" | "CurrencyMissing" | "FrozenAccount" | "DuplicateContract" | "ClosedFxDuetoMissingRateAsPerRequest" | "FcubsManualHandled" | "MissingExternalReferenceNumber" | "FcubsOffline" | "InvalidSourceCode" | "InvalidDebitAccount" | "InvalidCurrencyCode" | "RemitterOrCreditorDetailMissing" | "DetailOfChargesCodeRequired" | "InvalidAmount" | "InvalidBulkFileReference" | "AlreadyCancelled" | "CancellationDeclined" | "AlreadyOnHold" | "ValueDateShouldBeInFuture" | "OperationTypeMissing" | "PaymentCancelled" | "Stp00005" | "Stp00006" | "Stp00007" | "BulkPaymentApproveDeclinePermissionViolation" | "SinglePaymentApproveDeclinePermissionViolation" | "ApproveDeclineInProgress" | "SinglePaymentCreatePermissionViolation" | "CreatePaymentWithPredefinedCreditorPermissionViolation" | "BulkPaymentDeletePermissionViolation" | "SinglePaymentDeletePermissionViolation" | "UpcomingPaymentDeletePermissionViolation" | "InvalidCreditorIdentifier" | "InvalidConcurrencyToken" | "RequestedActionAllowedOnSelfPayment" | "RequestedActionNotAllowedOnSelfPayment" | "InvalidRequestingUser" | "PredefinedCreditorGroupRequired" | "InvalidPredefinedCreditorGroup" | "InvalidPaymentStatusForRequestedOperation" | "InvalidNumberOfCreditorGroupAssigned" | "CustomerIsFrozen" | "DebtitAndCreditAccountCannotBeSame" | "OutsideBeneficiaryCountryOfOperation" | "CurrencyHolidayMaintenanceNotFound" | "FailedToProcessRequest" | "FailedDuringFtUpload" | "AccountDormant" | "UltimateCreditorNameAndAddressRequried" | "FailedToObtainLock" | "TagCannotRepeatTwice" | "CpgValidationFailed" | "PaymentPausedForCancellation" | "OutsideRemitterCountryOfOperation" | "InvalidBeneficiaryAccount" | "InvalidAccountWithInstitution" | "DebitRestrictedForProduct" | "UserReferenceNumberNotUnique" | "NonGbIbanForFasterPaymentNotAllowed" | "OldFxRate" | "InvalidValue" | "AccountBalanceUpdateError" | "InvalidVirtualAccount" | "InvaliCreditorBicCode" | "InvalidFile" | "DuplicateFileUpload" | "InvalidFxQuoteId" | "RequestedExecutionDateCurrentBusinessDayViolation" | "InvalidAmountZero" | "PaymentOnBehalfOfViolation" | "ForbiddenBeneficiaryBank" | "ForbiddenOrderingBank" | "ForbiddenDistributingBank52" | "ForbiddenDistributingBank57" | "ForbiddenDistributingBank53" | "ForbiddenCollectingBank" | "InvalidOrderingPartyInformation" | "InvalidPoboOrCoboAdressDetails" | "CannotStoreData" | "InvalidClearingNetwork" | "RestrictedNetwork" | "NoSubtypeMaintainedToClearingNetwork" | "NoSubtypeAllowedToClearingNetwork" | "BeneficiaryRestrictedorForbiddentoNetwork" | "InvalidPurposeCode" | "MandatoryMissingPurposeCode" | "DuplicateIdempotencyKey" | "InvalidIdempotencyKey" | "DuplicateAction" | "RejectionPeriodExceeded" | "UnsupportedPaymentType";
        /**
         * PaymentRecallErrorCode
         * @enum {string}
         */
        "BankingCircle.Payments.DomainServices.Public.Enum.PaymentRecallErrorCode": "NotOutgoingPayment" | "NotInProcessedState" | "ExistingRecallRequestCurrentlyActiveOrAlreadySuccessfullyClosed" | "InvalidRecallReasonCodeSpecified" | "RecallFailed" | "InvalidRecallStatusForRequestedOperation" | "ReAuthorizeFailed" | "InvalidPaymentType";
        /**
         * PaymentStatus
         * @enum {string}
         */
        "BankingCircle.Payments.DomainServices.Public.Enum.PaymentStatus": "Unknown" | "ScaExpired" | "ScaFailed" | "ScaPending" | "PendingApproval" | "MissingFunding" | "PendingProcessing" | "Hold" | "PendingCancellation" | "PendingCancellationApproval" | "DeclinedByApprover" | "Rejected" | "Cancelled" | "Processed" | "Reversed" | "ScaDeclined" | "Approved";
        /**
         * PaymentSubClassification
         * @enum {string}
         */
        "BankingCircle.Payments.DomainServices.Public.Enum.PaymentSubClassification": "Undefined" | "Internal" | "External";
        /**
         * PaymentTraceErrorCode
         * @description Error codes for payment traces.
         * @enum {string}
         */
        "BankingCircle.Payments.DomainServices.Public.Enum.PaymentTraceErrorCode": "TraceUnknownError" | "BindingError" | "TraceCreateFailed" | "TracesNotSupportedForIncomingPayments" | "NotInProcessedState" | "TraceActive" | "TraceFinal" | "RecallActiveOrSuccessFullyClosed";
        /**
         * UserAction
         * @description Action available to the user
         * @enum {string}
         */
        "BankingCircle.Payments.DomainServices.Public.Enum.UserAction": "Cancel" | "Reject" | "Recall";
        /** AccountIdentifier */
        "BankingCircle.Utilities.Api.Data.AccountIdentifier": {
            /**
             * String
             * @description Account can be either an account number or an IBAN<br />
             *     Condition: Mandatory<br />
             *     Example:
             *      * IBAN: DK9389000000012345
             *      * Account number: 0000012345
             */
            account: string;
            /**
             * String
             * @description Financial institution is either a Bank Identifier Code (BIC) or a National Clearing Code (NCC)<br />
             *     Condition: Conditional
             *      * Optional: If Account is an IBAN
             *      * Mandatory: If Account is an account number<br />
             *     Example:
             *      * BIC (UK BIC): SAPYGB2LXXX
             *      * NCC (UK Sort Code): SC083002
             */
            financialInstitution?: string | null;
            /**
             * Country
             * @description Country representation<br />
             *                 Format: Alpha 2 ISO 3166-1<br />
             *                 Example: US
             */
            country?: string | null;
        };
        /**
         * Amount
         * @description An amount
         */
        "BankingCircle.Utilities.Api.Data.Amount": {
            /**
             * Currency
             * @description Amount currency
             */
            currency?: string | null;
            /**
             * Nullable`1
             * Format: double
             * @description Amount value
             */
            amount?: number | null;
        };
        /**
         * Date
         * @description Date representation<br />
         *                 Format: ISO 8601 | YYYY-MM-DD<br />
         *                 Example: 2001-01-28
         * @example 2024-09-25
         */
        "BankingCircle.Utilities.Api.Data.Date": string;
        /**
         * PostalAddress
         * @description A postal address
         */
        "BankingCircle.Utilities.Api.Data.PostalAddress": components["schemas"]["BankingCircle.Utilities.Api.Data.PostalAddressUnstructured"];
        /**
         * PostalAddressUnstructured
         * @description Postal address with unstructured data
         */
        "BankingCircle.Utilities.Api.Data.PostalAddressUnstructured": {
            /**
             * String
             * @description First line of unstructured data
             */
            line1: string;
            /**
             * String
             * @description Second line of unstructured data
             */
            line2?: string | null;
            /**
             * String
             * @description Third line of unstructured data
             */
            line3?: string | null;
        };
        /**
         * PageInfo
         * @description Page information of the responded Result Set
         */
        "BankingCircle.Utilities.Api.PageInfo": {
            /**
             * Int32
             * Format: int32
             * @description What page has been retuned
             */
            currentPage?: number;
            /**
             * Int32
             * Format: int32
             * @description The Result Set and CurrentPage was generated based on a number of allowed elements per page (PageSize)
             */
            pageSize?: number;
            /**
             * Nullable`1
             * Format: int32
             * @description Total of records
             */
            rowCount?: number | null;
        };
        /** CommonAccountDto */
        "BankingCircle.Utilities.ResponseFormat.CommonAccountDto": {
            /** String */
            iban?: string | null;
        };
        /** GenericResponseDto */
        "BankingCircle.Utilities.ResponseFormat.GenericResponseDto": {
            /**
             * Guid
             * Format: uuid
             */
            id?: string;
            /** String */
            status?: string | null;
            /** Boolean */
            isOk?: boolean;
            /** IEnumerable`1 */
            errors?: components["schemas"]["BankingCircle.Extensions.Utilities.Exceptions.Dto.ErrorDetailDto"][] | null;
        };
        /** LinkDto */
        "BankingCircle.Utilities.ResponseFormat.LinkDto": {
            /** String */
            href?: string | null;
        };
        /** LinksDto */
        "BankingCircle.Utilities.ResponseFormat.LinksDto": {
            balances?: components["schemas"]["BankingCircle.Utilities.ResponseFormat.LinkDto"];
            transactions?: components["schemas"]["BankingCircle.Utilities.ResponseFormat.LinkDto"];
            account?: components["schemas"]["BankingCircle.Utilities.ResponseFormat.LinkDto"];
            self?: components["schemas"]["BankingCircle.Utilities.ResponseFormat.LinkDto"];
            status?: components["schemas"]["BankingCircle.Utilities.ResponseFormat.LinkDto"];
        };
        /** MetaData */
        "BankingCircle.Utilities.ResponseFormat.MetaData": {
            /**
             * Int32
             * Format: int32
             */
            currentPage?: number;
            /**
             * Int32
             * Format: int32
             */
            pageCount?: number;
            /**
             * Int32
             * Format: int32
             */
            pageSize?: number;
            /**
             * Int32
             * Format: int32
             */
            rowCount?: number;
            /**
             * Int32
             * Format: int32
             */
            readonly firstRowOnPage?: number;
            /**
             * Int32
             * Format: int32
             */
            readonly lastRowOnPage?: number;
        };
        /** ResponseResultGeneric */
        "BankingCircle.Utilities.ResponseFormat.ResponseResultGeneric": {
            /** IEnumerable`1 */
            results?: components["schemas"]["BankingCircle.Utilities.ResponseFormat.GenericResponseDto"][] | null;
            account?: components["schemas"]["BankingCircle.Utilities.ResponseFormat.CommonAccountDto"];
            _links?: components["schemas"]["BankingCircle.Utilities.ResponseFormat.LinksDto"];
        };
        /** ProblemDetails */
        "Microsoft.AspNetCore.Mvc.ProblemDetails": {
            /** String */
            type?: string | null;
            /** String */
            title?: string | null;
            /**
             * Nullable`1
             * Format: int32
             */
            status?: number | null;
            /** String */
            detail?: string | null;
            /** String */
            instance?: string | null;
        } & {
            [key: string]: unknown;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
