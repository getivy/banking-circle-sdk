/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    "/api/v1/notificationselfservice/subscriptionEvent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add an event to a subscription */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CreateSubscriptionEventDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["SubscriptionEventCommandResult"];
                        "application/json": components["schemas"]["SubscriptionEventCommandResult"];
                        "text/json": components["schemas"]["SubscriptionEventCommandResult"];
                    };
                };
                /** @description Bad request.
                 *     Request is not correctly formulated or validation of input failed. Check the error description. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NotificationSelfServiceErrorResponse"];
                        "application/json": components["schemas"]["NotificationSelfServiceErrorResponse"];
                        "text/json": components["schemas"]["NotificationSelfServiceErrorResponse"];
                    };
                };
                /** @description Unauthorized. The server understood the request, but access is not allowed, i.e. calling user does not have access. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NoResponse"];
                        "application/json": components["schemas"]["NoResponse"];
                        "text/json": components["schemas"]["NoResponse"];
                    };
                };
                /** @description Internal Server Error. Something unexpected happened on BC Connect side. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notificationselfservice/subscriptionEvent/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete an event */
        delete: {
            parameters: {
                query?: never;
                header: {
                    /** @description Subscription event concurrency token also labeled as rowVersion in the GET responses */
                    "If-Match": string;
                };
                path: {
                    /** @description Subscription-event identifier */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized. The server understood the request, but access is not allowed, e.g. calling user does not have access or the concurrency token was wrong or not up to date. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NoResponse"];
                        "application/json": components["schemas"]["NoResponse"];
                        "text/json": components["schemas"]["NoResponse"];
                    };
                };
                /** @description Not found. There is no resource behind the URL, i.e. subscription does not exist. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NotificationSelfServiceErrorResponse"];
                        "application/json": components["schemas"]["NotificationSelfServiceErrorResponse"];
                        "text/json": components["schemas"]["NotificationSelfServiceErrorResponse"];
                    };
                };
                /** @description Internal Server Error. Something unexpected happened on BC Connect side. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notificationselfservice/subscription": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all subscriptions */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Number of pages returned.
                     *
                     *     Condition: Valid page number (1 to n)
                     * @example 1
                     */
                    PageNumber?: number;
                    /**
                     * @description Number of items returned per page.
                     *
                     *     Condition: Valid number of items (1 to 5000)
                     * @example 50
                     */
                    PageSize?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["SubscriptionQueryResult"];
                        "application/json": components["schemas"]["SubscriptionQueryResult"];
                        "text/json": components["schemas"]["SubscriptionQueryResult"];
                    };
                };
                /** @description Unauthorized. The server understood the request, but access is not allowed, i.e. calling user does not have access. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NoResponse"];
                        "application/json": components["schemas"]["NoResponse"];
                        "text/json": components["schemas"]["NoResponse"];
                    };
                };
                /** @description Internal Server Error. Something unexpected happened on BC Connect side. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /** Setup a subscription */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CreateSubscriptionDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["SubscriptionCommandResult"];
                        "application/json": components["schemas"]["SubscriptionCommandResult"];
                        "text/json": components["schemas"]["SubscriptionCommandResult"];
                    };
                };
                /** @description Bad request.
                 *     Request is not correctly formulated or validation of input failed. Check the error description. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NotificationSelfServiceErrorResponse"];
                        "application/json": components["schemas"]["NotificationSelfServiceErrorResponse"];
                        "text/json": components["schemas"]["NotificationSelfServiceErrorResponse"];
                    };
                };
                /** @description Unauthorized. The server understood the request, but access is not allowed, i.e. calling user does not have access. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NoResponse"];
                        "application/json": components["schemas"]["NoResponse"];
                        "text/json": components["schemas"]["NoResponse"];
                    };
                };
                /** @description Internal Server Error. Something unexpected happened on BC Connect side. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notificationselfservice/subscription/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get details of a subscription */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Subscription identifier */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["SubscriptionQueryResult"];
                        "application/json": components["schemas"]["SubscriptionQueryResult"];
                        "text/json": components["schemas"]["SubscriptionQueryResult"];
                    };
                };
                /** @description Unauthorized. The server understood the request, but access is not allowed, i.e. calling user does not have access. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NoResponse"];
                        "application/json": components["schemas"]["NoResponse"];
                        "text/json": components["schemas"]["NoResponse"];
                    };
                };
                /** @description Not found. There is no resource behind the URL, i.e. requesting a subscription that does not exist. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NotificationSelfServiceErrorResponse"];
                        "application/json": components["schemas"]["NotificationSelfServiceErrorResponse"];
                        "text/json": components["schemas"]["NotificationSelfServiceErrorResponse"];
                    };
                };
                /** @description Internal Server Error. Something unexpected happened on BC Connect side. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /** Update a subscription */
        put: {
            parameters: {
                query?: never;
                header: {
                    /** @description Subscription concurrency token also labeled as rowVersion in the GET responses */
                    "If-Match": string;
                };
                path: {
                    /** @description Subscription identifier */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateSubscriptionDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["SubscriptionCommandResult"];
                        "application/json": components["schemas"]["SubscriptionCommandResult"];
                        "text/json": components["schemas"]["SubscriptionCommandResult"];
                    };
                };
                /** @description Bad request.
                 *     Request is not correctly formulated or validation of input failed. Check the error description. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NotificationSelfServiceErrorResponse"];
                        "application/json": components["schemas"]["NotificationSelfServiceErrorResponse"];
                        "text/json": components["schemas"]["NotificationSelfServiceErrorResponse"];
                    };
                };
                /** @description Unauthorized. The server understood the request, but access is not allowed, e.g. calling user does not have access or the concurrency token was wrong or not up to date. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NoResponse"];
                        "application/json": components["schemas"]["NoResponse"];
                        "text/json": components["schemas"]["NoResponse"];
                    };
                };
                /** @description Not found. There is no resource behind the URL, i.e. requested subscription does not exist. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NotificationSelfServiceErrorResponse"];
                        "application/json": components["schemas"]["NotificationSelfServiceErrorResponse"];
                        "text/json": components["schemas"]["NotificationSelfServiceErrorResponse"];
                    };
                };
                /** @description Internal Server Error. Something unexpected happened on BC Connect side. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Delete a subscription */
        delete: {
            parameters: {
                query?: never;
                header: {
                    /** @description Subscription concurrency token also labeled as rowVersion in the GET responses */
                    "If-Match": string;
                };
                path: {
                    /** @description Subscription identifier */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized. The server understood the request, but access is not allowed, e.g. calling user does not have access or the concurrency token was wrong or not up to date. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NoResponse"];
                        "application/json": components["schemas"]["NoResponse"];
                        "text/json": components["schemas"]["NoResponse"];
                    };
                };
                /** @description Not found. There is no resource behind the URL, i.e. subscription does not exist. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NotificationSelfServiceErrorResponse"];
                        "application/json": components["schemas"]["NotificationSelfServiceErrorResponse"];
                        "text/json": components["schemas"]["NotificationSelfServiceErrorResponse"];
                    };
                };
                /** @description Internal Server Error. Something unexpected happened on BC Connect side. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notificationselfservice/subscription/{id}/activate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Activate a subscription */
        put: {
            parameters: {
                query?: never;
                header: {
                    /** @description Subscription concurrency token also labeled as rowVersion in the GET responses */
                    "If-Match": string;
                };
                path: {
                    /** @description Subscription identifier */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized.The server understood the request, but access is not allowed, e.g. calling user does not have access or the concurrency token was wrong or not up to date. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NoResponse"];
                        "application/json": components["schemas"]["NoResponse"];
                        "text/json": components["schemas"]["NoResponse"];
                    };
                };
                /** @description Not found. There is no resource behind the URL, i.e. subscription does not exist. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NotificationSelfServiceErrorResponse"];
                        "application/json": components["schemas"]["NotificationSelfServiceErrorResponse"];
                        "text/json": components["schemas"]["NotificationSelfServiceErrorResponse"];
                    };
                };
                /** @description Internal Server Error. Something unexpected happened on BC Connect side. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/notificationselfservice/subscription/{id}/deactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Deactivate a subscription */
        put: {
            parameters: {
                query?: never;
                header: {
                    /** @description Subscription concurrency token also labeled as rowVersion in the GET responses */
                    "If-Match": string;
                };
                path: {
                    /** @description Subscription identifier */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized. The server understood the request, but access is not allowed, e.g. calling user does not have access or the concurrency token was wrong or not up to date. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NoResponse"];
                        "application/json": components["schemas"]["NoResponse"];
                        "text/json": components["schemas"]["NoResponse"];
                    };
                };
                /** @description Not found. There is no resource behind the URL, i.e. subscription does not exist. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NotificationSelfServiceErrorResponse"];
                        "application/json": components["schemas"]["NotificationSelfServiceErrorResponse"];
                        "text/json": components["schemas"]["NotificationSelfServiceErrorResponse"];
                    };
                };
                /** @description Internal Server Error. Something unexpected happened on BC Connect side. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        CreateSubscriptionDto: {
            /** @description URL where notifications are sent to */
            endpoint: string;
            status: components["schemas"]["NotificationStatus"];
            /** @description 32 characters encryption key provided by you */
            encryptionKey: string;
            email?: string | null;
        };
        CreateSubscriptionEventDto: {
            /**
             * Format: uuid
             * @description Id of subscription to attach event to
             */
            subscriptionId: string;
            /** @description Company id(s) or bank acount id(s) */
            targetIds?: string[] | null;
            eventType: components["schemas"]["SubscriptionEventType"];
            targetType: components["schemas"]["TargetType"];
        };
        /** @enum {string} */
        ErrorCode: "NoError" | "DuplicateEntry" | "InvalidEncryptionKey" | "InvalidStatus" | "InvalidUrl" | "MaxNumberExceeded" | "UnsupportedValue" | "NotFound" | "NotSameTargetType" | "MissingInput" | "InvalidEmailAddress";
        NoResponse: Record<string, never>;
        NotificationSelfServiceErrorResponse: {
            errorCode?: components["schemas"]["ErrorCode"];
            errorMessage?: string | null;
        };
        /**
         * Format: int32
         * @description Status of the subscription
         *
         *     0 = None
         *     1 = Inactive
         *     2 = Active
         *     4 = Retired
         * @enum {integer}
         */
        NotificationStatus: 0 | 1 | 2 | 4;
        /** @description Subscription */
        SubscriptionCommandResult: {
            /**
             * Format: uuid
             * @description Subscription id
             */
            id?: string;
            /** @description URL where notifications are sent to */
            endpoint?: string | null;
            /** @description Whether subscription is active or inactive */
            isActive?: boolean;
            /** @description Whether mTLS security is enabled or disabled */
            mtlsEnabled?: boolean | null;
            status?: components["schemas"]["NotificationStatus"];
            /** @description Reason for the status, e.g. if deactivation is due to Banking Circle not being able to reach your endpoint after 10 retries */
            statusMessage?: string | null;
            /**
             * Format: byte
             * @description Concurrency token of the subscription which is needed for any updates or deletion
             */
            rowVersion?: string | null;
            /** Format: int32 */
            version?: number;
            /** @description EncryptionKey */
            encryptionKey?: string | null;
            email?: string | null;
            /** @description List of events */
            subscriptionEvents?: components["schemas"]["SubscriptionEventCommandResult"][] | null;
        };
        /** @description Subscription Event */
        SubscriptionEventCommandResult: {
            /** @description List of target details */
            subscriptionEventTargetDetails?: components["schemas"]["SubscriptionEventTargetDetailResult"][] | null;
            /**
             * Format: uuid
             * @description Subscription event identifier
             */
            id?: string;
            eventType?: components["schemas"]["SubscriptionEventType"];
            /** @description Whether subscription is active or inactive */
            isActive?: boolean;
            /**
             * Format: uuid
             * @description Subscription id
             */
            subscriptionId?: string;
            status?: components["schemas"]["NotificationStatus"];
            /**
             * Format: byte
             * @description Concurrency token of the event which is needed for deletion
             */
            rowVersion?: string | null;
        };
        /** @description Subscription event */
        SubscriptionEventQueryResult: {
            /** @description List of target details */
            subscriptionEventTargetDetails?: components["schemas"]["SubscriptionEventTargetDetailResult"][] | null;
            /**
             * Format: uuid
             * @description Subscription event identifier
             */
            id?: string;
            eventType?: components["schemas"]["SubscriptionEventType"];
            /** @description Whether the subscription is active or inactive */
            isActive?: boolean;
            /**
             * Format: uuid
             * @description Subscription id
             */
            subscriptionId?: string;
            status?: components["schemas"]["NotificationStatus"];
            /**
             * Format: byte
             * @description Concurrency token of the event which is needed for deletion
             */
            rowVersion?: string | null;
        };
        /** @description Event target details */
        SubscriptionEventTargetDetailResult: {
            /**
             * Format: uuid
             * @description Target detail identifier
             */
            id?: string;
            /**
             * Format: uuid
             * @description Company id(s) or account id(s)
             */
            targetId?: string;
            targetType?: components["schemas"]["TargetType"];
        };
        /**
         * @description The type of event that will trigger the subscription.
         *
         *     1 = IncomingPaymentProcessed
         *     2 = OutgoingPaymentRejected
         *     3 = OutgoingPaymentProcessed
         *     4 = MissingFunding
         *     5 = Reversed
         *     6 = OutgoingPaymentBooked
         *     7 = PaymentRouting
         *     8 = IncomingPaymentBooked
         *     10 = OutgoingDirectDebitPendingProcessing
         * @enum {string}
         */
        SubscriptionEventType: "Unknown" | "IncomingPaymentProcessed" | "OutgoingPaymentRejected" | "OutgoingPaymentProcessed" | "MissingFunding" | "Reversed" | "OutgoingPaymentBooked" | "PaymentRouting" | "IncomingPaymentBooked" | "OutgoingDirectDebitPendingProcessing";
        SubscriptionQueryResult: {
            /**
             * Format: uuid
             * @description Subscription id
             */
            id?: string;
            /** @description URL where notifications are sent to */
            endpoint?: string | null;
            /** @description Whether subscription is active or inactive */
            isActive?: boolean;
            /** @description Whether mTLS security is enabled or disabled */
            mtlsEnabled?: boolean | null;
            status?: components["schemas"]["NotificationStatus"];
            /** @description Reason for the status, e.g. if deactivation is due to Banking Circle not being able to reach your endpoint after 10 retries */
            statusMessage?: string | null;
            /**
             * Format: byte
             * @description Concurrency token of the subscription which is needed for any updates or deletion
             */
            rowVersion?: string | null;
            /** Format: int32 */
            version?: number;
            email?: string | null;
            /** @description List of events */
            subscriptionEvents?: components["schemas"]["SubscriptionEventQueryResult"][] | null;
        };
        /**
         * Format: int32
         * @description Type of target
         *
         *     0 = Account
         *     1 = Company
         *     2 = CompanyGroup
         * @enum {integer}
         */
        TargetType: 0 | 1 | 2;
        UpdateSubscriptionDto: {
            /** @description Updated 32 characters encryption key */
            encryptionKey?: string | null;
            /** @description Updated URL where notifications are sent to */
            endpoint?: string | null;
            email?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
