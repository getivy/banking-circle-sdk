/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    "/api/v1/accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all accounts */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Company identifier of the company owning accounts<br />
                     *     Criteria: Exact match of Account.ownedByCompanyId
                     * @example 3a362d9a-467f-4821-b6aa-dbdd8ffae721
                     */
                    OwnedByCompanyId?: string;
                    /**
                     * @description Currency of accounts<br />
                     *     Criteria: Exact match of Account.currency<br />
                     *     Format: Alpha 3 ISO 4217
                     * @example EUR
                     */
                    Currency?: string;
                    /**
                     * @description Status of accounts<br />
                     *     Criteria: Exact match of Account.status
                     * @example Active
                     */
                    Status?: components["schemas"]["AccountStatus"];
                    /**
                     * @description When the accounts were opened<br />
                     *     OpeningDateFrom and OpeningDateTo form a date range<br />
                     *     Criteria: Account.openingDate must be equal or later<br />
                     *     Format: ISO 8601 | YYYY-MM-DD
                     * @example 2001-11-01
                     */
                    OpeningDateFrom?: string;
                    /**
                     * @description When the accounts were opened<br />
                     *     OpeningDateFrom and OpeningDateTo form a date range<br />
                     *     Criteria: Account.openingDate must be equal or earlier<br />
                     *     Format: ISO 8601 | YYYY-MM-DD
                     * @example 2001-11-01
                     */
                    OpeningDateTo?: string;
                    /**
                     * @description When the accounts were closed<br />
                     *     ClosingDateFrom and ClosingDateTo form a date range<br />
                     *     Criteria: Account.closingDate must be equal or later<br />
                     *     Format: ISO 8601 | YYYY-MM-DD
                     * @example 2001-11-01
                     */
                    ClosingDateFrom?: string;
                    /**
                     * @description When the accounts were closed<br />
                     *     ClosingDateFrom and ClosingDateTo form a date range<br />
                     *     Criteria: Account.closingDate must be equal or earlier<br />
                     *     Format: ISO 8601 | YYYY-MM-DD
                     * @example 2001-11-01
                     */
                    ClosingDateTo?: string;
                    /**
                     * @description Number of pages returned.<br />
                     *     Condition: Valid page number(1 to n)<br />
                     * @example 10
                     */
                    PageNumber?: number;
                    /**
                     * @description No. of items returned per page.<br />
                     *     Condition: Between 1 and 5000<br />
                     * @example 50
                     */
                    PageSize?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AccountDtoResponsePagedResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/accounts/{account-id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get details of an account */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Account identifier | Account.accountId */
                    "account-id": string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AccountDtoResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/accounts/{account-id}/balances": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get balances of an account */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Number of the numbered pages of the result set<br />
                     *     PageNumber and PageSize details the pagination information<br />
                     *     Condition: Larger than zero<br />
                     * @example 10
                     */
                    PageNumber?: number;
                    /**
                     * @description Size of the page of the result set<br />
                     *     PageNumber and PageSize details the pagination information<br />
                     *     Condition: Betweeen 1 and 5000<br />
                     * @example 50
                     */
                    PageSize?: number;
                };
                header?: never;
                path: {
                    /** @description Account identifier | Account.accountId */
                    "account-id": string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AccountBalancePagedResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/accounts/{account-id}/bookings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get bookings of an account */
        get: {
            parameters: {
                query: {
                    /**
                     * @description Minimum value date of bookings<br />
                     *     ValueDateFrom and ValueDateTo form a date range<br />
                     *     Only data from current and previous year is available online. Please contact Client Services to access older data<br />
                     *     Criteria: AccountBooking.ValueDate must be equal or later<br />
                     *     Format: ISO 8601 | YYYY-MM-DD<br />
                     * @example 2001-11-01
                     */
                    ValueDateFrom: string;
                    /**
                     * @description Maximum value date of bookings<br />
                     *     ValueDateFrom and ValueDateTo form a date range<br />
                     *     Format: ISO 8601 | YYYY-MM-DD<br />
                     * @example 2001-11-01
                     */
                    ValueDateTo?: string;
                    /**
                     * @description Minimum amount value of bookings<br />
                     *     AmountFrom and AmountTo form a amount value range<br />
                     *     Criteria: AccountBooking.Amount.Amount must be equal or larger<br />
                     * @example 10
                     */
                    AmountFrom?: number;
                    /**
                     * @description Maximum amount value of bookings<br />
                     *     AmountFrom and AmountTo form a amount value range<br />
                     *     Criteria: AccountBooking.Amount.Amount must be equal or smaller<br />
                     * @example 1000
                     */
                    AmountTo?: number;
                    /** @description Filter on bookings that contain the entered information in the remittance field.<br />
                     *     Criteria: AccountBooking.Details contains 'PartialDetails' - Case insensitive<br /> */
                    PartialDetails?: string;
                    /** @description Filter on bookings where the name of the counterparty contains the entered information.<br />
                     *     Criteria: AccountBooking.Details contains 'PartialDetails' - Case insensitive<br /> */
                    PartialCounterparty?: string;
                    /** @description Filter on bookings where counterparty account matches the specified account no. <br />
                     *     Criteria: Exact match of AccountBooking.CounterpartyAccount.Account<br /> */
                    CounterpartyAccount?: string;
                    /** @description Filter on bookings where counterparty country code is retrieved from the BIC/NCC. */
                    CounterpartyCountryCode?: string;
                    /**
                     * @description Number of the numbered pages of the result set<br />
                     *     PageNumber and PageSize details the pagination information<br />
                     *     Condition: Larger than zero<br />
                     *     Default: 1
                     * @example 10
                     */
                    PageNumber?: number;
                    /**
                     * @description Size of the page of the result set<br />
                     *     PageNumber and PageSize details the pagination information<br />
                     *     Condition: Between 1 and 5000<br />
                     *     Default: 50
                     * @example 50
                     */
                    PageSize?: number;
                };
                header?: never;
                path: {
                    /** @description Account identifier | Account.accountId */
                    "account-id": string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AccountBookingPagedResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Account: {
            /**
             * Format: uuid
             * @description Account (technical) identifier
             */
            accountId?: string;
            /** @description Description of the account */
            accountDescription?: string | null;
            /** @description Friendly name */
            friendlyName?: string | null;
            /** @description Account (natural) indentifier */
            accountIdentifiers?: components["schemas"]["AccountIdentifier"][] | null;
            status?: components["schemas"]["AccountStatus"];
            /** @description Currency representation<br />
             *     Format: Alpha 3-5 character ISO 20022<br />
             *     Example: EUR */
            currency?: string | null;
            /**
             * Format: date
             * @description Date representation<br />
             *     Format: ISO 8601 | YYYY-MM-DD<br />
             *     Example: 2001-01-28
             */
            openingDate?: string | null;
            /**
             * Format: date
             * @description Date representation<br />
             *     Format: ISO 8601 | YYYY-MM-DD<br />
             *     Example: 2001-01-28
             */
            closingDate?: string | null;
            /**
             * Format: uuid
             * @description Identifier of the company with the account
             */
            ownedByCompanyId?: string;
            /** @description Name of the owner company */
            ownedByCompanyName?: string | null;
            protectionType?: components["schemas"]["ProtectionType"];
            /** @description Latest balances of the account */
            balances?: components["schemas"]["AccountBalance"][] | null;
        };
        AccountBalance: {
            type?: components["schemas"]["AccountBalanceType"];
            /** @description Currency representation<br />
             *     Format: Alpha 3-5 character ISO 20022<br />
             *     Example: EUR */
            currency?: string | null;
            /**
             * Format: double
             * @description Begin of day balance amount
             */
            beginOfDayAmount?: number;
            /**
             * Format: date
             * @description Date representation<br />
             *     Format: ISO 8601 | YYYY-MM-DD<br />
             *     Example: 2001-01-28
             */
            financialDate?: string | null;
            /**
             * Format: double
             * @description Change to balance since start of day
             */
            intraDayAmount?: number;
            /**
             * Format: date-time
             * @description When the last booking occured
             */
            lastTransactionTimestamp?: string | null;
            /**
             * Format: double
             * @description Amount currently withheld by Banking Circle from Sepa Direct Debit settlement payments
             */
            blockedBalanceAmount?: number | null;
        };
        AccountBalanceDto: {
            currency?: string | null;
            /** Format: double */
            beginOfDayBalance?: number;
            /** Format: double */
            intraDayBalance?: number;
            /** Format: double */
            totalBalance?: number;
            /** Format: date-time */
            modifiedAt?: string;
            /** Format: date-time */
            businessDate?: string;
            /** Format: double */
            blockedBalanceAmount?: number | null;
        };
        AccountBalancePagedResponse: {
            /** @description Contains elements resulting from your query */
            result?: components["schemas"]["AccountBalance"][] | null;
            pageInfo?: components["schemas"]["PageInfo"];
        };
        /** @enum {string} */
        AccountBalanceType: "CurrentBalance";
        AccountBooking: {
            /**
             * Format: uuid
             * @description Booking identifier
             */
            bookingId?: string;
            /**
             * @description Unique reference<br />
             *     To be used in communication between operational officers to identify a booking<br />
             *     It is also known as the “transactionReference” in other endpoints
             * @example 010F104231850006
             */
            bookingReference?: string | null;
            transactionType?: components["schemas"]["BookingTransactionType"];
            /**
             * Format: uuid
             * @description It can be used to identify the transaction resulting in this booking<br />
             *     It is also known as the “paymentId” in other endpoints
             */
            transactionId?: string | null;
            /** @description Debtor own reference.<br />
             *     In case of machine-to-machine may be an identifier of your own system. */
            transactionDebtorReference?: string | null;
            /**
             * Format: uuid
             * @description Account (technical) identifier of the account where the booking was posted
             */
            accountId?: string;
            account?: components["schemas"]["AccountIdentifier"];
            /**
             * Format: uuid
             * @description Viban (technical) identifier<br />
             *     Only provided if the underlying transaction utilize a viban
             */
            vibanId?: string | null;
            viban?: components["schemas"]["AccountIdentifier"];
            /**
             * Format: date
             * @description Date representation<br />
             *     Format: ISO 8601 | YYYY-MM-DD<br />
             *     Example: 2001-01-28
             */
            valueDate?: string | null;
            /**
             * Format: date
             * @description Date representation<br />
             *     Format: ISO 8601 | YYYY-MM-DD<br />
             *     Example: 2001-01-28
             */
            transactionDate?: string | null;
            creditDebitIndicator?: components["schemas"]["CreditDebitIndicator"];
            amount?: components["schemas"]["Amount"];
            balance?: components["schemas"]["Amount"];
            /** @description Name of the counterparty involved in the transaction leading to the booking */
            counterparty?: string | null;
            counterpartyAccount?: components["schemas"]["AccountIdentifier"];
            /**
             * @description Textual details of the transaction leading to the booking<br />
             *     E.g. Payment.RemittanceInformation
             * @example Remittance details
             */
            details?: string | null;
        };
        AccountBookingPagedResponse: {
            /** @description Contains elements resulting from your query */
            result?: components["schemas"]["AccountBooking"][] | null;
            pageInfo?: components["schemas"]["PageInfo"];
        };
        AccountClearingDto: {
            countryCode?: string | null;
            clearingScheme?: string | null;
            localFormat?: string | null;
            bic?: string | null;
            clearingCode?: string | null;
            currencyCode?: string | null;
        };
        AccountDto: {
            /** Format: uuid */
            id?: string;
            accountNumber?: string | null;
            accountType?: components["schemas"]["AccountTypeDto"];
            accountStatus?: components["schemas"]["AccountStatusDto"];
            protectionType?: components["schemas"]["RemoteProtectionType"];
            companyNumber?: string | null;
            companyName?: string | null;
            /** Format: uuid */
            companyId?: string;
            accountIban?: string | null;
            ibans?: string[] | null;
            currency?: string | null;
            friendlyName?: string | null;
            accountDescription?: string | null;
            isVirtual?: boolean;
            /** Format: date-time */
            openingDate?: string;
            /** Format: date-time */
            closingDate?: string | null;
            branch?: components["schemas"]["BranchDto"];
            branchCode?: string | null;
            accountBalances?: components["schemas"]["AccountBalanceDto"][] | null;
            accountClearings?: components["schemas"]["AccountClearingDto"][] | null;
            userAccountAccesses?: components["schemas"]["UserAccountAccessAndPermissionsDto"][] | null;
            /** Format: uuid */
            companyGroupConfigurationId?: string;
            roles?: string[] | null;
            permissions?: string[] | null;
            paymentRules?: string[] | null;
            ownDescription?: string | null;
            /** Format: double */
            netInterestRate?: number | null;
            interestCalcMethod?: string | null;
            /** Format: double */
            overdraftRate?: number | null;
            overdraftRateCalcMethod?: string | null;
            /** Format: double */
            blockedBalanceAmount?: number | null;
        };
        AccountDtoResponse: {
            /**
             * Format: uuid
             * @description Account (technical) identifier
             */
            accountId?: string;
            /** @description Description of the account */
            accountDescription?: string | null;
            /** @description Account (natural) indentifier */
            accountIdentifiers?: components["schemas"]["AccountIdentifier"][] | null;
            /** @description An account can be represented by several IBANs. The default IBAN can be found in accountIdentifiers. */
            ibans?: string[] | null;
            status?: components["schemas"]["AccountStatus"];
            /** @description Currency representation<br />
             *     Format: Alpha 3-5 character ISO 20022<br />
             *     Example: EUR */
            currency?: string | null;
            /**
             * Format: date
             * @description Date representation<br />
             *     Format: ISO 8601 | YYYY-MM-DD<br />
             *     Example: 2001-01-28
             */
            openingDate?: string | null;
            /**
             * Format: date
             * @description Date representation<br />
             *     Format: ISO 8601 | YYYY-MM-DD<br />
             *     Example: 2001-01-28
             */
            closingDate?: string | null;
            /**
             * Format: uuid
             * @description Identifier of the company with the account
             */
            ownedByCompanyId?: string;
            /** @description Name of the owner company */
            ownedByCompanyName?: string | null;
            /** @description CompanyNumber of the owner company */
            ownedByCompanyNumber?: string | null;
            protectionType?: components["schemas"]["ProtectionType"];
            /** @description Latest balances of the account */
            balances?: components["schemas"]["AccountBalance"][] | null;
            /** @description User-defined name for the account. Visible by all users with access to the account. */
            friendlyName?: string | null;
            /**
             * Format: double
             * @description Example: 3.25
             */
            netInterestRate?: number | null;
            /** @description Example: ACT/360 */
            interestCalcMethod?: string | null;
            /**
             * Format: double
             * @description Interest charged on overdrawn balance
             *     Example: 1.10
             */
            overdraftRate?: number | null;
            /** @description The method used for the overdraft interest calculation
             *     Example: ACT/360 */
            overdraftRateCalcMethod?: string | null;
        };
        AccountDtoResponsePagedResponse: {
            /** @description Contains elements resulting from your query */
            result?: components["schemas"]["AccountDtoResponse"][] | null;
            pageInfo?: components["schemas"]["PageInfo"];
        };
        AccountForUpdateDto: {
            friendlyName?: string | null;
        };
        AccountIdentifier: {
            /** @description Account can be either an account number or an IBAN<br />
             *     Condition: Mandatory<br />
             *     Example:
             *      * IBAN: DK9389000000012345
             *      * Account number: 0000012345 */
            account: string;
            /** @description Financial institution is either a Bank Identifier Code (BIC) or a National Clearing Code (NCC)<br />
             *     Condition: Conditional
             *      * Optional: If Account is an IBAN
             *      * Mandatory: If Account is an account number<br />
             *     Example:
             *      * BIC (UK BIC): SAPYGB2LXXX
             *      * NCC (UK Sort Code): 083002 */
            financialInstitution?: string | null;
            /** @description Condition: Conditional
             *      * Optional: If Account is an IBAN
             *      * Mandatory: If Account is an account number<br /> */
            country?: string | null;
        };
        /** @enum {string} */
        AccountStatus: "Closed" | "Active";
        AccountStatusDto: {
            /** Format: int32 */
            id?: number;
            name?: string | null;
        };
        AccountTypeDto: {
            /** Format: int32 */
            id?: number;
            name?: string | null;
        };
        AccountUsers: {
            /**
             * Format: uuid
             * @description Account (technical) identifier
             */
            accountId?: string;
            /** @description Description of the account */
            accountDescription?: string | null;
            /** @description Account (natural) indentifier */
            accountIdentifiers?: components["schemas"]["AccountIdentifier"][] | null;
            status?: components["schemas"]["AccountStatus"];
            /** @description Currency representation<br />
             *     Format: Alpha 3-5 character ISO 20022<br />
             *     Example: EUR */
            currency?: string | null;
            /** Format: int32 */
            userCount?: number;
            users?: components["schemas"]["UserOverview"][] | null;
        };
        /** @description An amount */
        Amount: {
            /** @description Amount currency */
            currency?: string | null;
            /**
             * Format: double
             * @description Amount value
             */
            amount?: number | null;
        };
        /** @enum {string} */
        BookingTransactionType: "Payment" | "Fx" | "Fee";
        BranchDto: {
            /** Format: int32 */
            id?: number;
            name?: string | null;
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        BulkProcessingMode: 0 | 1 | 2;
        CertificateDto: {
            thumbPrint?: string | null;
            ipNumbers?: string | null;
        };
        CertificateForCreationDto: {
            thumbPrint?: string | null;
            ipNumbers?: string | null;
        };
        CertificateForRequest: {
            thumbPrint?: string | null;
            ipNumbers?: string | null;
        };
        CertificateForUpdateDto: {
            thumbPrint?: string | null;
            ipNumbers?: string | null;
        };
        CommonAccountDto: {
            iban?: string | null;
        };
        Company: {
            /** Format: uuid */
            id?: string;
            name?: string | null;
            companyNumber?: string | null;
            categoryId?: components["schemas"]["CompanyCategory"];
            statusId?: components["schemas"]["CompanyStatus"];
            addressLine1?: string | null;
            addressLine2?: string | null;
            addressLine3?: string | null;
            addressLine4?: string | null;
            countryCode?: string | null;
            /** Format: date-time */
            openingDate?: string;
            /** Format: date-time */
            closingDate?: string | null;
            accounts?: components["schemas"]["Account"][] | null;
        };
        CompanyCategory: {
            /** Format: int32 */
            id?: number;
            name?: string | null;
        };
        CompanyCategoryDto: {
            /** Format: int32 */
            id?: number;
            name?: string | null;
        };
        CompanyDto: {
            /** Format: uuid */
            id?: string;
            companyNumber?: string | null;
            name?: string | null;
            categoryId?: components["schemas"]["CompanyCategoryDto"];
            statusId?: components["schemas"]["CompanyStatusDto"];
            addressLine1?: string | null;
            addressLine2?: string | null;
            addressLine3?: string | null;
            addressLine4?: string | null;
            countryCode?: string | null;
            /** Format: date-time */
            openingDate?: string;
            /** Format: date-time */
            closingDate?: string | null;
            accounts?: components["schemas"]["AccountDto"][] | null;
        };
        CompanyForListDto: {
            /** Format: uuid */
            id?: string;
            companyNumber?: string | null;
            name?: string | null;
        };
        CompanyForListDtoResponseResult: {
            companyForLists?: components["schemas"]["CompanyForListDto"][] | null;
            account?: components["schemas"]["CommonAccountDto"];
            _links?: components["schemas"]["LinksDto"];
        };
        CompanyForListDtoResponseResultUsersApiPagedResponse: {
            /** @description Contains elements resulting from your query */
            result?: components["schemas"]["CompanyForListDtoResponseResult"][] | null;
            pageInfo?: components["schemas"]["UsersApiPageInfo"];
        };
        CompanyGroup: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            ownerId?: string;
            name?: string | null;
            ownerName?: string | null;
            active?: boolean;
            deleted?: boolean;
            underEdit?: boolean;
            branchCode?: string | null;
            concurrencyToken?: string | null;
            companies?: components["schemas"]["Company"][] | null;
            settings?: components["schemas"]["CompanyGroupSetting"][] | null;
            whitelistedEmailDomains?: string[] | null;
            products?: components["schemas"]["ProductResponse"][] | null;
        };
        CompanyGroupAccessForUserCreationDto: {
            /** Format: uuid */
            companyGroupId?: string | null;
        };
        CompanyGroupAccessForUserUpdateDto: {
            /** Format: uuid */
            companyGroupId?: string | null;
        };
        CompanyGroupCreationRequest: {
            /** Format: uuid */
            ownerId?: string;
            name?: string | null;
            companies?: string[] | null;
            settings?: components["schemas"]["CompanyGroupCreationRequestSetting"][] | null;
            whitelistedEmailDomains?: string[] | null;
        };
        CompanyGroupCreationRequestSetting: {
            name?: string | null;
            bulkProcessingMode?: components["schemas"]["BulkProcessingMode"];
            singleExemptFromApproval?: boolean;
            bulkExemptFromApproval?: boolean;
        };
        CompanyGroupDifference: {
            original?: components["schemas"]["CompanyGroup"];
            edited?: components["schemas"]["CompanyGroup"];
            type?: components["schemas"]["EditTrailType"];
        };
        CompanyGroupListResponse: {
            /** Format: uuid */
            id?: string;
            name?: string | null;
            status?: components["schemas"]["CompanyGroupStatus"];
            underEdit?: boolean;
            branchCode?: string | null;
            companies?: components["schemas"]["CompanyDto"][] | null;
        };
        CompanyGroupListResponseUsersApiPagedResponse: {
            /** @description Contains elements resulting from your query */
            result?: components["schemas"]["CompanyGroupListResponse"][] | null;
            pageInfo?: components["schemas"]["UsersApiPageInfo"];
        };
        CompanyGroupSetting: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            companyGroupId?: string;
            name?: string | null;
            bulkProcessingMode?: components["schemas"]["BulkProcessingMode"];
            bulkExemptFromApproval?: boolean;
            singleExemptFromApproval?: boolean;
        };
        /** @enum {string} */
        CompanyGroupStatus: "Active" | "Inactive" | "Deleted";
        CompanyGroupUpdateRequest: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            ownerId?: string;
            name?: string | null;
            companies?: string[] | null;
            settings?: components["schemas"]["CompanyGroupUpdateRequestSetting"][] | null;
            whitelistedEmailDomains?: string[] | null;
        };
        CompanyGroupUpdateRequestSetting: {
            /** Format: uuid */
            id?: string;
            name?: string | null;
            bulkProcessingMode?: components["schemas"]["BulkProcessingMode"];
            singleExemptFromApproval?: boolean;
            bulkExemptFromApproval?: boolean;
        };
        /** @enum {string} */
        CompanyGroupVersion: "Original" | "EditTrail";
        CompanyStatus: {
            /** Format: int32 */
            id?: number;
            name?: string | null;
        };
        CompanyStatusDto: {
            /** Format: int32 */
            id?: number;
            name?: string | null;
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        CompanyType: 0 | 1 | 2;
        CreateCompanyGroupRequest: {
            /** Format: uuid */
            owner?: string;
            name?: string | null;
            companies?: string[] | null;
            whitelistedEmailDomains?: string[] | null;
            products?: string[] | null;
        };
        CreateUserRequest: {
            multiFactorIdentifier?: string | null;
            name?: string | null;
            eMail?: string | null;
            phone?: string | null;
            comment?: string | null;
            userType?: components["schemas"]["UserType"];
            /** Format: uuid */
            companyGroup?: string;
            roles?: string[] | null;
            accounts?: components["schemas"]["UserAccountAccessForRequest"][] | null;
            certificate?: components["schemas"]["CertificateForRequest"];
        };
        /** @enum {string} */
        CreditDebitIndicator: "Unknown" | "Credit" | "Debit";
        /** @enum {string} */
        EditTrailType: "Insert" | "Update" | "Delete" | "Unretire";
        ErrorDetailDto: {
            errorCode?: string | null;
            errorText?: string | null;
            propertyName?: string | null;
            /** Format: int32 */
            lineNumber?: number | null;
            /** Format: int32 */
            fieldNumber?: number | null;
            isOk?: boolean;
        };
        GenericResponseDto: {
            /** Format: uuid */
            id?: string;
            status?: string | null;
            isOk?: boolean;
            errors?: components["schemas"]["ErrorDetailDto"][] | null;
        };
        GenericResponseDtoResponseResult: {
            genericResponses?: components["schemas"]["GenericResponseDto"][] | null;
            account?: components["schemas"]["CommonAccountDto"];
            _links?: components["schemas"]["LinksDto"];
        };
        LinkDto: {
            href?: string | null;
        };
        LinksDto: {
            balances?: components["schemas"]["LinkDto"];
            transactions?: components["schemas"]["LinkDto"];
            account?: components["schemas"]["LinkDto"];
            self?: components["schemas"]["LinkDto"];
            status?: components["schemas"]["LinkDto"];
        };
        MetaData: {
            /** Format: int32 */
            currentPage?: number;
            /** Format: int32 */
            pageCount?: number;
            /** Format: int32 */
            pageSize?: number;
            /** Format: int32 */
            rowCount?: number;
            /** Format: int32 */
            readonly firstRowOnPage?: number;
            /** Format: int32 */
            readonly lastRowOnPage?: number;
        };
        /** @description Page information of the responded Result Set */
        PageInfo: {
            /**
             * Format: int32
             * @description What page has been retuned
             */
            currentPage?: number;
            /**
             * Format: int32
             * @description The Result Set and CurrentPage was generated based on a number of allowed elements per page (PageSize)
             */
            pageSize?: number;
            /**
             * Format: int32
             * @description Total of records
             */
            rowCount?: number | null;
        };
        PaymentRule: {
            /** Format: uuid */
            id?: string;
            name?: string | null;
            ruleType?: components["schemas"]["PaymentRuleType"];
        };
        /** @enum {string} */
        PaymentRuleType: "create" | "approve" | "stp" | "stp_own_payment";
        PermissionDto: {
            /** Format: int32 */
            id?: number;
            userId?: string | null;
            /** Format: uuid */
            roleId?: string;
            name?: string | null;
            permissionNameIncludingResource?: string | null;
            hasPermission?: boolean;
        };
        ProblemDetails: {
            type?: string | null;
            title?: string | null;
            /** Format: int32 */
            status?: number | null;
            detail?: string | null;
            instance?: string | null;
        } & {
            [key: string]: unknown;
        };
        ProductResponse: {
            /** Format: uuid */
            productId?: string;
            name?: string | null;
            isDefault?: boolean;
            roles?: components["schemas"]["Role"][] | null;
            isLocked?: boolean;
        };
        /** @enum {string} */
        ProtectionType: "None" | "ClientMoney" | "SafeGuarded";
        /**
         * Format: int32
         * @enum {integer}
         */
        RemoteProtectionType: 0 | 1 | 2;
        Role: {
            /** Format: uuid */
            id?: string;
            name?: string | null;
            isMandatory?: boolean;
            paymentRules?: components["schemas"]["PaymentRule"][] | null;
        };
        RoleForUserCreationDto: {
            /** Format: uuid */
            roleId?: string;
        };
        RoleForUserUpdateDto: {
            /** Format: uuid */
            roleId?: string;
        };
        RoleOverview: {
            /** Format: uuid */
            id?: string;
            name?: string | null;
        };
        SearchedCompanyDto: {
            /** Format: uuid */
            id?: string;
            name?: string | null;
        };
        SearchedCompanyDtoResponseResult: {
            searchedCompanies?: components["schemas"]["SearchedCompanyDto"][] | null;
            account?: components["schemas"]["CommonAccountDto"];
            _links?: components["schemas"]["LinksDto"];
        };
        StatusesDto: {
            statuses?: components["schemas"]["UserFilterStatus"][] | null;
        };
        TestAccountResponseDto: {
            accountIban?: string | null;
            accountNumber?: string | null;
            accountDescription?: string | null;
            currency?: string | null;
            /** Format: double */
            blockedBalanceAmount?: number | null;
        };
        TestCompaniesResponseDto: {
            testCompanies?: components["schemas"]["TestCompanyResponseDto"][] | null;
        };
        TestCompaniesResponseDtoResponseResult: {
            testCompaniesResponses?: components["schemas"]["TestCompaniesResponseDto"][] | null;
            account?: components["schemas"]["CommonAccountDto"];
            _links?: components["schemas"]["LinksDto"];
        };
        TestCompanyCreationRequest: {
            country?: string | null;
            companyName?: string | null;
            appendExtraCompany?: boolean;
            specifiedMasterAccounts?: components["schemas"]["TestCompanyCreationRequestSpecifiedMasterAccount"][] | null;
            specifiedSettlementAccounts?: components["schemas"]["TestCompanyCreationRequestSpecifiedAccount"][] | null;
        };
        TestCompanyCreationRequestSpecifiedAccount: {
            accountNo?: string | null;
            iban?: string | null;
            currency?: string | null;
            ibanCountryCode?: string | null;
            /** Format: int32 */
            accountProductType?: number;
            /** Format: double */
            blockedBalanceAmount?: number | null;
        };
        TestCompanyCreationRequestSpecifiedMasterAccount: {
            isDefault?: boolean;
            accountNo?: string | null;
            iban?: string | null;
            currency?: string | null;
            ibanCountryCode?: string | null;
            /** Format: int32 */
            accountProductType?: number;
            /** Format: double */
            blockedBalanceAmount?: number | null;
        };
        TestCompanyResponseDto: {
            /** Format: uuid */
            syntheticKey?: string;
            countryCode?: string | null;
            companyName?: string | null;
            accounts?: components["schemas"]["TestAccountResponseDto"][] | null;
        };
        TestCompanyResponseDtoResponseResult: {
            testCompanyResponses?: components["schemas"]["TestCompanyResponseDto"][] | null;
            account?: components["schemas"]["CommonAccountDto"];
            _links?: components["schemas"]["LinksDto"];
        };
        UpdateCompanyGroupRequest: {
            /** Format: uuid */
            owner?: string;
            name?: string | null;
            companies?: string[] | null;
            whitelistedEmailDomains?: string[] | null;
            products?: string[] | null;
        };
        UpdateUserRequest: {
            /** Format: uuid */
            id?: string;
            concurrencyToken?: string | null;
            active?: boolean;
            deleted?: boolean;
            unretire?: boolean;
            name?: string | null;
            eMail?: string | null;
            phone?: string | null;
            comment?: string | null;
            userType?: components["schemas"]["UserType"];
            /** Format: uuid */
            companyGroup?: string;
            roles?: string[] | null;
            accounts?: components["schemas"]["UserAccountAccessForRequest"][] | null;
            certificate?: components["schemas"]["CertificateForRequest"];
        };
        UserAccountAccessAndPermissionsDto: {
            /** Format: uuid */
            userId?: string;
            /** Format: uuid */
            companyGroupConfigurationId?: string | null;
            permissions?: string[] | null;
            roles?: string[] | null;
            paymentRules?: string[] | null;
        };
        UserAccountAccessDto: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            userAccountAccessId?: string;
            /** Format: uuid */
            userId?: string;
            accountNumber?: string | null;
            accountIban?: string | null;
            accountDescription?: string | null;
            rowVersion?: string | null;
            companyName?: string | null;
            /** Format: uuid */
            companyId?: string;
            companyNumber?: string | null;
            userAccountPermissions?: components["schemas"]["PermissionDto"][] | null;
            /** Format: uuid */
            companyConfigurationGroupSettingId?: string;
            companyConfigurationGroupSettingName?: string | null;
            userAccountRoles?: components["schemas"]["UserAccountAccessRoleDto"][] | null;
            paymentRules?: components["schemas"]["UserAccountAccessPaymentRuleDto"][] | null;
        };
        UserAccountAccessForCreationDto: {
            /** Format: uuid */
            userId?: string;
            accountNumber?: string | null;
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            companyConfigurationGroupSettingId?: string;
            roles?: components["schemas"]["UserAccountAccessRoleForCreationDto"][] | null;
            paymentRules?: components["schemas"]["UserAccountAccessPaymentRuleDto"][] | null;
        };
        UserAccountAccessForRequest: {
            /** Format: uuid */
            accountId?: string;
            roles?: string[] | null;
            paymentRules?: string[] | null;
        };
        UserAccountAccessForUserCreationDto: {
            /** Format: uuid */
            accountId?: string;
            /** Format: uuid */
            companyGroupSettingId?: string;
            roles?: components["schemas"]["UserAccountAccessRoleForCreationDto"][] | null;
            paymentRules?: components["schemas"]["UserAccountAccessPaymentRuleForUserCreationDto"][] | null;
        };
        UserAccountAccessForUserUpdateDto: {
            /** Format: uuid */
            accountId?: string;
            /** Format: uuid */
            companyGroupSettingId?: string;
            roles?: components["schemas"]["UserAccountAccessRoleForUpdateDto"][] | null;
            paymentRules?: components["schemas"]["UserAccountAccessPaymentRuleForUserUpdateDto"][] | null;
        };
        UserAccountAccessPaymentRuleDto: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            userAccountAccessId?: string;
            /** Format: uuid */
            paymentRuleId?: string;
            rowVersion?: string | null;
            name?: string | null;
        };
        UserAccountAccessPaymentRuleForUserCreationDto: {
            /** Format: uuid */
            paymentRuleId?: string;
        };
        UserAccountAccessPaymentRuleForUserUpdateDto: {
            /** Format: uuid */
            paymentRuleId?: string;
        };
        UserAccountAccessRoleDto: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            userAccountAccessId?: string;
            /** Format: uuid */
            roleId?: string;
            rowVersion?: string | null;
            roleName?: string | null;
            accountNumber?: string | null;
        };
        UserAccountAccessRoleForCreationDto: {
            /** Format: uuid */
            roleId?: string;
        };
        UserAccountAccessRoleForUpdateDto: {
            /** Format: uuid */
            roleId?: string;
        };
        UserCompanyGroupAccessDto: {
            /** Format: uuid */
            userId?: string;
            /** Format: uuid */
            companyGroupId?: string;
            companyGroupName?: string | null;
        };
        UserDifferenceDto: {
            original?: components["schemas"]["UserDto"];
            edited?: components["schemas"]["UserDto"];
            type?: components["schemas"]["EditTrailType"];
        };
        UserDto: {
            /** Format: uuid */
            id?: string;
            name?: string | null;
            userTypeId?: components["schemas"]["UserType"];
            userType?: components["schemas"]["UserType"];
            email?: string | null;
            phone?: string | null;
            comment?: string | null;
            oid?: string | null;
            multiFactorIdentifier?: string | null;
            rowVersion?: string | null;
            /** Format: int64 */
            version?: number;
            active?: boolean;
            deleted?: boolean;
            underEdit?: boolean;
            status?: components["schemas"]["UserFilterStatus"];
            certificate?: components["schemas"]["CertificateDto"];
            userRoles?: components["schemas"]["UserRoleDto"][] | null;
            userAccounts?: components["schemas"]["UserAccountAccessDto"][] | null;
            companyGroups?: components["schemas"]["UserCompanyGroupAccessDto"][] | null;
            companyGroupName?: string | null;
            /** Format: uuid */
            companyGroupId?: string;
            branchCode?: string | null;
        };
        UserDtoUpdateResult: {
            success?: boolean;
            entity?: components["schemas"]["UserDto"];
            message?: string | null;
            errors?: components["schemas"]["ErrorDetailDto"][] | null;
        };
        /** @enum {string} */
        UserFilterStatus: "None" | "Active" | "Inactive" | "Retired" | "All" | "Locked";
        UserForCreationDto: {
            name?: string | null;
            eMail?: string | null;
            phone?: string | null;
            multiFactorIdentifier?: string | null;
            comment?: string | null;
            userTypeId?: components["schemas"]["UserType"];
            userType?: components["schemas"]["UserType"];
            roles?: components["schemas"]["RoleForUserCreationDto"][] | null;
            accounts?: components["schemas"]["UserAccountAccessForUserCreationDto"][] | null;
            companyGroups?: components["schemas"]["CompanyGroupAccessForUserCreationDto"][] | null;
            certificate?: components["schemas"]["CertificateForCreationDto"];
        };
        UserForListDto: {
            /** Format: uuid */
            id?: string;
            name?: string | null;
            email?: string | null;
            companyConfigurationGroupName?: string | null;
            underEdit?: boolean;
            status?: components["schemas"]["UserFilterStatus"];
            rowVersion?: string | null;
            userType?: components["schemas"]["UserType"];
        };
        UserForListDtoPagedResponseResult: {
            userForLists?: components["schemas"]["UserForListDto"][] | null;
            metaData?: components["schemas"]["MetaData"];
            account?: components["schemas"]["CommonAccountDto"];
            _links?: components["schemas"]["LinksDto"];
        };
        UserForUpdateDto: {
            /** Format: uuid */
            id?: string;
            name?: string | null;
            userTypeId?: components["schemas"]["UserType"];
            userType?: components["schemas"]["UserType"];
            phone?: string | null;
            eMail?: string | null;
            comment?: string | null;
            concurrencyToken?: string | null;
            active?: boolean;
            deleted?: boolean;
            certificate?: components["schemas"]["CertificateForUpdateDto"];
            roles?: components["schemas"]["RoleForUserUpdateDto"][] | null;
            accounts?: components["schemas"]["UserAccountAccessForUserUpdateDto"][] | null;
            companyGroups?: components["schemas"]["CompanyGroupAccessForUserUpdateDto"][] | null;
        };
        UserInfo: {
            /** Format: uuid */
            id?: string;
            name?: string | null;
            userType?: components["schemas"]["UserType"];
            permissions?: string[] | null;
            linkedCompanies?: components["schemas"]["CompanyDto"][] | null;
            linkedAccounts?: components["schemas"]["AccountDto"][] | null;
            acceptPartial?: boolean;
            multiFactorIdentifier?: string | null;
            oid?: string | null;
            /** Format: uuid */
            companyGroupId?: string;
            branchCode?: string | null;
        };
        UserOverview: {
            /** Format: uuid */
            id?: string;
            name?: string | null;
            roles?: components["schemas"]["RoleOverview"][] | null;
        };
        UserResponseDto: {
            /** Format: uuid */
            id?: string;
            message?: string | null;
        };
        UserReturnBase: {
            /** Format: uuid */
            id?: string;
            name?: string | null;
            userType?: components["schemas"]["UserType"];
            email?: string | null;
            phone?: string | null;
            certificate?: components["schemas"]["CertificateDto"];
            comment?: string | null;
            rowVersion?: string | null;
            active?: boolean;
            deleted?: boolean;
            underEdit?: boolean;
            status?: components["schemas"]["UserFilterStatus"];
            userRoles?: components["schemas"]["UserRoleDto"][] | null;
            companyGroupName?: string | null;
            /** Format: uuid */
            companyGroupId?: string;
            branchCode?: string | null;
        };
        UserRoleDto: {
            /** Format: uuid */
            userId?: string;
            /** Format: uuid */
            roleId?: string;
            name?: string | null;
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        UserType: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;
        UserTypeDto: {
            /** Format: int32 */
            id?: number;
            name?: string | null;
        };
        /** @enum {string} */
        UserVersion: "Original" | "EditTrail";
        /** @description Page information of the responded Result Set */
        UsersApiPageInfo: {
            /**
             * Format: int32
             * @description What page has been retuned
             */
            currentPage?: number;
            /**
             * Format: int32
             * @description The Result Set and CurrentPage was generated based on a number of allowed elements per page (PageSize)
             */
            pageSize?: number;
            /**
             * Format: int32
             * @description Total number of Rows
             */
            rowCount?: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
