/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    "/api/v1/fx/rates/{currency-one}/{currency-two}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an FX quote */
        get: {
            parameters: {
                query: {
                    /** @description The amount currency e.g. EUR */
                    amountCurrency: string;
                    /** @description 13550.95 */
                    amount: number;
                    /** @description (Optional) Tenor for value date e.g. ON, TN or SPOT. ON will be used when not provided */
                    tenor?: "ON" | "TN" | "SPOT";
                    /** @description (Optional) Banking Circle Customer Id when multiple legal entities available */
                    customerId?: string;
                    /** @description (Optional) Set indicative to true if you are not using the quote for trading */
                    indicative?: boolean;
                };
                header?: never;
                path: {
                    /** @description Currency e.g. EUR */
                    "currency-one": string;
                    /** @description The other currency e.g. USD */
                    "currency-two": string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FxQuote"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/fx/rates/{currency-pair}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an FX quote for a currency pair */
        get: {
            parameters: {
                query: {
                    /** @description The amount currency e.g. EUR */
                    amountCurrency: string;
                    /** @description 13550.95 */
                    amount: number;
                    /** @description Tenor for value date e.g. ON, TN or SPOT. */
                    tenor: "ON" | "TN" | "SPOT";
                    /** @description (Optional) Banking Circle Customer Id when multiple legal entities available */
                    customerId?: string;
                    /** @description (Optional) Set indicative to true if you are not using the quote for trading */
                    indicative?: boolean;
                };
                header?: never;
                path: {
                    /** @description Currency pair in CCY1CCY2 format (e.g. do not add slash for EUR/USD) */
                    "currency-pair": string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FxQuote"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationException"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/fx/rates/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Request FX quotes in bulk */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description List of quote requests */
            requestBody: {
                content: {
                    "application/json-patch+json": components["schemas"]["Rfq"][];
                    "application/json": components["schemas"]["Rfq"][];
                    "text/json": components["schemas"]["Rfq"][];
                    "application/*+json": components["schemas"]["Rfq"][];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FxQuoteResponse"][];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationException"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/fx/trading": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Execute a BCFX order */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["BcFxOrder"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BcFxTrade"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationException"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/fx/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get FX transactions */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Number pages returned. Defaults to 1 if not specified.
                     *
                     *     PageNumber and PageSize details the pagination information
                     *
                     *     Condition: Valid page number (1 to n)
                     * @example 10
                     */
                    pageNumber?: number;
                    /**
                     * @description Number of items returned per page. Defaults to 50 if not specified.
                     *
                     *     Condition: Required - Larger than zero
                     * @example 50
                     */
                    pageSize?: number;
                    /**
                     * @description Account Id
                     *
                     *     Criteria: Exact match any of
                     *
                     *     * ForeignExchange.SoldAccountId
                     *     * ForeignExchange.BoughtAccountId
                     * @example [
                     *       "720694c8-f6b3-4470-aac9-ffa779946d98",
                     *       "ab89f333-908a-dc79-4be9-e368a0908c26"
                     *     ]
                     */
                    accountId?: string[];
                    /**
                     * @description Your reference used when booking a Banking Circle FX trade
                     *
                     *     Criteria: Exact match of ForeignExchange.ClientOrderId
                     * @example 1aac349acde611ebb8bc0242ac130003
                     */
                    clientOrderId?: string;
                    /**
                     * @description Banking Circle's unique reference
                     *
                     *     Criteria: Exact match of ForeignExchange.BankingCircleRef
                     * @example 21061612550014
                     */
                    bankingCircleRef?: string;
                    /** @description Filter based on current status of your transactions
                     *      */
                    transactionStatus?: ("Open" | "Pending" | "Settled" | "Cancelled")[];
                    /**
                     * @description Filter based on the trade execution date. Show only transactions on or after this date.
                     *
                     *
                     *     Format: ISO 8601 | YYYY-MM-DD
                     * @example 2001-11-01
                     */
                    tradeDate?: string;
                    /**
                     * @description Filter based on the trade execution date. Show only transactions with trade date until and including this date.
                     *
                     *
                     *     Format: ISO 8601 | YYYY-MM-DD
                     * @example 2001-11-01
                     */
                    tradeDateTo?: string;
                    /**
                     * @description Filter based on the trade value. Show only transactions with value date on or after this date
                     *
                     *     Format: ISO 8601 | YYYY-MM-DD
                     * @example 2001-11-01
                     */
                    valueDate?: string;
                    /**
                     * @description Filter based on the trade value. Show only transactions with value date until and including this date.
                     *
                     *
                     *     Format: ISO 8601 | YYYY-MM-DD
                     * @example 2001-11-01
                     */
                    valueDateTo?: string;
                    /** @description Filter based on currencies. Accepts multiple currencies using the and separator in the path. */
                    currencies?: string[];
                    /**
                     * @description Filter based on the amount. Show only amounts equal or exceeding this value.
                     * @example 10000
                     */
                    amount?: number;
                    /**
                     * @description Optional
                     *
                     *     Banking Circle Customer Id in case you have multiple legal entities and want to narrow the search
                     * @example [
                     *       "000012356"
                     *     ]
                     */
                    customerId?: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "result": [
                         *         {
                         *           "bankingCircleRef": "21061612550014",
                         *           "clientOrderId": "1aac349acde611ebb8bc0242ac130003",
                         *           "tradeDate": "2021-07-08T15:12:03Z",
                         *           "valueDate": "2021-07-08",
                         *           "boughtAmount": 1000,
                         *           "boughtCurrency": "EUR",
                         *           "boughtAccount": {
                         *             "accountId": "2c054dcd-66bd-e5c2-b335-bff4ffe32031",
                         *             "bankAccount": "DK7789000000000114"
                         *           },
                         *           "soldAmount": 1150.25,
                         *           "soldCurrency": "USD",
                         *           "soldAccount": {
                         *             "accountId": "2c054dcd-66bd-e5c2-b335-bff4ffe32032",
                         *             "bankAccount": "DK9389000000000214"
                         *           },
                         *           "exchangeRate": 1.15025,
                         *           "transactionStatus": "Settled",
                         *           "customerId": ""
                         *         },
                         *         {
                         *           "bankingCircleRef": "21061612550014",
                         *           "clientOrderId": "1aac349acde611ebb8bc0242ac130003",
                         *           "tradeDate": "2021-07-08T15:12:03Z",
                         *           "valueDate": "2021-07-08",
                         *           "boughtAmount": 1000,
                         *           "boughtCurrency": "EUR",
                         *           "boughtAccount": {
                         *             "accountId": "2c054dcd-66bd-e5c2-b335-bff4ffe32031",
                         *             "bankAccount": "DK7789000000000114"
                         *           },
                         *           "soldAmount": 1150.25,
                         *           "soldCurrency": "USD",
                         *           "soldAccount": {
                         *             "accountId": "2c054dcd-66bd-e5c2-b335-bff4ffe32032",
                         *             "bankAccount": "DK9389000000000214"
                         *           },
                         *           "exchangeRate": 1.15025,
                         *           "transactionStatus": "Settled",
                         *           "customerId": ""
                         *         }
                         *       ],
                         *       "pageInfo": {
                         *         "currentPage": 1,
                         *         "pageSize": 50
                         *       }
                         *     } */
                        "application/json": components["schemas"]["FxTransactionPagedResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationException"];
                    };
                };
            };
        };
        put?: never;
        /** Post FX transactions */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["FxFilter"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "result": [
                         *         {
                         *           "bankingCircleRef": "21061612550014",
                         *           "clientOrderId": "1aac349acde611ebb8bc0242ac130003",
                         *           "tradeDate": "2021-07-08T15:12:03Z",
                         *           "valueDate": "2021-07-08",
                         *           "boughtAmount": 1000,
                         *           "boughtCurrency": "EUR",
                         *           "boughtAccount": {
                         *             "accountId": "2c054dcd-66bd-e5c2-b335-bff4ffe32031",
                         *             "bankAccount": "DK7789000000000114"
                         *           },
                         *           "soldAmount": 1150.25,
                         *           "soldCurrency": "USD",
                         *           "soldAccount": {
                         *             "accountId": "2c054dcd-66bd-e5c2-b335-bff4ffe32032",
                         *             "bankAccount": "DK9389000000000214"
                         *           },
                         *           "exchangeRate": 1.15025,
                         *           "transactionStatus": "Settled",
                         *           "customerId": ""
                         *         },
                         *         {
                         *           "bankingCircleRef": "21061612550014",
                         *           "clientOrderId": "1aac349acde611ebb8bc0242ac130003",
                         *           "tradeDate": "2021-07-08T15:12:03Z",
                         *           "valueDate": "2021-07-08",
                         *           "boughtAmount": 1000,
                         *           "boughtCurrency": "EUR",
                         *           "boughtAccount": {
                         *             "accountId": "2c054dcd-66bd-e5c2-b335-bff4ffe32031",
                         *             "bankAccount": "DK7789000000000114"
                         *           },
                         *           "soldAmount": 1150.25,
                         *           "soldCurrency": "USD",
                         *           "soldAccount": {
                         *             "accountId": "2c054dcd-66bd-e5c2-b335-bff4ffe32032",
                         *             "bankAccount": "DK9389000000000214"
                         *           },
                         *           "exchangeRate": 1.15025,
                         *           "transactionStatus": "Settled",
                         *           "customerId": ""
                         *         }
                         *       ],
                         *       "pageInfo": {
                         *         "currentPage": 1,
                         *         "pageSize": 50
                         *       }
                         *     } */
                        "application/json": components["schemas"]["FxTransactionPagedResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationException"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/fx/transactions/{client-order-id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a specific FX transaction */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description 1aac349acde611ebb8bc0242ac130003 */
                    "client-order-id": string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "bankingCircleRef": "21061612550014",
                         *       "clientOrderId": "1aac349acde611ebb8bc0242ac130003",
                         *       "tradeDate": "2021-07-08T15:12:03Z",
                         *       "valueDate": "2021-07-08",
                         *       "boughtAmount": 1000,
                         *       "boughtCurrency": "EUR",
                         *       "boughtAccount": {
                         *         "accountId": "2c054dcd-66bd-e5c2-b335-bff4ffe32031",
                         *         "bankAccount": "DK7789000000000114"
                         *       },
                         *       "soldAmount": 1150.25,
                         *       "soldCurrency": "USD",
                         *       "soldAccount": {
                         *         "accountId": "2c054dcd-66bd-e5c2-b335-bff4ffe32032",
                         *         "bankAccount": "DK9389000000000214"
                         *       },
                         *       "exchangeRate": 1.15025,
                         *       "transactionStatus": "Settled",
                         *       "customerId": ""
                         *     } */
                        "application/json": components["schemas"]["FxTransaction"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationException"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/fx/exposure/customer/{customer-id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get FX exposure for given client with trading line and/or collateral account */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    "customer-id": string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Exposure"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationException"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/fx/rates/held-rates/{currency-one}/{currency-two}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a held rate */
        get: {
            parameters: {
                query: {
                    /** @description Validity period of requested held rate in minutes, e.g. 30 */
                    validForMinutes: number;
                    /** @description (Optional) Banking Circle Customer Id when multiple legal entities available */
                    customerId?: string;
                };
                header?: never;
                path: {
                    /** @description Currency e.g. EUR */
                    "currency-one": string;
                    /** @description The other currency e.g. USD */
                    "currency-two": string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FxQuote"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationException"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/fx/held-rates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of active held rates */
        get: {
            parameters: {
                query?: {
                    /** @description Banking Circle Customer Id when multiple legal entities available */
                    customerId?: string;
                    /** @description Currencies to narrow down the search
                     *
                     *     Example:
                     *
                     *     ?currencies=EUR,USD,GBP
                     *
                     *     or
                     *
                     *     ?currencies=EUR&currencies=USD&currencies=GBP */
                    currencies?: string[];
                    /**
                     * @description Number pages returned. Defaults to 1 if not specified.
                     *
                     *     PageNumber and PageSize details the pagination information
                     *
                     *     Condition: Valid page number (1 to n)
                     * @example 10
                     */
                    pageNumber?: number;
                    /**
                     * @description Number of items returned per page. Defaults to 50 if not specified.
                     *
                     *     Condition: Required - Larger than zero
                     * @example 50
                     */
                    pageSize?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "result": [
                         *         {
                         *           "customerId": "123",
                         *           "requestedDuration": "P1D",
                         *           "quoteType": "Tradable",
                         *           "currencyPair": "EURUSD",
                         *           "exchangeRateBid": 1.1702966,
                         *           "exchangeRateAsk": 1.1703015,
                         *           "quoteId": "c62cd555-2ab1-43af-be40-d623d7a4f2c9",
                         *           "expiryTime": "2025-04-12T07:55:39.8931303+00:00"
                         *         },
                         *         {
                         *           "customerId": "123",
                         *           "requestedDuration": "PT12H",
                         *           "quoteType": "Cancelled",
                         *           "currencyPair": "EURUSD",
                         *           "exchangeRateBid": 1.1702966,
                         *           "exchangeRateAsk": 1.1703015,
                         *           "quoteId": "c62cd555-2ab1-43af-be40-d623d7a4f2c9",
                         *           "expiryTime": "2025-04-11T19:55:39.8931322+00:00"
                         *         }
                         *       ],
                         *       "pageInfo": {
                         *         "currentPage": 1,
                         *         "pageSize": 10,
                         *         "rowCount": 2
                         *       }
                         *     } */
                        "application/json": components["schemas"]["HeldFxQuotePagedResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationException"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/fx/calendar/settlement-dates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get FX settlement dates */
        get: {
            parameters: {
                query: {
                    /**
                     * @description Add a currency of a currency pair for which to retrieve settlement dates
                     * @example EUR
                     */
                    "currency-one": string;
                    /**
                     * @description Add the second currency of a currency pair for which to retrieve settlement dates.
                     *
                     *     Must be different from the first currency
                     * @example USD
                     */
                    "currency-two": string;
                    /** @description Add one or more tenors you would like to retrieve settlement dates for. */
                    tenor: ("ON" | "TN" | "SPOT")[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example [
                         *       {
                         *         "tenor": "ON",
                         *         "settlementDate": "2023-05-26"
                         *       },
                         *       {
                         *         "tenor": "TN",
                         *         "settlementDate": "2023-05-29"
                         *       },
                         *       {
                         *         "tenor": "SPOT",
                         *         "settlementDate": "2023-05-30"
                         *       }
                         *     ] */
                        "application/json": components["schemas"]["FxSettlementDate"][];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationException"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/fx/settlement-accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get available accounts for FX trading */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description (Optional)
                     *
                     *     Retrieve the settlement accounts for a specified customer id
                     *     in cases where you have multiple legal entities at Banking Circle .
                     * @example 000012345
                     */
                    CustomerId?: string;
                    /**
                     * @description (Optional)
                     *
                     *     Filter the settlement accounts by currency.
                     *
                     *     Must match ISO 20222.
                     * @example EUR
                     */
                    Currency?: string;
                    /** @description (Optional)
                     *
                     *     Default : false
                     *
                     *     Set to true to return only main (default) settlement accounts.
                     *
                     *     Set to false to return all FX settlement accounts, for example if you have multiple EUR or GBP accounts with us. */
                    OnlyDefaultAccounts?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example [
                         *       {
                         *         "accountId": "5fefb9c7-dd52-bb8b-3326-d79af1c7728a",
                         *         "customerId": "000012356",
                         *         "currency": "EUR",
                         *         "isDefaultAccount": true,
                         *         "side": "Buy"
                         *       },
                         *       {
                         *         "accountId": "5fefb9c7-dd52-bb8b-3326-d79af1c7728a",
                         *         "customerId": "000012356",
                         *         "currency": "EUR",
                         *         "isDefaultAccount": true,
                         *         "side": "Sell"
                         *       },
                         *       {
                         *         "accountId": "5b5c57af-a516-61a1-06d3-08ee43cfa4e7",
                         *         "customerId": "000012356",
                         *         "currency": "GBP",
                         *         "isDefaultAccount": true,
                         *         "side": "Buy"
                         *       },
                         *       {
                         *         "accountId": "ae3c64b4-e67b-476a-ccee-75ab1c90c67d",
                         *         "customerId": "000012356",
                         *         "currency": "GBP",
                         *         "isDefaultAccount": false,
                         *         "side": "Buy"
                         *       }
                         *     ] */
                        "application/json": components["schemas"]["SettlementAccount"][];
                    };
                };
                /** @description Bad request.
                 *     Request is not correctly formulated. Goes for both Header, Query and Body.
                 *                 Verify the error description and properties. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationException"];
                    };
                };
                /** @description Forbidden. The server understood the request, but is refusing it or the access is not allowed,
                 *                 i.e. if resource exists but calling user does not have rights to access it. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not found. There is no resource behind the URL,
                 *                 i.e. requesting data on an account that does not exist or do not have permissions to. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Internal Server Error. Something unexpected happened on BC Connect side. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationException"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/fx/reports/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get FX transactions */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Account Id
                     *
                     *     Criteria: Exact match any of
                     *
                     *     * ForeignExchange.SoldAccountId
                     *     * ForeignExchange.BoughtAccountId
                     * @example [
                     *       "720694c8-f6b3-4470-aac9-ffa779946d98",
                     *       "ab89f333-908a-dc79-4be9-e368a0908c26"
                     *     ]
                     */
                    accountId?: string[];
                    /**
                     * @description Your reference used when booking a Banking Circle FX trade
                     *
                     *     Criteria: Exact match of ForeignExchange.ClientOrderId
                     * @example 1aac349acde611ebb8bc0242ac130003
                     */
                    clientOrderId?: string;
                    /**
                     * @description Banking Circle's unique reference
                     *
                     *     Criteria: Exact match of ForeignExchange.BankingCircleRef
                     * @example 21061612550014
                     */
                    bankingCircleRef?: string;
                    /** @description Filter based on current status of your transactions
                     *      */
                    transactionStatus?: ("Open" | "Pending" | "Settled" | "Cancelled")[];
                    /**
                     * @description Filter based on the trade execution date. Show only transactions on or after this date.
                     *
                     *
                     *     Format: ISO 8601 | YYYY-MM-DD
                     * @example 2001-11-01
                     */
                    tradeDate?: string;
                    /**
                     * @description Filter based on the trade execution date. Show only transactions with trade date until and including this date.
                     *
                     *
                     *     Format: ISO 8601 | YYYY-MM-DD
                     * @example 2001-11-01
                     */
                    tradeDateTo?: string;
                    /**
                     * @description Filter based on the trade value. Show only transactions with value date on or after this date
                     *
                     *     Format: ISO 8601 | YYYY-MM-DD
                     * @example 2001-11-01
                     */
                    valueDate?: string;
                    /**
                     * @description Filter based on the trade value. Show only transactions with value date until and including this date.
                     *
                     *
                     *     Format: ISO 8601 | YYYY-MM-DD
                     * @example 2001-11-01
                     */
                    valueDateTo?: string;
                    /** @description Filter based on currencies. Accepts multiple currencies using the and separator in the path. */
                    currencies?: string[];
                    /**
                     * @description Filter based on the amount. Show only amounts equal or exceeding this value.
                     * @example 10000
                     */
                    amount?: number;
                    /**
                     * @description Optional
                     *
                     *     Banking Circle Customer Id in case you have multiple legal entities and want to narrow the search
                     * @example [
                     *       "000012356"
                     *     ]
                     */
                    customerId?: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example Swashbuckle.AspNetCore.Filters.MvcOutputFormatter+FormatterNotFoundException: OutputFormatter not found for 'text/csv' for example of BankingCircle.Fx.Api.Data.CsvFxTransaction. */
                        "text/csv": components["schemas"]["CsvFxTransaction"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/csv": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/csv": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/csv": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        /** Post FX transactions */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json-patch+json": components["schemas"]["FxFilterBase"];
                    "application/json": components["schemas"]["FxFilterBase"];
                    "text/json": components["schemas"]["FxFilterBase"];
                    "application/*+json": components["schemas"]["FxFilterBase"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example Swashbuckle.AspNetCore.Filters.MvcOutputFormatter+FormatterNotFoundException: OutputFormatter not found for 'text/csv' for example of BankingCircle.Fx.Api.Data.CsvFxTransaction. */
                        "text/csv": components["schemas"]["CsvFxTransaction"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/csv": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/csv": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/csv": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/fx/rates/payments/{debit-currency}/{credit-currency}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a rate for multicurrency payments */
        get: {
            parameters: {
                query: {
                    /** @description The amount currency e.g. EUR */
                    amountCurrency: string;
                    /** @description 13523.35 */
                    amount: number;
                    /** @description (Optional) Tenor for value date. Only ON is supported for payments */
                    tenor?: "ON" | "TN" | "SPOT";
                    /** @description (Optional) Banking Circle Customer Id when multiple legal entities available */
                    customerId?: string;
                };
                header?: never;
                path: {
                    /** @description The currency to be sold/debited e.g. EUR */
                    "debit-currency": string;
                    /** @description The currency to be bought/credited e.g. USD */
                    "credit-currency": string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FxRate"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationException"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationException"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Represents a Banking Circle account in an FX context */
        Account: {
            /**
             * Format: uuid
             * @description Technical account identifier
             */
            accountId: string;
            /** @description IBAN or account number */
            bankAccount: string;
        };
        /** @description Represents an immediate FX trade performed Market Order-style that will be filled at the best available price
         *     by Banking Circle, resulting in an instant currency conversion between accounts, provided sufficient balance is
         *     available */
        BcFxOrder: {
            /**
             * @description Unique reference on your side identifying this order.
             *
             *     Banking Circle suggests using UUID without dashes as only alphanumeric characters are allowed.
             * @example 1aac349acde611ebb8bc0242ac130003
             */
            clientOrderId: string;
            /**
             * @description Optional Banking Circle Customer Id in case you have multiple legal entities and want to override
             *     settlement account to a specific one - can be agreed with client services during onboarding
             * @example 000012345
             */
            customerId?: string | null;
            /**
             * @description Specify the currency to be bought
             * @example EUR
             */
            buyCurrency: string;
            /**
             * @description Specify the currency to be sold
             * @example USD
             */
            sellCurrency: string;
            /**
             * @description Specify whether the order amount refers to the currency being bought or currency being sold.
             *
             *     If you specify buyCurrency as EUR and sellCurrency as USD, and you would like to buy 1000 EUR,
             *     then you should specify amountCurrency as EUR and amount as 1000.
             *
             *     If you would like to sell 1000 USD, you should specify amountCurrency as USD and amount as 1000
             * @example EUR
             */
            amountCurrency: string;
            /**
             * Format: double
             * @description Specify the order amount. Minimum order amount is 1, maximum order amount is as agreed during your
             *     Banking Circle onboarding
             * @example 1000
             */
            amount: number;
            /**
             * Format: uuid
             * @description (Optional)
             *
             *     Only required in request-for-quote flow. For Market Orders this field can be omitted
             *
             *     Unique identifier of the quote, previously received through "fx-rates" endpoint.
             *
             *     Your order will be rejected if the quoteId is invalid or has expired.
             * @example ccecb8aa-32d7-4c38-8187-ade667bb1b75
             */
            quoteId?: string | null;
            /**
             * @description (Optional/Conditionally Required)
             *
             *     Required when executing a Market Order. In request-for-quote flow, the Tenor is derived
             *     from the requested quote. You may specify ON for value date today, TN for value date tomorrow, or
             *     SPOT for value date T+2
             * @example ON
             * @enum {string|null}
             */
            tenor?: "ON" | "TN" | "SPOT" | null;
            /**
             * @description (Optional)
             *
             *     Specify the buy account by account technical identifier, account number or IBAN.
             *
             *     If no input, default(main) account is selected.
             * @example DK9389000000000214
             */
            buyAccount?: string | null;
            /**
             * @description (Optional)
             *
             *     Specify the sell account by account technical identifier, account number or IBAN.
             *
             *     If no input, default(main) account is selected.
             * @example DK7789000000000114
             */
            sellAccount?: string | null;
            /**
             * @description (Optional)
             *
             *     Freetext field if you would like to attach any additional information to this trade, for example
             *     the purpose of the trade.
             * @example Q2 Risk exposure
             */
            note?: string | null;
        };
        /** @description Represents either a confirmed(filled) trade or a rejected Banking Circle FX Order.
         *     For filled orders, contains trade details such as FX Rate, conversion amounts, etc.
         *     For rejected orders, contains information about why the order was rejected. */
        BcFxTrade: {
            /**
             * @description Indicates whether the Banking Circle FX Order was filled or rejected
             * @example Filled
             * @enum {string}
             */
            tradeStatus: "Filled" | "Rejected" | "Pending";
            /**
             * @description Echoed client reference from original order.
             * @example 1aac349acde611ebb8bc0242ac130003
             */
            clientOrderId: string;
            /**
             * @description Banking Circle's unique reference to the FX order.
             *     Only present in filled orders.
             * @example 21061612550014
             */
            bankingCircleRef?: string | null;
            /**
             * @description Your Banking Circle customer id used in booking the trade
             * @example 000012345
             */
            customerId?: string | null;
            /**
             * @description The currency that was bought. Only present in filled orders.
             * @example EUR
             */
            boughtCurrency?: string | null;
            /**
             * Format: double
             * @description Bought amount. Only present in filled orders.
             * @example 1000
             */
            boughtAmount?: number | null;
            /**
             * @description The currency that was sold. Only present in filled orders.
             * @example USD
             */
            soldCurrency?: string | null;
            /**
             * Format: double
             * @description Sold amount. Only present in filled orders.
             * @example 1152.5
             */
            soldAmount?: number | null;
            /**
             * @description Currency Pair used for the All In Rate. Only present in filled orders.
             * @example EURUSD
             */
            currencyPair?: string | null;
            /**
             * Format: double
             * @description Exchange Rate used to book the deal. Only present in filled orders.
             * @example 1.1525
             */
            exchangeRate?: number | null;
            /**
             * Format: date
             * @description Value date of the deal in yyyy-MM-dd format. The value date refers to when money moves between your
             *     two currency accounts
             */
            valueDate?: string | null;
            /**
             * @description In case TradeStatus = Rejected, a textual reason for rejection
             * @example Trading is currently closed
             */
            rejectReason?: string | null;
        };
        /** @description Your current FX exposure in this currency */
        CcyExposure: {
            /**
             * @description The currency in which amount and weighted impact is represented
             * @example GBP
             */
            currency: string;
            /**
             * Format: double
             * @description The exposure amount in the given currency
             * @example 128000
             */
            amount: number;
            /**
             * Format: double
             * @description The risk weight for the given currency expressed as a percentage.
             *     The risk weight indicates the impact your current position in this currency has on your overall exposure.
             * @example 0.03
             */
            riskWeight: number;
            /**
             * Format: double
             * @description The weighted impact in the given currency on your overall FX exposure
             * @example 3840
             */
            weightedImpact: number;
            /**
             * Format: double
             * @description Euro equivalent impact to your overall FX exposure for the given currency
             * @example 4500
             */
            eurImpact: number;
        };
        /**
         * CsvFxTransaction
         * @description A flattened version of FxTransaction for CSV purposes
         */
        CsvFxTransaction: {
            /**
             * @description Banking Circle's unique reference to the FX trade.
             *
             *     Matches with bankingCircleRef from an FX trade executed via our UI or API.
             *
             *     For trades executed on our RTFX platform, a unique technical identifier is used instead.
             * @example 21061612550014
             */
            bankingCircleRef: string | null;
            /**
             * @description Client reference from the original order.
             *
             *     For trades executed at our RTFX platform, our settlement system reference is used instead
             * @example 1aac349acde611ebb8bc0242ac130003
             */
            clientOrderId: string | null;
            /**
             * @description Banking Circle Customer Id
             * @example 000012356
             */
            customerId?: string | null;
            /**
             * Format: date-time
             * @description Indicates when the trade was initiated
             */
            tradeDate: string;
            /**
             * Format: date
             * @description The settlement date of the trade: money changes hands on this date
             */
            valueDate?: string | null;
            /**
             * Format: double
             * @description The amount that was bought
             * @example 1000
             */
            boughtAmount?: number | null;
            /**
             * @description The currency that was bought
             * @example EUR
             */
            boughtCurrency?: string | null;
            /**
             * @description The bought amount was credited to this account identifier
             * @example 2C054DCD-66BD-E5C2-B335-BFF4FFE32031
             */
            boughtAccountId?: string | null;
            /**
             * @description The bought amount was credited to this bank account
             * @example DK7789000000000114
             */
            boughtBankAccount?: string | null;
            /**
             * Format: double
             * @description The amount that was sold
             * @example 1150.25
             */
            soldAmount?: number | null;
            /**
             * @description The currency that was sold
             * @example USD
             */
            soldCurrency?: string | null;
            /**
             * @description The sold amount was debited from this account id
             * @example 2C054DCD-66BD-E5C2-B335-BFF4FFE32032
             */
            soldAccountId?: string | null;
            /**
             * @description The sold amount was debited from this bank account
             * @example DK9389000000000214
             */
            soldBankAccount?: string | null;
            /**
             * Format: double
             * @description Exchange rate used in the conversion
             * @example 1.15025
             */
            exchangeRate?: number | null;
            /**
             * @description The current status of the transaction.
             * @example Settled
             * @enum {string}
             */
            status?: "Open" | "Pending" | "Settled" | "Cancelled";
            /**
             * @description (Optional)
             *
             *     Client note for internal purposes from the original order, if one was provided
             * @example January risk exposure hedge
             */
            note?: string | null;
        };
        /** @description Overview of your FX exposure per legal entity, grouped per currency */
        Exposure: {
            /**
             * @description FX exposure is related to your legal entity with this customer id
             * @example 000012366
             */
            customerId: string;
            /**
             * Format: double
             * @description Trading line in EUR for this legal entity.
             *     Indicates the EUR-equivalent maximum overall position across all currencies that you can have open at any given time.
             * @example 100000
             */
            tradingLineEur: number;
            /**
             * Format: double
             * @description Collateral amount in EUR for this legal entity.
             *     Indicates the amount of collateral in EUR you have posted across all your collateral accounts.
             * @example 200000
             */
            collateralEur: number;
            /**
             * Format: double
             * @description Total FX exposure limit for your legal entity in EUR (including trading line and collateral).
             * @example 300000
             */
            exposureLimitEur: number;
            /**
             * Format: double
             * @description Your current FX exposure for this legal entity in EUR
             * @example 4500
             */
            totalExposureEur: number;
            /**
             * Format: double
             * @description Your current exposure utilization for this legal entity represented in percentage terms.
             *     1.5 indicates you have used 1.5% of your available FX exposure.
             * @example 1.5
             */
            exposureUtilizationPct: number;
            /** @description Netted FX exposure per currency, impacting overall FX exposure */
            ccyExposures: components["schemas"]["CcyExposure"][];
        };
        /** @description Filter your FX Transactions */
        FxFilter: {
            /**
             * Format: int32
             * @description Number pages returned. Defaults to 1 if not specified.
             *
             *     PageNumber and PageSize details the pagination information
             *
             *     Condition: Valid page number (1 to n)
             * @default 1
             * @example 10
             */
            pageNumber: number;
            /**
             * Format: int32
             * @description Number of items returned per page. Defaults to 50 if not specified.
             *
             *     Condition: Required - Larger than zero
             * @default 50
             * @example 50
             */
            pageSize: number;
            /**
             * @description Account Id
             *
             *     Criteria: Exact match any of
             *
             *     * ForeignExchange.SoldAccountId
             *     * ForeignExchange.BoughtAccountId
             * @example [
             *       "720694c8-f6b3-4470-aac9-ffa779946d98",
             *       "ab89f333-908a-dc79-4be9-e368a0908c26"
             *     ]
             */
            accountId?: string[] | null;
            /**
             * @description Your reference used when booking a Banking Circle FX trade
             *
             *     Criteria: Exact match of ForeignExchange.ClientOrderId
             * @example 1aac349acde611ebb8bc0242ac130003
             */
            clientOrderId?: string | null;
            /**
             * @description Banking Circle's unique reference
             *
             *     Criteria: Exact match of ForeignExchange.BankingCircleRef
             * @example 21061612550014
             */
            bankingCircleRef?: string | null;
            /** @description Filter based on current status of your transactions
             *      */
            transactionStatus?: ("Open" | "Pending" | "Settled" | "Cancelled")[] | null;
            /**
             * Format: date-time
             * @description Filter based on the trade execution date. Show only transactions on or after this date.
             *
             *
             *     Format: ISO 8601 | YYYY-MM-DD
             * @example 2001-11-01
             */
            tradeDate?: string | null;
            /**
             * Format: date-time
             * @description Filter based on the trade execution date. Show only transactions with trade date until and including this date.
             *
             *
             *     Format: ISO 8601 | YYYY-MM-DD
             * @example 2001-11-01
             */
            tradeDateTo?: string | null;
            /**
             * Format: date-time
             * @description Filter based on the trade value. Show only transactions with value date on or after this date
             *
             *     Format: ISO 8601 | YYYY-MM-DD
             * @example 2001-11-01
             */
            valueDate?: string | null;
            /**
             * Format: date-time
             * @description Filter based on the trade value. Show only transactions with value date until and including this date.
             *
             *
             *     Format: ISO 8601 | YYYY-MM-DD
             * @example 2001-11-01
             */
            valueDateTo?: string | null;
            /** @description Filter based on currencies. Accepts multiple currencies using the and separator in the path. */
            currencies?: string[] | null;
            /**
             * Format: double
             * @description Filter based on the amount. Show only amounts equal or exceeding this value.
             * @example 10000
             */
            amount?: number | null;
            /**
             * @description Optional
             *
             *     Banking Circle Customer Id in case you have multiple legal entities and want to narrow the search
             * @example [
             *       "000012356"
             *     ]
             */
            customerId?: string[] | null;
        };
        /** @description Filter your FX Transactions */
        FxFilterBase: {
            /**
             * @description Account Id
             *
             *     Criteria: Exact match any of
             *
             *     * ForeignExchange.SoldAccountId
             *     * ForeignExchange.BoughtAccountId
             * @example [
             *       "720694c8-f6b3-4470-aac9-ffa779946d98",
             *       "ab89f333-908a-dc79-4be9-e368a0908c26"
             *     ]
             */
            accountId?: string[] | null;
            /**
             * @description Your reference used when booking a Banking Circle FX trade
             *
             *     Criteria: Exact match of ForeignExchange.ClientOrderId
             * @example 1aac349acde611ebb8bc0242ac130003
             */
            clientOrderId?: string | null;
            /**
             * @description Banking Circle's unique reference
             *
             *     Criteria: Exact match of ForeignExchange.BankingCircleRef
             * @example 21061612550014
             */
            bankingCircleRef?: string | null;
            /** @description Filter based on current status of your transactions
             *      */
            transactionStatus?: ("Open" | "Pending" | "Settled" | "Cancelled")[] | null;
            /**
             * Format: date-time
             * @description Filter based on the trade execution date. Show only transactions on or after this date.
             *
             *
             *     Format: ISO 8601 | YYYY-MM-DD
             * @example 2001-11-01
             */
            tradeDate?: string | null;
            /**
             * Format: date-time
             * @description Filter based on the trade execution date. Show only transactions with trade date until and including this date.
             *
             *
             *     Format: ISO 8601 | YYYY-MM-DD
             * @example 2001-11-01
             */
            tradeDateTo?: string | null;
            /**
             * Format: date-time
             * @description Filter based on the trade value. Show only transactions with value date on or after this date
             *
             *     Format: ISO 8601 | YYYY-MM-DD
             * @example 2001-11-01
             */
            valueDate?: string | null;
            /**
             * Format: date-time
             * @description Filter based on the trade value. Show only transactions with value date until and including this date.
             *
             *
             *     Format: ISO 8601 | YYYY-MM-DD
             * @example 2001-11-01
             */
            valueDateTo?: string | null;
            /** @description Filter based on currencies. Accepts multiple currencies using the and separator in the path. */
            currencies?: string[] | null;
            /**
             * Format: double
             * @description Filter based on the amount. Show only amounts equal or exceeding this value.
             * @example 10000
             */
            amount?: number | null;
            /**
             * @description Optional
             *
             *     Banking Circle Customer Id in case you have multiple legal entities and want to narrow the search
             * @example [
             *       "000012356"
             *     ]
             */
            customerId?: string[] | null;
        };
        /** @description Represents a Foreign Exchange (FX) quote by Banking Circle */
        FxQuote: {
            /**
             * @description Indicates whether this quote is a firm (tradable) quote or an indicative one.
             *     When requesting unsupported currencies or outside opening hours, you will receive
             *     a quote type 'NotAvailable'
             * @example Tradable
             * @enum {string}
             */
            quoteType: "NotAvailable" | "Indicative" | "Tradable" | "Cancelled";
            /**
             * @description The currency pair of the quote. As an example, the currency pair used is EURUSD. Here, the ExchangeRate
             *     refers to how many USD you can buy by selling 1 EUR, or how many USD you can sell to gain 1 EUR
             *     (only present if a quote is available)
             * @example EURUSD
             */
            currencyPair?: string | null;
            /**
             * Format: double
             * @description Exchange rate used when selling a currency (debiting an account), up to seven decimal points in value.
             * @example 1.1702965
             */
            exchangeRateBid?: number | null;
            /**
             * Format: double
             * @description Exchange rate used when buying a currency (crediting an account), up to seven decimal points in value.
             * @example 1.1703016
             */
            exchangeRateAsk?: number | null;
            /**
             * Format: uuid
             * @description Quote Id
             * @example ccecb8aa-32d7-4c38-8187-ade667bb1b75
             */
            quoteId?: string | null;
            /**
             * Format: date-time
             * @description Expiry time of the quote, ISO 8601 formatted
             * @example 2023-05-30T08:20:48.0752157+00:00
             */
            expiryTime?: string | null;
        };
        /** @description Represents a Foreign Exchange (FX) quote by Banking Circle that might include an error message */
        FxQuoteResponse: {
            /** @description Error message */
            errorMessage?: string | null;
            /**
             * Format: uuid
             * @description Request Id
             */
            requestId: string | null;
            /**
             * @description Indicates whether this quote is a firm (tradable) quote or an indicative one.
             *     When requesting unsupported currencies or outside opening hours, you will receive
             *     a quote type 'NotAvailable'
             * @example Tradable
             * @enum {string}
             */
            quoteType: "NotAvailable" | "Indicative" | "Tradable" | "Cancelled";
            /**
             * @description The currency pair of the quote. As an example, the currency pair used is EURUSD. Here, the ExchangeRate
             *     refers to how many USD you can buy by selling 1 EUR, or how many USD you can sell to gain 1 EUR
             *     (only present if a quote is available)
             * @example EURUSD
             */
            currencyPair?: string | null;
            /**
             * Format: double
             * @description Exchange rate used when selling a currency (debiting an account), up to seven decimal points in value.
             * @example 1.1702965
             */
            exchangeRateBid?: number | null;
            /**
             * Format: double
             * @description Exchange rate used when buying a currency (crediting an account), up to seven decimal points in value.
             * @example 1.1703016
             */
            exchangeRateAsk?: number | null;
            /**
             * Format: uuid
             * @description Quote Id
             * @example ccecb8aa-32d7-4c38-8187-ade667bb1b75
             */
            quoteId?: string | null;
            /**
             * Format: date-time
             * @description Expiry time of the quote, ISO 8601 formatted
             * @example 2023-05-30T08:20:48.0752157+00:00
             */
            expiryTime?: string | null;
        };
        /** @description Represents a Foreign Exchange (FX) rate by Banking Circle */
        FxRate: {
            /**
             * @description Indicates whether this quote is a firm (tradable) quote or an indicative one.
             *     When requesting unsupported currencies or outside opening hours, you will receive
             *     a quote type 'NotAvailable'
             * @example Indicative
             * @enum {string}
             */
            quoteType: "NotAvailable" | "Indicative" | "Tradable" | "Cancelled";
            /**
             * @description The currency pair of the quote. As an example, the currency pair used is EURUSD. Here, the ExchangeRate
             *     refers to how many USD you can buy by selling 1 EUR, or how many USD you can sell to gain 1 EUR
             *     (only present if a quote is available)
             * @example EURUSD
             */
            currencyPair?: string | null;
            /**
             * Format: double
             * @description Exchange rate, up to seven decimal points in value.
             * @example 1.1702965
             */
            exchangeRate?: number | null;
            /**
             * Format: uuid
             * @description Quote Id
             * @example ccecb8aa-32d7-4c38-8187-ade667bb1b75
             */
            quoteId?: string | null;
            /**
             * Format: date-time
             * @description Expiry time of the quote, ISO 8601 formatted
             */
            expiryTime?: string | null;
        };
        /** @description Represents a settlement date for a given tenor */
        FxSettlementDate: {
            /**
             * @description Tenor representing the settlement date
             * @example SPOT
             * @enum {string}
             */
            tenor: "ON" | "TN" | "SPOT";
            /**
             * Format: date
             * @description The calendar date equivalent settlement date of the tenor in yyyy-mm-dd format
             */
            settlementDate: string;
        };
        /** @description Represents a Foreign Exchange (FX) transaction between a client and Banking Circle */
        FxTransaction: {
            /**
             * @description Banking Circle's unique reference to the FX trade.
             *
             *     Matches with bankingCircleRef from an FX trade executed via our UI or API.
             *
             *     For trades executed on our RTFX platform, a unique technical identifier is used instead.
             * @example 21061612550014
             */
            bankingCircleRef: string;
            /**
             * @description Client reference from the original order.
             *
             *     For trades executed at our RTFX platform, our settlement system reference is used instead
             * @example 1aac349acde611ebb8bc0242ac130003
             */
            clientOrderId: string;
            /**
             * Format: date-time
             * @description Indicates when the trade was initiated
             */
            tradeDate: string;
            /**
             * Format: date-time
             * @description The settlement date of the trade: money changes hands on this date
             */
            valueDate: string;
            /**
             * Format: double
             * @description The amount that was bought
             */
            boughtAmount: number;
            /** @description The currency that was bought */
            boughtCurrency: string;
            boughtAccount: components["schemas"]["Account"];
            /**
             * Format: double
             * @description The amount that was sold
             */
            soldAmount: number;
            /** @description The currency that was sold */
            soldCurrency: string;
            soldAccount: components["schemas"]["Account"];
            /**
             * Format: double
             * @description Exchange rate used in the conversion
             */
            exchangeRate: number;
            /**
             * @description The current status of the transaction.
             * @example Settled
             * @enum {string}
             */
            transactionStatus: "Open" | "Pending" | "Settled" | "Cancelled";
            /**
             * @description Client note for internal purposes from the original order, if one was provided
             * @example January risk exposure hedge
             */
            note?: string | null;
            /**
             * @description Banking Circle Customer Id
             * @example 000012356
             */
            customerId?: string | null;
        };
        FxTransactionPagedResponse: {
            result?: components["schemas"]["FxTransaction"][] | null;
            pageInfo?: components["schemas"]["PageInfo"];
        };
        /** @description Held rate quote */
        HeldFxQuote: {
            /** @description Customer Id that requested the quote. */
            customerId: string;
            /**
             * Format: date-span
             * @description Held rate request duration
             */
            requestedDuration: string;
            /**
             * @description Indicates whether this quote is a firm (tradable) quote or an indicative one.
             *     When requesting unsupported currencies or outside opening hours, you will receive
             *     a quote type 'NotAvailable'
             * @example Tradable
             * @enum {string}
             */
            quoteType: "NotAvailable" | "Indicative" | "Tradable" | "Cancelled";
            /**
             * @description The currency pair of the quote. As an example, the currency pair used is EURUSD. Here, the ExchangeRate
             *     refers to how many USD you can buy by selling 1 EUR, or how many USD you can sell to gain 1 EUR
             *     (only present if a quote is available)
             * @example EURUSD
             */
            currencyPair?: string | null;
            /**
             * Format: double
             * @description Exchange rate used when selling a currency (debiting an account), up to seven decimal points in value.
             * @example 1.1702965
             */
            exchangeRateBid?: number | null;
            /**
             * Format: double
             * @description Exchange rate used when buying a currency (crediting an account), up to seven decimal points in value.
             * @example 1.1703016
             */
            exchangeRateAsk?: number | null;
            /**
             * Format: uuid
             * @description Quote Id
             * @example ccecb8aa-32d7-4c38-8187-ade667bb1b75
             */
            quoteId?: string | null;
            /**
             * Format: date-time
             * @description Expiry time of the quote, ISO 8601 formatted
             * @example 2023-05-30T08:20:48.0752157+00:00
             */
            expiryTime?: string | null;
        };
        HeldFxQuotePagedResponse: {
            result?: components["schemas"]["HeldFxQuote"][] | null;
            pageInfo?: components["schemas"]["PageInfo"];
        };
        PageInfo: {
            /** Format: int32 */
            currentPage?: number;
            /** Format: int32 */
            pageSize?: number;
            /** Format: int32 */
            rowCount?: number | null;
        };
        ProblemDetails: {
            type?: string | null;
            title?: string | null;
            /** Format: int32 */
            status?: number | null;
            detail?: string | null;
            instance?: string | null;
        } & {
            [key: string]: unknown;
        };
        /** @description Represents a Request for Quote (RFQ) */
        Rfq: {
            /**
             * Format: uuid
             * @description The request Id matching each quote
             * @example f47ac10b-58cc-4372-a567-0e02b2c3d479
             */
            requestId: string;
            /**
             * @description The currency pair of the quote. As an example, the currency pair used is EURUSD. Here, the ExchangeRate
             *     refers to how many USD you can buy by selling 1 EUR, or how many USD you can sell to gain 1 EUR
             *     (only present if a quote is available)
             * @example EURUSD
             */
            currencyPair: string;
            /**
             * @description Amount currency
             * @example USD
             */
            amountCurrency: string;
            /**
             * Format: double
             * @description Amount
             * @example 1000000
             */
            amount: number;
            /**
             * @description Tenor
             * @example SPOT
             * @enum {string}
             */
            tenor: "ON" | "TN" | "SPOT";
            /**
             * @description Is the RFQ for indicative quote?
             * @example true
             */
            indicative?: boolean;
            /**
             * Format: int32
             * @description The time in minutes for which the quote is valid
             * @example 2
             */
            validFor?: number;
            /**
             * @description CustomerId
             * @example 000012356
             */
            customerId: string;
        };
        /** @description Represents an FX Settlement Account. A foreign exchange settlement account determines the bank account where
         *     your bought currency is credited to, or sold currency is debited from. */
        SettlementAccount: {
            /**
             * Format: uuid
             * @description Account (technical) identifier
             */
            accountId: string;
            /** @description Banking Circle Customer Id. */
            customerId: string;
            /** @description The account currency. */
            currency: string;
            /** @description Indicates whether this account can be used for buying a currency or selling a currency.
             *     It is primarily useful in a scenario where you would like to sell (or debit) from a different account in
             *     e.g. USD than you are buying (or crediting) from the currencies involved in the trade. */
            isDefaultAccount: boolean;
            /**
             * @description Indicates whether this is the account used for buying a currency or selling a currency.
             * @enum {string}
             */
            side: "Buy" | "Sell";
        };
        ValidationException: {
            /** @enum {string} */
            httpStatus?: "Continue" | "SwitchingProtocols" | "Processing" | "EarlyHints" | "OK" | "Created" | "Accepted" | "NonAuthoritativeInformation" | "NoContent" | "ResetContent" | "PartialContent" | "MultiStatus" | "AlreadyReported" | "IMUsed" | "MultipleChoices" | "MovedPermanently" | "Found" | "SeeOther" | "NotModified" | "UseProxy" | "Unused" | "RedirectKeepVerb" | "PermanentRedirect" | "BadRequest" | "Unauthorized" | "PaymentRequired" | "Forbidden" | "NotFound" | "MethodNotAllowed" | "NotAcceptable" | "ProxyAuthenticationRequired" | "RequestTimeout" | "Conflict" | "Gone" | "LengthRequired" | "PreconditionFailed" | "RequestEntityTooLarge" | "RequestUriTooLong" | "UnsupportedMediaType" | "RequestedRangeNotSatisfiable" | "ExpectationFailed" | "MisdirectedRequest" | "UnprocessableEntity" | "Locked" | "FailedDependency" | "UpgradeRequired" | "PreconditionRequired" | "TooManyRequests" | "RequestHeaderFieldsTooLarge" | "UnavailableForLegalReasons" | "InternalServerError" | "NotImplemented" | "BadGateway" | "ServiceUnavailable" | "GatewayTimeout" | "HttpVersionNotSupported" | "VariantAlsoNegotiates" | "InsufficientStorage" | "LoopDetected" | "NotExtended" | "NetworkAuthenticationRequired";
            /** Format: int32 */
            errorCode?: number | null;
            keyOrMessage?: string | null;
            interpolations?: string[] | null;
            details?: unknown;
            /** @enum {string} */
            logLevel?: "Trace" | "Debug" | "Information" | "Warning" | "Error" | "Critical" | "None";
            dontSendMessageTextToClients?: boolean;
            message?: string | null;
            readonly data?: {
                [key: string]: unknown;
            } | null;
            innerException?: unknown;
            helpLink?: string | null;
            source?: string | null;
            /** Format: int32 */
            hResult?: number;
            readonly stackTrace?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
