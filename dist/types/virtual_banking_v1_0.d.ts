/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    "/api/v1/virtualaccounts/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of Virtual Account orders */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OrderResponse"][];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        /** Order Virtual Accounts */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    /** @example {
                     *       "companyNumber": "000012456",
                     *       "defaultPhysicalAccountId": "21910afb-e4d9-4d1e-8f0d-b5f8e71d1eeb",
                     *       "orderType": "Pobo",
                     *       "customerDetailsList": [
                     *         {
                     *           "customerIdentifier": "string",
                     *           "customerType": "P",
                     *           "name": "string",
                     *           "address1": "string",
                     *           "address2": "string",
                     *           "address3": "string",
                     *           "ubOfirstname1": "string",
                     *           "ubOlastname1": "string",
                     *           "ubOfirstname2": "string",
                     *           "ubOlastname2": "string",
                     *           "ubOfirstname3": "string",
                     *           "ubOlastname3": "string",
                     *           "ubOfirstname4": "string",
                     *           "ubOlastname4": "string",
                     *           "ubOfirstname5": "string",
                     *           "ubOlastname5": "string"
                     *         }
                     *       ],
                     *       "physicalAccountsList": [
                     *         "21910afb-e4d9-4d1e-8f0d-b5f8e71d1eeb"
                     *       ],
                     *       "orderedAmount": 1
                     *     } */
                    "application/json": components["schemas"]["OrderRequest"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OrderCreatedResult"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/virtualaccounts/orders/{orderId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Details of a Virtual Account order */
        get: {
            parameters: {
                query?: {
                    /** @description Country format of VIBAN(s)<br />
                     *     Acceptable values: DK, LU, DE, GB */
                    VibanCountry?: string[];
                    /**
                     * @description Number of pages returned.<br />
                     *     Condition: Valid page number(1 to n)
                     * @example 1
                     */
                    PageNumber?: number;
                    /**
                     * @description No. of items returned per page.<br />
                     *     Condition: Valid page size(1 to 20000)<br />
                     * @example 50
                     */
                    PageSize?: number;
                };
                header?: never;
                path: {
                    orderId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OrderDetailedResponse"];
                        "application/csv": components["schemas"]["OrderDetailedResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                        "application/csv": components["schemas"]["ValidationProblemDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                        "application/csv": components["schemas"]["ValidationProblemDetails"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                        "application/csv": components["schemas"]["ValidationProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                        "application/csv": components["schemas"]["ValidationProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/virtualAccounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List of Virtual Accounts */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Virtual account number.<br />
                     *     Condition: Nullable string
                     * @example 0099394118
                     */
                    VirtualAccountNumber?: string;
                    /**
                     * @description Company number of the company owning the accounts.
                     * @example 000015106
                     */
                    CompanyNumber?: string;
                    /**
                     * @description Number of pages returned.<br />
                     *     Condition: Valid page number(1 to n)
                     * @example 1
                     */
                    PageNumber?: number;
                    /**
                     * @description No. of items returned per page.<br />
                     *     Condition: Valid page size(1 to 100)<br />
                     * @example 10
                     */
                    PageSize?: number;
                    /**
                     * @description Filter to get virtual accounts by customer details status<br />
                     * @example Pending, Processed, Failed, Unallocated
                     */
                    CustomerDetailsStatus?: components["schemas"]["CustomerDetailsFilter"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["VirtualAccountResponsePagedResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/virtualAccounts/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Virtual Account without customer details */
        get: {
            parameters: {
                query: {
                    /**
                     * @description Company number of the company owning the accounts.
                     * @example 000015106
                     */
                    CompanyNumber: string;
                    /**
                     * @description The Virtual Account type to retrieve.
                     * @example Pobo, Cobo
                     */
                    AccountType: components["schemas"]["UnallocatedAccountType"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["VirtualAccountBaseResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/virtualAccounts/{virtualAccountNumber}/{companyNumber}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Status of customer details update */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description Company number of the company owning the accounts.
                     * @example 000015106
                     */
                    companyNumber: string;
                    /**
                     * @description The Virtual Account number with updated customer details.
                     * @example 0099394118
                     */
                    virtualAccountNumber: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CustomerDetailsStatusResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/virtualAccounts/{virtualAccountNumber}/close/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Status of virtual account closure */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    virtualAccountNumber: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ClosureDetailsResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/virtualAccounts/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add customer details */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    /** @example {
                     *       "companyNumber": "000012345",
                     *       "customerDetailsList": [
                     *         {
                     *           "virtualAccountNumber": "0000324867",
                     *           "customerDetails": {
                     *             "customerIdentifier": "string",
                     *             "customerType": "P",
                     *             "name": "string",
                     *             "address1": "string",
                     *             "address2": "string",
                     *             "address3": "string",
                     *             "ubOfirstname1": "string",
                     *             "ubOlastname1": "string",
                     *             "ubOfirstname2": "string",
                     *             "ubOlastname2": "string",
                     *             "ubOfirstname3": "string",
                     *             "ubOlastname3": "string",
                     *             "ubOfirstname4": "string",
                     *             "ubOlastname4": "string",
                     *             "ubOfirstname5": "string",
                     *             "ubOlastname5": "string"
                     *           }
                     *         }
                     *       ]
                     *     } */
                    "application/json": components["schemas"]["UpdateCustomerDetailsRequest"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/virtualAccounts/close": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Close Virtual Accounts */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CloseVirtualAccountsRequest"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/virtualAccounts/close/file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Close Virtual Accounts by file */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "multipart/form-data": {
                        /** Format: binary */
                        file?: string;
                    };
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CsvFailureResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/virtualAccounts/update/file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add customer details by file */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "multipart/form-data": {
                        /** Format: binary */
                        file?: string;
                    };
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CsvFailureResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        CloseVirtualAccount: {
            /**
             * @description Specifies the reason code for account closure
             * @example C01
             */
            reasonCode: string;
            /**
             * @description The Virtual Account number for closure.
             * @example 0039021169
             */
            virtualAccountNumber: string;
        };
        CloseVirtualAccountsRequest: {
            closeVirtualAccountsList?: components["schemas"]["CloseVirtualAccount"][] | null;
        };
        ClosureDetailsResponse: {
            /**
             * @description Virtual account number
             * @example 0099394118
             */
            virtualAccountNumber?: string | null;
            /**
             * @description ReasonCode associated with closure.
             * @example C01,C02
             */
            reasonCode?: string | null;
            /**
             * @description Status of account closure
             * @example Pending,Failed,Processed
             */
            closureStatus?: string | null;
        };
        CsvErrorDetails: {
            onColumn?: boolean;
            errorMessage?: string | null;
            /** Format: int32 */
            rowNumber?: number | null;
            propertyName?: string | null;
        };
        CsvFailureResponse: {
            errors?: {
                [key: string]: components["schemas"]["CsvErrorDetails"][];
            } | null;
            type?: string | null;
            title?: string | null;
            /** Format: int32 */
            status?: number | null;
            detail?: string | null;
            instance?: string | null;
        } & {
            [key: string]: unknown;
        };
        CustomerDetailResponse: {
            customerType?: components["schemas"]["CustomerType"];
            customerIdentifier?: string | null;
            name?: string | null;
            address1?: string | null;
            address2?: string | null;
            address3?: string | null;
            beneficiaryOwnerFirstName1?: string | null;
            beneficiaryOwnerLastName1?: string | null;
            beneficiaryOwnerFirstName2?: string | null;
            beneficiaryOwnerLastName2?: string | null;
            beneficiaryOwnerFirstName3?: string | null;
            beneficiaryOwnerLastName3?: string | null;
            beneficiaryOwnerFirstName4?: string | null;
            beneficiaryOwnerLastName4?: string | null;
            beneficiaryOwnerFirstName5?: string | null;
            beneficiaryOwnerLastName5?: string | null;
        };
        CustomerDetailsBase: {
            /** @description Specifies your end customer identification in your systems. This is a completely optional field and can be left blank. */
            customerIdentifier?: string | null;
            customerType: components["schemas"]["CustomerType"];
            /** @description Specifies name and surname of the customer associated with the Virtual Account */
            name: string;
            /** @description Specifies the street address of the customer associated with the Virtual Account */
            address1: string;
            /** @description Specifies the City and Zipcode of the customer associated with the Virtual Account */
            address2: string;
            /** @description Specifies the country code of the underlying customer associated with the Virtual Account */
            address3: string;
            /** @description Specifies the first name of the individual associated with the underlying customer mapped to the Virtual Account. */
            ubOfirstname1: string;
            /** @description Specifies the last name of the individual associated with the underlying customer mapped to the Virtual Account. */
            ubOlastname1: string;
            /** @description Specifies the first name of the individual associated with the underlying customer mapped to the Virtual Account. */
            ubOfirstname2?: string | null;
            /** @description Specifies the last name of the individual associated with the underlying customer mapped to the Virtual Account. */
            ubOlastname2?: string | null;
            /** @description Specifies the first name of the individual associated with the underlying customer mapped to the Virtual Account. */
            ubOfirstname3?: string | null;
            /** @description Specifies the last name of the individual associated with the underlying customer mapped to the Virtual Account. */
            ubOlastname3?: string | null;
            /** @description Specifies the first name of the individual associated with the underlying customer mapped to the Virtual Account. */
            ubOfirstname4?: string | null;
            /** @description Specifies the last name of the individual associated with the underlying customer mapped to the Virtual Account. */
            ubOlastname4?: string | null;
            /** @description Specifies the first name of the individual associated with the underlying customer mapped to the Virtual Account. */
            ubOfirstname5?: string | null;
            /** @description Specifies the last name of the individual associated with the underlying customer mapped to the Virtual Account. */
            ubOlastname5?: string | null;
        };
        /** @enum {string} */
        CustomerDetailsFilter: "Pending" | "Processed" | "Failed" | "Unallocated";
        CustomerDetailsStatusResponse: {
            /**
             * @description Virtual account number
             * @example 0099394118
             */
            virtualAccountNumber?: string | null;
            customerDetails?: components["schemas"]["CustomerDetailResponse"];
            /**
             * @description Customer details update status
             * @example Processed
             */
            status?: string | null;
        };
        CustomerDetailsWithStatusResponse: {
            status?: string | null;
            customerType?: components["schemas"]["CustomerType"];
            customerIdentifier?: string | null;
            name?: string | null;
            address1?: string | null;
            address2?: string | null;
            address3?: string | null;
            beneficiaryOwnerFirstName1?: string | null;
            beneficiaryOwnerLastName1?: string | null;
            beneficiaryOwnerFirstName2?: string | null;
            beneficiaryOwnerLastName2?: string | null;
            beneficiaryOwnerFirstName3?: string | null;
            beneficiaryOwnerLastName3?: string | null;
            beneficiaryOwnerFirstName4?: string | null;
            beneficiaryOwnerLastName4?: string | null;
            beneficiaryOwnerFirstName5?: string | null;
            beneficiaryOwnerLastName5?: string | null;
        };
        /** @enum {string} */
        CustomerType: "P" | "C" | "G" | "N";
        DefaultVirtualAccountResponse: {
            currency?: string | null;
            iban?: string | null;
        };
        OrderCreatedResult: {
            /** Format: uuid */
            orderId?: string | null;
        };
        /** @description Represents a response containing an order's information. */
        OrderDetailedResponse: {
            /** Format: uuid */
            readonly id?: string;
            readonly companyNumber?: string | null;
            readonly isMulticurrency?: boolean;
            readonly orderType?: string | null;
            readonly processStatus?: string | null;
            /** Format: date-time */
            readonly timeOrdered?: string;
            /** Format: int32 */
            readonly orderedAmount?: number;
            defaultAccount?: components["schemas"]["SimpleAccount"];
            readonly masterAccounts?: components["schemas"]["SimpleAccount"][] | null;
            virtualAccounts?: components["schemas"]["VibanResponsePagedResponse"];
        };
        /** @description Represents the required user provided values to order regular, multicurrency Virtual Accounts. */
        OrderRequest: {
            /** @description Company number of the company owning the accounts. */
            companyNumber: string;
            /**
             * Format: uuid
             * @description Id (guid) of the physical account the user wants to use as the default Master Account.
             *     This property is required when the user has multiple physical master accounts under the same company.
             */
            defaultPhysicalAccountId?: string | null;
            orderType: components["schemas"]["OrderType"];
            customerDetailsList?: components["schemas"]["CustomerDetailsBase"][] | null;
            /** @description Optional list of physical master accounts ids (guids) to create orders with specific currencies. */
            physicalAccountsList?: string[] | null;
            /**
             * Format: int32
             * @description The number of virtual accounts to be ordered.
             */
            orderedAmount: number;
        };
        /** @description Represents a response containing an order's information. */
        OrderResponse: {
            /** Format: uuid */
            readonly id?: string;
            readonly companyNumber?: string | null;
            readonly isMulticurrency?: boolean;
            readonly orderType?: string | null;
            readonly processStatus?: string | null;
            /** Format: date-time */
            readonly timeOrdered?: string;
            /** Format: int32 */
            readonly orderedAmount?: number;
            defaultAccount?: components["schemas"]["SimpleAccount"];
        };
        /** @enum {string} */
        OrderType: "Pobo" | "Reconciliation" | "Cobo";
        /** @description Page information of the responded Result Set */
        PageInfo: {
            /**
             * Format: int32
             * @description What page has been retuned
             */
            currentPage?: number;
            /**
             * Format: int32
             * @description The Result Set and CurrentPage was generated based on a number of allowed elements per page (PageSize)
             */
            pageSize?: number;
            /**
             * Format: int32
             * @description Total of records
             */
            rowCount?: number | null;
        };
        SimpleAccount: {
            currency?: string | null;
            iban?: string | null;
        };
        /** @enum {string} */
        UnallocatedAccountType: "Pobo" | "Cobo";
        UpdateCustomerDetails: {
            /**
             * @description Specifies the Virtual Account number you want to update<br />
             * @example 0099394118
             */
            virtualAccountNumber: string;
            customerDetails: components["schemas"]["CustomerDetailsBase"];
        };
        UpdateCustomerDetailsRequest: {
            /**
             * @description Company number of the company owning the accounts.
             * @example 000015106
             */
            companyNumber: string;
            customerDetailsList: components["schemas"]["UpdateCustomerDetails"][];
        };
        ValidationProblemDetails: {
            errors?: {
                [key: string]: string[];
            } | null;
            type?: string | null;
            title?: string | null;
            /** Format: int32 */
            status?: number | null;
            detail?: string | null;
            instance?: string | null;
        } & {
            [key: string]: unknown;
        };
        VibanResponse: {
            virtualIbans?: string[] | null;
            virtualAccountNumber?: string | null;
            active?: boolean;
            customerDetails?: components["schemas"]["CustomerDetailResponse"];
        };
        VibanResponsePagedResponse: {
            /** @description Contains elements resulting from your query */
            result?: components["schemas"]["VibanResponse"][] | null;
            pageInfo?: components["schemas"]["PageInfo"];
        };
        VirtualAccountBaseResponse: {
            /**
             * @description Customer ID of the account
             * @example 000015106
             */
            companyNumber?: string | null;
            /**
             * @description Virtual Account Number
             * @example 0099394118
             */
            virtualAccountNumber?: string | null;
            /** @description VIBANs associated with virtual account */
            virtualIbans?: string[] | null;
            defaultAccount?: components["schemas"]["DefaultVirtualAccountResponse"];
            /**
             * Format: date-time
             * @description Date of when the virtual account has been opened
             * @example 27/10/2021
             */
            creationDate?: string | null;
            /**
             * @description OrderType that linked to this virtual account
             * @example Pobo,Cobo,Reconciliation
             */
            virtualAccountType?: string | null;
        };
        VirtualAccountResponse: {
            /**
             * @description Customer ID of the account
             * @example 000015106
             */
            companyNumber?: string | null;
            /**
             * @description Virtual Account Number
             * @example 0099394118
             */
            virtualAccountNumber?: string | null;
            /** @description VIBANs associated with virtual account */
            virtualIbans?: string[] | null;
            defaultAccount?: components["schemas"]["DefaultVirtualAccountResponse"];
            /**
             * Format: date-time
             * @description Date of when the virtual account has been opened
             * @example 27/10/2021
             */
            creationDate?: string | null;
            /**
             * @description Status of virtual account.
             * @example Active/InActive
             */
            status?: string | null;
            /**
             * @description OrderType that linked to this virtual account
             * @example Pobo,Cobo,Reconciliation
             */
            virtualAccountType?: string | null;
            customerDetails?: components["schemas"]["CustomerDetailsWithStatusResponse"];
        };
        VirtualAccountResponsePagedResponse: {
            /** @description Contains elements resulting from your query */
            result?: components["schemas"]["VirtualAccountResponse"][] | null;
            pageInfo?: components["schemas"]["PageInfo"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
